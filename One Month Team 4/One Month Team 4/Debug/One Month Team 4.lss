
One Month Team 4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000164a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00802000  0000164a  000016de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080201e  0080201e  000016fc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000016fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001758  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00001798  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d954  00000000  00000000  000019c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004e81  00000000  00000000  0000f314  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000434e  00000000  00000000  00014195  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007c8  00000000  00000000  000184e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00032645  00000000  00000000  00018cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002487  00000000  00000000  0004b2f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  0004d778  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b3e1  00000000  00000000  0004d950  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	20 c1       	rjmp	.+576    	; 0x246 <__bad_interrupt>
       6:	00 00       	nop
       8:	1e c1       	rjmp	.+572    	; 0x246 <__bad_interrupt>
       a:	00 00       	nop
       c:	1c c1       	rjmp	.+568    	; 0x246 <__bad_interrupt>
       e:	00 00       	nop
      10:	1a c1       	rjmp	.+564    	; 0x246 <__bad_interrupt>
      12:	00 00       	nop
      14:	18 c1       	rjmp	.+560    	; 0x246 <__bad_interrupt>
      16:	00 00       	nop
      18:	16 c1       	rjmp	.+556    	; 0x246 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	14 c1       	rjmp	.+552    	; 0x246 <__bad_interrupt>
      1e:	00 00       	nop
      20:	12 c1       	rjmp	.+548    	; 0x246 <__bad_interrupt>
      22:	00 00       	nop
      24:	10 c1       	rjmp	.+544    	; 0x246 <__bad_interrupt>
      26:	00 00       	nop
      28:	0e c1       	rjmp	.+540    	; 0x246 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c c1       	rjmp	.+536    	; 0x246 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0a c1       	rjmp	.+532    	; 0x246 <__bad_interrupt>
      32:	00 00       	nop
      34:	08 c1       	rjmp	.+528    	; 0x246 <__bad_interrupt>
      36:	00 00       	nop
      38:	06 c1       	rjmp	.+524    	; 0x246 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	04 c1       	rjmp	.+520    	; 0x246 <__bad_interrupt>
      3e:	00 00       	nop
      40:	02 c1       	rjmp	.+516    	; 0x246 <__bad_interrupt>
      42:	00 00       	nop
      44:	00 c1       	rjmp	.+512    	; 0x246 <__bad_interrupt>
      46:	00 00       	nop
      48:	fe c0       	rjmp	.+508    	; 0x246 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fc c0       	rjmp	.+504    	; 0x246 <__bad_interrupt>
      4e:	00 00       	nop
      50:	fa c0       	rjmp	.+500    	; 0x246 <__bad_interrupt>
      52:	00 00       	nop
      54:	f8 c0       	rjmp	.+496    	; 0x246 <__bad_interrupt>
      56:	00 00       	nop
      58:	f6 c0       	rjmp	.+492    	; 0x246 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f4 c0       	rjmp	.+488    	; 0x246 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f2 c0       	rjmp	.+484    	; 0x246 <__bad_interrupt>
      62:	00 00       	nop
      64:	f0 c0       	rjmp	.+480    	; 0x246 <__bad_interrupt>
      66:	00 00       	nop
      68:	ee c0       	rjmp	.+476    	; 0x246 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ec c0       	rjmp	.+472    	; 0x246 <__bad_interrupt>
      6e:	00 00       	nop
      70:	ea c0       	rjmp	.+468    	; 0x246 <__bad_interrupt>
      72:	00 00       	nop
      74:	e8 c0       	rjmp	.+464    	; 0x246 <__bad_interrupt>
      76:	00 00       	nop
      78:	e6 c0       	rjmp	.+460    	; 0x246 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e4 c0       	rjmp	.+456    	; 0x246 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e2 c0       	rjmp	.+452    	; 0x246 <__bad_interrupt>
      82:	00 00       	nop
      84:	e0 c0       	rjmp	.+448    	; 0x246 <__bad_interrupt>
      86:	00 00       	nop
      88:	de c0       	rjmp	.+444    	; 0x246 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dc c0       	rjmp	.+440    	; 0x246 <__bad_interrupt>
      8e:	00 00       	nop
      90:	da c0       	rjmp	.+436    	; 0x246 <__bad_interrupt>
      92:	00 00       	nop
      94:	d8 c0       	rjmp	.+432    	; 0x246 <__bad_interrupt>
      96:	00 00       	nop
      98:	d6 c0       	rjmp	.+428    	; 0x246 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	60 c4       	rjmp	.+2240   	; 0x95e <__vector_39>
      9e:	00 00       	nop
      a0:	9b c4       	rjmp	.+2358   	; 0x9d8 <__vector_40>
      a2:	00 00       	nop
      a4:	d6 c4       	rjmp	.+2476   	; 0xa52 <__vector_41>
      a6:	00 00       	nop
      a8:	11 c5       	rjmp	.+2594   	; 0xacc <__vector_42>
      aa:	00 00       	nop
      ac:	cc c0       	rjmp	.+408    	; 0x246 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ca c0       	rjmp	.+404    	; 0x246 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c8 c0       	rjmp	.+400    	; 0x246 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c6 c0       	rjmp	.+396    	; 0x246 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c4 c0       	rjmp	.+392    	; 0x246 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c2 c0       	rjmp	.+388    	; 0x246 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c0 c0       	rjmp	.+384    	; 0x246 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	be c0       	rjmp	.+380    	; 0x246 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bc c0       	rjmp	.+376    	; 0x246 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ba c0       	rjmp	.+372    	; 0x246 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b8 c0       	rjmp	.+368    	; 0x246 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b6 c0       	rjmp	.+364    	; 0x246 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b4 c0       	rjmp	.+360    	; 0x246 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b2 c0       	rjmp	.+356    	; 0x246 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b0 c0       	rjmp	.+352    	; 0x246 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ae c0       	rjmp	.+348    	; 0x246 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ac c0       	rjmp	.+344    	; 0x246 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	aa c0       	rjmp	.+340    	; 0x246 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a8 c0       	rjmp	.+336    	; 0x246 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a6 c0       	rjmp	.+332    	; 0x246 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a4 c0       	rjmp	.+328    	; 0x246 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a2 c0       	rjmp	.+324    	; 0x246 <__bad_interrupt>
     102:	00 00       	nop
     104:	a0 c0       	rjmp	.+320    	; 0x246 <__bad_interrupt>
     106:	00 00       	nop
     108:	9e c0       	rjmp	.+316    	; 0x246 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9c c0       	rjmp	.+312    	; 0x246 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9a c0       	rjmp	.+308    	; 0x246 <__bad_interrupt>
     112:	00 00       	nop
     114:	98 c0       	rjmp	.+304    	; 0x246 <__bad_interrupt>
     116:	00 00       	nop
     118:	96 c0       	rjmp	.+300    	; 0x246 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2c c3       	rjmp	.+1624   	; 0x776 <__vector_71>
     11e:	00 00       	nop
     120:	67 c3       	rjmp	.+1742   	; 0x7f0 <__vector_72>
     122:	00 00       	nop
     124:	a2 c3       	rjmp	.+1860   	; 0x86a <__vector_73>
     126:	00 00       	nop
     128:	dd c3       	rjmp	.+1978   	; 0x8e4 <__vector_74>
     12a:	00 00       	nop
     12c:	8c c0       	rjmp	.+280    	; 0x246 <__bad_interrupt>
     12e:	00 00       	nop
     130:	8a c0       	rjmp	.+276    	; 0x246 <__bad_interrupt>
     132:	00 00       	nop
     134:	88 c0       	rjmp	.+272    	; 0x246 <__bad_interrupt>
     136:	00 00       	nop
     138:	86 c0       	rjmp	.+268    	; 0x246 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	84 c0       	rjmp	.+264    	; 0x246 <__bad_interrupt>
     13e:	00 00       	nop
     140:	82 c0       	rjmp	.+260    	; 0x246 <__bad_interrupt>
     142:	00 00       	nop
     144:	80 c0       	rjmp	.+256    	; 0x246 <__bad_interrupt>
     146:	00 00       	nop
     148:	7e c0       	rjmp	.+252    	; 0x246 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7c c0       	rjmp	.+248    	; 0x246 <__bad_interrupt>
     14e:	00 00       	nop
     150:	7a c0       	rjmp	.+244    	; 0x246 <__bad_interrupt>
     152:	00 00       	nop
     154:	78 c0       	rjmp	.+240    	; 0x246 <__bad_interrupt>
     156:	00 00       	nop
     158:	76 c0       	rjmp	.+236    	; 0x246 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	74 c0       	rjmp	.+232    	; 0x246 <__bad_interrupt>
     15e:	00 00       	nop
     160:	72 c0       	rjmp	.+228    	; 0x246 <__bad_interrupt>
     162:	00 00       	nop
     164:	70 c0       	rjmp	.+224    	; 0x246 <__bad_interrupt>
     166:	00 00       	nop
     168:	6e c0       	rjmp	.+220    	; 0x246 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6c c0       	rjmp	.+216    	; 0x246 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6a c0       	rjmp	.+212    	; 0x246 <__bad_interrupt>
     172:	00 00       	nop
     174:	68 c0       	rjmp	.+208    	; 0x246 <__bad_interrupt>
     176:	00 00       	nop
     178:	66 c0       	rjmp	.+204    	; 0x246 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	64 c0       	rjmp	.+200    	; 0x246 <__bad_interrupt>
     17e:	00 00       	nop
     180:	62 c0       	rjmp	.+196    	; 0x246 <__bad_interrupt>
     182:	00 00       	nop
     184:	60 c0       	rjmp	.+192    	; 0x246 <__bad_interrupt>
     186:	00 00       	nop
     188:	5e c0       	rjmp	.+188    	; 0x246 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5c c0       	rjmp	.+184    	; 0x246 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5a c0       	rjmp	.+180    	; 0x246 <__bad_interrupt>
     192:	00 00       	nop
     194:	58 c0       	rjmp	.+176    	; 0x246 <__bad_interrupt>
     196:	00 00       	nop
     198:	56 c0       	rjmp	.+172    	; 0x246 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	54 c0       	rjmp	.+168    	; 0x246 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	52 c0       	rjmp	.+164    	; 0x246 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	50 c0       	rjmp	.+160    	; 0x246 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4e c0       	rjmp	.+156    	; 0x246 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4c c0       	rjmp	.+152    	; 0x246 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4a c0       	rjmp	.+148    	; 0x246 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	48 c0       	rjmp	.+144    	; 0x246 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	46 c0       	rjmp	.+140    	; 0x246 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	44 c0       	rjmp	.+136    	; 0x246 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	42 c0       	rjmp	.+132    	; 0x246 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	40 c0       	rjmp	.+128    	; 0x246 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3e c0       	rjmp	.+124    	; 0x246 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3c c0       	rjmp	.+120    	; 0x246 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3a c0       	rjmp	.+116    	; 0x246 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	38 c0       	rjmp	.+112    	; 0x246 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	36 c0       	rjmp	.+108    	; 0x246 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	34 c0       	rjmp	.+104    	; 0x246 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	32 c0       	rjmp	.+100    	; 0x246 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	30 c0       	rjmp	.+96     	; 0x246 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2e c0       	rjmp	.+92     	; 0x246 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2c c0       	rjmp	.+88     	; 0x246 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2a c0       	rjmp	.+84     	; 0x246 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	28 c0       	rjmp	.+80     	; 0x246 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	26 c0       	rjmp	.+76     	; 0x246 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	ea e4       	ldi	r30, 0x4A	; 74
     21c:	f6 e1       	ldi	r31, 0x16	; 22
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	ae 31       	cpi	r26, 0x1E	; 30
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	20 e2       	ldi	r18, 0x20	; 32
     232:	ae e1       	ldi	r26, 0x1E	; 30
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	a2 33       	cpi	r26, 0x32	; 50
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	7e d5       	rcall	.+2812   	; 0xd3e <main>
     242:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <_exit>

00000246 <__bad_interrupt>:
     246:	dc ce       	rjmp	.-584    	; 0x0 <__vectors>

00000248 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     248:	cf 93       	push	r28
     24a:	df 93       	push	r29
     24c:	1f 92       	push	r1
     24e:	cd b7       	in	r28, 0x3d	; 61
     250:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     252:	80 91 26 20 	lds	r24, 0x2026	; 0x802026 <stdio_base>
     256:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <stdio_base+0x1>
     25a:	e0 91 1e 20 	lds	r30, 0x201E	; 0x80201e <__data_end>
     25e:	f0 91 1f 20 	lds	r31, 0x201F	; 0x80201f <__data_end+0x1>
     262:	be 01       	movw	r22, r28
     264:	6f 5f       	subi	r22, 0xFF	; 255
     266:	7f 4f       	sbci	r23, 0xFF	; 255
     268:	19 95       	eicall
	return c;
     26a:	89 81       	ldd	r24, Y+1	; 0x01
}
     26c:	08 2e       	mov	r0, r24
     26e:	00 0c       	add	r0, r0
     270:	99 0b       	sbc	r25, r25
     272:	0f 90       	pop	r0
     274:	df 91       	pop	r29
     276:	cf 91       	pop	r28
     278:	08 95       	ret

0000027a <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     27a:	fc 01       	movw	r30, r24
     27c:	91 81       	ldd	r25, Z+1	; 0x01
     27e:	95 ff       	sbrs	r25, 5
     280:	fd cf       	rjmp	.-6      	; 0x27c <usart_putchar+0x2>
     282:	60 83       	st	Z, r22
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	08 95       	ret

0000028a <usart_getchar>:
     28a:	fc 01       	movw	r30, r24
     28c:	91 81       	ldd	r25, Z+1	; 0x01
     28e:	99 23       	and	r25, r25
     290:	ec f7       	brge	.-6      	; 0x28c <usart_getchar+0x2>
     292:	80 81       	ld	r24, Z
     294:	08 95       	ret

00000296 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     296:	4f 92       	push	r4
     298:	5f 92       	push	r5
     29a:	6f 92       	push	r6
     29c:	7f 92       	push	r7
     29e:	8f 92       	push	r8
     2a0:	9f 92       	push	r9
     2a2:	af 92       	push	r10
     2a4:	bf 92       	push	r11
     2a6:	ef 92       	push	r14
     2a8:	ff 92       	push	r15
     2aa:	0f 93       	push	r16
     2ac:	1f 93       	push	r17
     2ae:	cf 93       	push	r28
     2b0:	7c 01       	movw	r14, r24
     2b2:	4a 01       	movw	r8, r20
     2b4:	5b 01       	movw	r10, r22
     2b6:	28 01       	movw	r4, r16
     2b8:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     2ba:	fc 01       	movw	r30, r24
     2bc:	84 81       	ldd	r24, Z+4	; 0x04
     2be:	82 ff       	sbrs	r24, 2
     2c0:	16 c0       	rjmp	.+44     	; 0x2ee <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     2c2:	d9 01       	movw	r26, r18
     2c4:	c8 01       	movw	r24, r16
     2c6:	68 94       	set
     2c8:	12 f8       	bld	r1, 2
     2ca:	b6 95       	lsr	r27
     2cc:	a7 95       	ror	r26
     2ce:	97 95       	ror	r25
     2d0:	87 95       	ror	r24
     2d2:	16 94       	lsr	r1
     2d4:	d1 f7       	brne	.-12     	; 0x2ca <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     2d6:	b9 01       	movw	r22, r18
     2d8:	a8 01       	movw	r20, r16
     2da:	03 2e       	mov	r0, r19
     2dc:	36 e1       	ldi	r19, 0x16	; 22
     2de:	76 95       	lsr	r23
     2e0:	67 95       	ror	r22
     2e2:	57 95       	ror	r21
     2e4:	47 95       	ror	r20
     2e6:	3a 95       	dec	r19
     2e8:	d1 f7       	brne	.-12     	; 0x2de <usart_set_baudrate+0x48>
     2ea:	30 2d       	mov	r19, r0
     2ec:	15 c0       	rjmp	.+42     	; 0x318 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     2ee:	d9 01       	movw	r26, r18
     2f0:	c8 01       	movw	r24, r16
     2f2:	68 94       	set
     2f4:	13 f8       	bld	r1, 3
     2f6:	b6 95       	lsr	r27
     2f8:	a7 95       	ror	r26
     2fa:	97 95       	ror	r25
     2fc:	87 95       	ror	r24
     2fe:	16 94       	lsr	r1
     300:	d1 f7       	brne	.-12     	; 0x2f6 <usart_set_baudrate+0x60>
		min_rate /= 2;
     302:	b9 01       	movw	r22, r18
     304:	a8 01       	movw	r20, r16
     306:	03 2e       	mov	r0, r19
     308:	37 e1       	ldi	r19, 0x17	; 23
     30a:	76 95       	lsr	r23
     30c:	67 95       	ror	r22
     30e:	57 95       	ror	r21
     310:	47 95       	ror	r20
     312:	3a 95       	dec	r19
     314:	d1 f7       	brne	.-12     	; 0x30a <usart_set_baudrate+0x74>
     316:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     318:	88 15       	cp	r24, r8
     31a:	99 05       	cpc	r25, r9
     31c:	aa 05       	cpc	r26, r10
     31e:	bb 05       	cpc	r27, r11
     320:	08 f4       	brcc	.+2      	; 0x324 <usart_set_baudrate+0x8e>
     322:	a2 c0       	rjmp	.+324    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     324:	84 16       	cp	r8, r20
     326:	95 06       	cpc	r9, r21
     328:	a6 06       	cpc	r10, r22
     32a:	b7 06       	cpc	r11, r23
     32c:	08 f4       	brcc	.+2      	; 0x330 <usart_set_baudrate+0x9a>
     32e:	9e c0       	rjmp	.+316    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     330:	f7 01       	movw	r30, r14
     332:	84 81       	ldd	r24, Z+4	; 0x04
     334:	82 fd       	sbrc	r24, 2
     336:	04 c0       	rjmp	.+8      	; 0x340 <usart_set_baudrate+0xaa>
		baud *= 2;
     338:	88 0c       	add	r8, r8
     33a:	99 1c       	adc	r9, r9
     33c:	aa 1c       	adc	r10, r10
     33e:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     340:	c3 01       	movw	r24, r6
     342:	b2 01       	movw	r22, r4
     344:	a5 01       	movw	r20, r10
     346:	94 01       	movw	r18, r8
     348:	07 d5       	rcall	.+2574   	; 0xd58 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     34a:	2f 3f       	cpi	r18, 0xFF	; 255
     34c:	31 05       	cpc	r19, r1
     34e:	41 05       	cpc	r20, r1
     350:	51 05       	cpc	r21, r1
     352:	08 f4       	brcc	.+2      	; 0x356 <usart_set_baudrate+0xc0>
     354:	8d c0       	rjmp	.+282    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     356:	8f ef       	ldi	r24, 0xFF	; 255
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	a0 e0       	ldi	r26, 0x00	; 0
     35c:	b0 e0       	ldi	r27, 0x00	; 0
     35e:	c9 ef       	ldi	r28, 0xF9	; 249
     360:	05 c0       	rjmp	.+10     	; 0x36c <usart_set_baudrate+0xd6>
     362:	28 17       	cp	r18, r24
     364:	39 07       	cpc	r19, r25
     366:	4a 07       	cpc	r20, r26
     368:	5b 07       	cpc	r21, r27
     36a:	58 f0       	brcs	.+22     	; 0x382 <usart_set_baudrate+0xec>
			break;
		}

		limit <<= 1;
     36c:	88 0f       	add	r24, r24
     36e:	99 1f       	adc	r25, r25
     370:	aa 1f       	adc	r26, r26
     372:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     374:	cd 3f       	cpi	r28, 0xFD	; 253
     376:	0c f4       	brge	.+2      	; 0x37a <usart_set_baudrate+0xe4>
			limit |= 1;
     378:	81 60       	ori	r24, 0x01	; 1
     37a:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     37c:	c7 30       	cpi	r28, 0x07	; 7
     37e:	89 f7       	brne	.-30     	; 0x362 <usart_set_baudrate+0xcc>
     380:	4d c0       	rjmp	.+154    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     382:	cc 23       	and	r28, r28
     384:	0c f0       	brlt	.+2      	; 0x388 <usart_set_baudrate+0xf2>
     386:	4a c0       	rjmp	.+148    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     388:	d5 01       	movw	r26, r10
     38a:	c4 01       	movw	r24, r8
     38c:	88 0f       	add	r24, r24
     38e:	99 1f       	adc	r25, r25
     390:	aa 1f       	adc	r26, r26
     392:	bb 1f       	adc	r27, r27
     394:	88 0f       	add	r24, r24
     396:	99 1f       	adc	r25, r25
     398:	aa 1f       	adc	r26, r26
     39a:	bb 1f       	adc	r27, r27
     39c:	88 0f       	add	r24, r24
     39e:	99 1f       	adc	r25, r25
     3a0:	aa 1f       	adc	r26, r26
     3a2:	bb 1f       	adc	r27, r27
     3a4:	48 1a       	sub	r4, r24
     3a6:	59 0a       	sbc	r5, r25
     3a8:	6a 0a       	sbc	r6, r26
     3aa:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     3ac:	ce 3f       	cpi	r28, 0xFE	; 254
     3ae:	ec f4       	brge	.+58     	; 0x3ea <usart_set_baudrate+0x154>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     3b0:	8d ef       	ldi	r24, 0xFD	; 253
     3b2:	9f ef       	ldi	r25, 0xFF	; 255
     3b4:	8c 1b       	sub	r24, r28
     3b6:	91 09       	sbc	r25, r1
     3b8:	c7 fd       	sbrc	r28, 7
     3ba:	93 95       	inc	r25
     3bc:	04 c0       	rjmp	.+8      	; 0x3c6 <usart_set_baudrate+0x130>
     3be:	44 0c       	add	r4, r4
     3c0:	55 1c       	adc	r5, r5
     3c2:	66 1c       	adc	r6, r6
     3c4:	77 1c       	adc	r7, r7
     3c6:	8a 95       	dec	r24
     3c8:	d2 f7       	brpl	.-12     	; 0x3be <usart_set_baudrate+0x128>
     3ca:	d5 01       	movw	r26, r10
     3cc:	c4 01       	movw	r24, r8
     3ce:	b6 95       	lsr	r27
     3d0:	a7 95       	ror	r26
     3d2:	97 95       	ror	r25
     3d4:	87 95       	ror	r24
     3d6:	bc 01       	movw	r22, r24
     3d8:	cd 01       	movw	r24, r26
     3da:	64 0d       	add	r22, r4
     3dc:	75 1d       	adc	r23, r5
     3de:	86 1d       	adc	r24, r6
     3e0:	97 1d       	adc	r25, r7
     3e2:	a5 01       	movw	r20, r10
     3e4:	94 01       	movw	r18, r8
     3e6:	b8 d4       	rcall	.+2416   	; 0xd58 <__udivmodsi4>
     3e8:	35 c0       	rjmp	.+106    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		} else {
			baud <<= exp + 3;
     3ea:	83 e0       	ldi	r24, 0x03	; 3
     3ec:	8c 0f       	add	r24, r28
     3ee:	a5 01       	movw	r20, r10
     3f0:	94 01       	movw	r18, r8
     3f2:	04 c0       	rjmp	.+8      	; 0x3fc <usart_set_baudrate+0x166>
     3f4:	22 0f       	add	r18, r18
     3f6:	33 1f       	adc	r19, r19
     3f8:	44 1f       	adc	r20, r20
     3fa:	55 1f       	adc	r21, r21
     3fc:	8a 95       	dec	r24
     3fe:	d2 f7       	brpl	.-12     	; 0x3f4 <usart_set_baudrate+0x15e>
			div = (cpu_hz + baud / 2) / baud;
     400:	da 01       	movw	r26, r20
     402:	c9 01       	movw	r24, r18
     404:	b6 95       	lsr	r27
     406:	a7 95       	ror	r26
     408:	97 95       	ror	r25
     40a:	87 95       	ror	r24
     40c:	bc 01       	movw	r22, r24
     40e:	cd 01       	movw	r24, r26
     410:	64 0d       	add	r22, r4
     412:	75 1d       	adc	r23, r5
     414:	86 1d       	adc	r24, r6
     416:	97 1d       	adc	r25, r7
     418:	9f d4       	rcall	.+2366   	; 0xd58 <__udivmodsi4>
     41a:	1c c0       	rjmp	.+56     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     41c:	83 e0       	ldi	r24, 0x03	; 3
     41e:	8c 0f       	add	r24, r28
     420:	a5 01       	movw	r20, r10
     422:	94 01       	movw	r18, r8
     424:	04 c0       	rjmp	.+8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     426:	22 0f       	add	r18, r18
     428:	33 1f       	adc	r19, r19
     42a:	44 1f       	adc	r20, r20
     42c:	55 1f       	adc	r21, r21
     42e:	8a 95       	dec	r24
     430:	d2 f7       	brpl	.-12     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		div = (cpu_hz + baud / 2) / baud - 1;
     432:	da 01       	movw	r26, r20
     434:	c9 01       	movw	r24, r18
     436:	b6 95       	lsr	r27
     438:	a7 95       	ror	r26
     43a:	97 95       	ror	r25
     43c:	87 95       	ror	r24
     43e:	bc 01       	movw	r22, r24
     440:	cd 01       	movw	r24, r26
     442:	64 0d       	add	r22, r4
     444:	75 1d       	adc	r23, r5
     446:	86 1d       	adc	r24, r6
     448:	97 1d       	adc	r25, r7
     44a:	86 d4       	rcall	.+2316   	; 0xd58 <__udivmodsi4>
     44c:	21 50       	subi	r18, 0x01	; 1
     44e:	31 09       	sbc	r19, r1
     450:	41 09       	sbc	r20, r1
     452:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     454:	83 2f       	mov	r24, r19
     456:	8f 70       	andi	r24, 0x0F	; 15
     458:	c2 95       	swap	r28
     45a:	c0 7f       	andi	r28, 0xF0	; 240
     45c:	c8 2b       	or	r28, r24
     45e:	f7 01       	movw	r30, r14
     460:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     462:	26 83       	std	Z+6, r18	; 0x06

	return true;
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	18 c0       	rjmp	.+48     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	16 c0       	rjmp	.+44     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	14 c0       	rjmp	.+40     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     470:	d5 01       	movw	r26, r10
     472:	c4 01       	movw	r24, r8
     474:	88 0f       	add	r24, r24
     476:	99 1f       	adc	r25, r25
     478:	aa 1f       	adc	r26, r26
     47a:	bb 1f       	adc	r27, r27
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	aa 1f       	adc	r26, r26
     482:	bb 1f       	adc	r27, r27
     484:	88 0f       	add	r24, r24
     486:	99 1f       	adc	r25, r25
     488:	aa 1f       	adc	r26, r26
     48a:	bb 1f       	adc	r27, r27
     48c:	48 1a       	sub	r4, r24
     48e:	59 0a       	sbc	r5, r25
     490:	6a 0a       	sbc	r6, r26
     492:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     494:	c9 ef       	ldi	r28, 0xF9	; 249
     496:	8c cf       	rjmp	.-232    	; 0x3b0 <usart_set_baudrate+0x11a>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     498:	cf 91       	pop	r28
     49a:	1f 91       	pop	r17
     49c:	0f 91       	pop	r16
     49e:	ff 90       	pop	r15
     4a0:	ef 90       	pop	r14
     4a2:	bf 90       	pop	r11
     4a4:	af 90       	pop	r10
     4a6:	9f 90       	pop	r9
     4a8:	8f 90       	pop	r8
     4aa:	7f 90       	pop	r7
     4ac:	6f 90       	pop	r6
     4ae:	5f 90       	pop	r5
     4b0:	4f 90       	pop	r4
     4b2:	08 95       	ret

000004b4 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     4b4:	0f 93       	push	r16
     4b6:	1f 93       	push	r17
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	ec 01       	movw	r28, r24
     4be:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     4c0:	00 97       	sbiw	r24, 0x00	; 0
     4c2:	09 f4       	brne	.+2      	; 0x4c6 <usart_init_rs232+0x12>
     4c4:	36 c1       	rjmp	.+620    	; 0x732 <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     4c6:	80 3c       	cpi	r24, 0xC0	; 192
     4c8:	91 05       	cpc	r25, r1
     4ca:	21 f4       	brne	.+8      	; 0x4d4 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     4cc:	60 e1       	ldi	r22, 0x10	; 16
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	5c d3       	rcall	.+1720   	; 0xb8a <sysclk_enable_module>
     4d2:	2f c1       	rjmp	.+606    	; 0x732 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
     4d4:	c0 34       	cpi	r28, 0x40	; 64
     4d6:	84 e0       	ldi	r24, 0x04	; 4
     4d8:	d8 07       	cpc	r29, r24
     4da:	21 f4       	brne	.+8      	; 0x4e4 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
     4dc:	68 e0       	ldi	r22, 0x08	; 8
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	54 d3       	rcall	.+1704   	; 0xb8a <sysclk_enable_module>
     4e2:	27 c1       	rjmp	.+590    	; 0x732 <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     4e4:	c1 15       	cp	r28, r1
     4e6:	e4 e0       	ldi	r30, 0x04	; 4
     4e8:	de 07       	cpc	r29, r30
     4ea:	21 f4       	brne	.+8      	; 0x4f4 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     4ec:	64 e0       	ldi	r22, 0x04	; 4
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	4c d3       	rcall	.+1688   	; 0xb8a <sysclk_enable_module>
     4f2:	1f c1       	rjmp	.+574    	; 0x732 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     4f4:	c0 38       	cpi	r28, 0x80	; 128
     4f6:	f1 e0       	ldi	r31, 0x01	; 1
     4f8:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     4fa:	21 f4       	brne	.+8      	; 0x504 <usart_init_rs232+0x50>
     4fc:	62 e0       	ldi	r22, 0x02	; 2
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	44 d3       	rcall	.+1672   	; 0xb8a <sysclk_enable_module>
     502:	17 c1       	rjmp	.+558    	; 0x732 <usart_init_rs232+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     504:	c1 15       	cp	r28, r1
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     50a:	21 f4       	brne	.+8      	; 0x514 <usart_init_rs232+0x60>
     50c:	61 e0       	ldi	r22, 0x01	; 1
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	3c d3       	rcall	.+1656   	; 0xb8a <sysclk_enable_module>
     512:	0f c1       	rjmp	.+542    	; 0x732 <usart_init_rs232+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     514:	c0 38       	cpi	r28, 0x80	; 128
     516:	e3 e0       	ldi	r30, 0x03	; 3
     518:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     51a:	21 f4       	brne	.+8      	; 0x524 <usart_init_rs232+0x70>
     51c:	61 e0       	ldi	r22, 0x01	; 1
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	34 d3       	rcall	.+1640   	; 0xb8a <sysclk_enable_module>
     522:	07 c1       	rjmp	.+526    	; 0x732 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     524:	c0 39       	cpi	r28, 0x90	; 144
     526:	f3 e0       	ldi	r31, 0x03	; 3
     528:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     52a:	21 f4       	brne	.+8      	; 0x534 <usart_init_rs232+0x80>
     52c:	61 e0       	ldi	r22, 0x01	; 1
     52e:	82 e0       	ldi	r24, 0x02	; 2
     530:	2c d3       	rcall	.+1624   	; 0xb8a <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     532:	ff c0       	rjmp	.+510    	; 0x732 <usart_init_rs232+0x27e>
     534:	c1 15       	cp	r28, r1
     536:	82 e0       	ldi	r24, 0x02	; 2
     538:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     53a:	21 f4       	brne	.+8      	; 0x544 <usart_init_rs232+0x90>
     53c:	62 e0       	ldi	r22, 0x02	; 2
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	24 d3       	rcall	.+1608   	; 0xb8a <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     542:	f7 c0       	rjmp	.+494    	; 0x732 <usart_init_rs232+0x27e>
     544:	c0 34       	cpi	r28, 0x40	; 64
     546:	e2 e0       	ldi	r30, 0x02	; 2
     548:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     54a:	21 f4       	brne	.+8      	; 0x554 <usart_init_rs232+0xa0>
     54c:	62 e0       	ldi	r22, 0x02	; 2
     54e:	82 e0       	ldi	r24, 0x02	; 2
     550:	1c d3       	rcall	.+1592   	; 0xb8a <sysclk_enable_module>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     552:	ef c0       	rjmp	.+478    	; 0x732 <usart_init_rs232+0x27e>
     554:	c1 15       	cp	r28, r1
     556:	f3 e0       	ldi	r31, 0x03	; 3
     558:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     55a:	21 f4       	brne	.+8      	; 0x564 <usart_init_rs232+0xb0>
     55c:	64 e0       	ldi	r22, 0x04	; 4
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	14 d3       	rcall	.+1576   	; 0xb8a <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     562:	e7 c0       	rjmp	.+462    	; 0x732 <usart_init_rs232+0x27e>
     564:	c0 32       	cpi	r28, 0x20	; 32
     566:	83 e0       	ldi	r24, 0x03	; 3
     568:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     56a:	21 f4       	brne	.+8      	; 0x574 <usart_init_rs232+0xc0>
     56c:	64 e0       	ldi	r22, 0x04	; 4
     56e:	82 e0       	ldi	r24, 0x02	; 2
     570:	0c d3       	rcall	.+1560   	; 0xb8a <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     572:	df c0       	rjmp	.+446    	; 0x732 <usart_init_rs232+0x27e>
     574:	c1 15       	cp	r28, r1
     576:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     578:	de 07       	cpc	r29, r30
     57a:	21 f4       	brne	.+8      	; 0x584 <usart_init_rs232+0xd0>
     57c:	61 e0       	ldi	r22, 0x01	; 1
     57e:	83 e0       	ldi	r24, 0x03	; 3
     580:	04 d3       	rcall	.+1544   	; 0xb8a <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     582:	d7 c0       	rjmp	.+430    	; 0x732 <usart_init_rs232+0x27e>
     584:	c1 15       	cp	r28, r1
     586:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     588:	df 07       	cpc	r29, r31
     58a:	21 f4       	brne	.+8      	; 0x594 <usart_init_rs232+0xe0>
     58c:	61 e0       	ldi	r22, 0x01	; 1
     58e:	84 e0       	ldi	r24, 0x04	; 4
     590:	fc d2       	rcall	.+1528   	; 0xb8a <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     592:	cf c0       	rjmp	.+414    	; 0x732 <usart_init_rs232+0x27e>
     594:	c1 15       	cp	r28, r1
     596:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     598:	d8 07       	cpc	r29, r24
     59a:	21 f4       	brne	.+8      	; 0x5a4 <usart_init_rs232+0xf0>
     59c:	61 e0       	ldi	r22, 0x01	; 1
     59e:	85 e0       	ldi	r24, 0x05	; 5
     5a0:	f4 d2       	rcall	.+1512   	; 0xb8a <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     5a2:	c7 c0       	rjmp	.+398    	; 0x732 <usart_init_rs232+0x27e>
     5a4:	c1 15       	cp	r28, r1
     5a6:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     5a8:	de 07       	cpc	r29, r30
     5aa:	21 f4       	brne	.+8      	; 0x5b4 <usart_init_rs232+0x100>
     5ac:	61 e0       	ldi	r22, 0x01	; 1
     5ae:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     5b0:	ec d2       	rcall	.+1496   	; 0xb8a <sysclk_enable_module>
     5b2:	bf c0       	rjmp	.+382    	; 0x732 <usart_init_rs232+0x27e>
     5b4:	c0 34       	cpi	r28, 0x40	; 64
     5b6:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     5b8:	df 07       	cpc	r29, r31
     5ba:	21 f4       	brne	.+8      	; 0x5c4 <usart_init_rs232+0x110>
     5bc:	62 e0       	ldi	r22, 0x02	; 2
     5be:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     5c0:	e4 d2       	rcall	.+1480   	; 0xb8a <sysclk_enable_module>
     5c2:	b7 c0       	rjmp	.+366    	; 0x732 <usart_init_rs232+0x27e>
     5c4:	c0 34       	cpi	r28, 0x40	; 64
     5c6:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     5c8:	d8 07       	cpc	r29, r24
     5ca:	21 f4       	brne	.+8      	; 0x5d4 <usart_init_rs232+0x120>
     5cc:	62 e0       	ldi	r22, 0x02	; 2
     5ce:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     5d0:	dc d2       	rcall	.+1464   	; 0xb8a <sysclk_enable_module>
     5d2:	af c0       	rjmp	.+350    	; 0x732 <usart_init_rs232+0x27e>
     5d4:	c0 34       	cpi	r28, 0x40	; 64
     5d6:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     5d8:	de 07       	cpc	r29, r30
     5da:	21 f4       	brne	.+8      	; 0x5e4 <usart_init_rs232+0x130>
     5dc:	62 e0       	ldi	r22, 0x02	; 2
     5de:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
     5e0:	d4 d2       	rcall	.+1448   	; 0xb8a <sysclk_enable_module>
     5e2:	a7 c0       	rjmp	.+334    	; 0x732 <usart_init_rs232+0x27e>
     5e4:	c0 34       	cpi	r28, 0x40	; 64
     5e6:	fb e0       	ldi	r31, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
     5e8:	df 07       	cpc	r29, r31
     5ea:	21 f4       	brne	.+8      	; 0x5f4 <usart_init_rs232+0x140>
     5ec:	62 e0       	ldi	r22, 0x02	; 2
     5ee:	86 e0       	ldi	r24, 0x06	; 6
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     5f0:	cc d2       	rcall	.+1432   	; 0xb8a <sysclk_enable_module>
     5f2:	9f c0       	rjmp	.+318    	; 0x732 <usart_init_rs232+0x27e>
     5f4:	c0 39       	cpi	r28, 0x90	; 144
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     5f6:	88 e0       	ldi	r24, 0x08	; 8
     5f8:	d8 07       	cpc	r29, r24
     5fa:	21 f4       	brne	.+8      	; 0x604 <usart_init_rs232+0x150>
     5fc:	64 e0       	ldi	r22, 0x04	; 4
     5fe:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     600:	c4 d2       	rcall	.+1416   	; 0xb8a <sysclk_enable_module>
     602:	97 c0       	rjmp	.+302    	; 0x732 <usart_init_rs232+0x27e>
     604:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     606:	e9 e0       	ldi	r30, 0x09	; 9
     608:	de 07       	cpc	r29, r30
     60a:	21 f4       	brne	.+8      	; 0x614 <usart_init_rs232+0x160>
     60c:	64 e0       	ldi	r22, 0x04	; 4
     60e:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     610:	bc d2       	rcall	.+1400   	; 0xb8a <sysclk_enable_module>
     612:	8f c0       	rjmp	.+286    	; 0x732 <usart_init_rs232+0x27e>
     614:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     616:	fa e0       	ldi	r31, 0x0A	; 10
     618:	df 07       	cpc	r29, r31
     61a:	21 f4       	brne	.+8      	; 0x624 <usart_init_rs232+0x170>
     61c:	64 e0       	ldi	r22, 0x04	; 4
     61e:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     620:	b4 d2       	rcall	.+1384   	; 0xb8a <sysclk_enable_module>
     622:	87 c0       	rjmp	.+270    	; 0x732 <usart_init_rs232+0x27e>
     624:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     626:	8b e0       	ldi	r24, 0x0B	; 11
     628:	d8 07       	cpc	r29, r24
     62a:	21 f4       	brne	.+8      	; 0x634 <usart_init_rs232+0x180>
     62c:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     62e:	86 e0       	ldi	r24, 0x06	; 6
     630:	ac d2       	rcall	.+1368   	; 0xb8a <sysclk_enable_module>
     632:	7f c0       	rjmp	.+254    	; 0x732 <usart_init_rs232+0x27e>
     634:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     636:	e8 e0       	ldi	r30, 0x08	; 8
     638:	de 07       	cpc	r29, r30
     63a:	21 f4       	brne	.+8      	; 0x644 <usart_init_rs232+0x190>
     63c:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     63e:	83 e0       	ldi	r24, 0x03	; 3
     640:	a4 d2       	rcall	.+1352   	; 0xb8a <sysclk_enable_module>
     642:	77 c0       	rjmp	.+238    	; 0x732 <usart_init_rs232+0x27e>
     644:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     646:	f9 e0       	ldi	r31, 0x09	; 9
     648:	df 07       	cpc	r29, r31
     64a:	21 f4       	brne	.+8      	; 0x654 <usart_init_rs232+0x1a0>
     64c:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
     64e:	84 e0       	ldi	r24, 0x04	; 4
     650:	9c d2       	rcall	.+1336   	; 0xb8a <sysclk_enable_module>
     652:	6f c0       	rjmp	.+222    	; 0x732 <usart_init_rs232+0x27e>
     654:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
     656:	8a e0       	ldi	r24, 0x0A	; 10
     658:	d8 07       	cpc	r29, r24
     65a:	21 f4       	brne	.+8      	; 0x664 <usart_init_rs232+0x1b0>
     65c:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
     65e:	85 e0       	ldi	r24, 0x05	; 5
     660:	94 d2       	rcall	.+1320   	; 0xb8a <sysclk_enable_module>
     662:	67 c0       	rjmp	.+206    	; 0x732 <usart_init_rs232+0x27e>
     664:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
     666:	eb e0       	ldi	r30, 0x0B	; 11
     668:	de 07       	cpc	r29, r30
     66a:	21 f4       	brne	.+8      	; 0x674 <usart_init_rs232+0x1c0>
     66c:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     66e:	86 e0       	ldi	r24, 0x06	; 6
     670:	8c d2       	rcall	.+1304   	; 0xb8a <sysclk_enable_module>
     672:	5f c0       	rjmp	.+190    	; 0x732 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     674:	c0 3a       	cpi	r28, 0xA0	; 160
     676:	f8 e0       	ldi	r31, 0x08	; 8
     678:	df 07       	cpc	r29, r31
     67a:	21 f4       	brne	.+8      	; 0x684 <usart_init_rs232+0x1d0>
     67c:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     67e:	83 e0       	ldi	r24, 0x03	; 3
     680:	84 d2       	rcall	.+1288   	; 0xb8a <sysclk_enable_module>
     682:	57 c0       	rjmp	.+174    	; 0x732 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     684:	c0 3a       	cpi	r28, 0xA0	; 160
     686:	89 e0       	ldi	r24, 0x09	; 9
     688:	d8 07       	cpc	r29, r24
     68a:	21 f4       	brne	.+8      	; 0x694 <usart_init_rs232+0x1e0>
     68c:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     68e:	84 e0       	ldi	r24, 0x04	; 4
     690:	7c d2       	rcall	.+1272   	; 0xb8a <sysclk_enable_module>
     692:	4f c0       	rjmp	.+158    	; 0x732 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     694:	c0 3a       	cpi	r28, 0xA0	; 160
     696:	ea e0       	ldi	r30, 0x0A	; 10
     698:	de 07       	cpc	r29, r30
     69a:	21 f4       	brne	.+8      	; 0x6a4 <usart_init_rs232+0x1f0>
     69c:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     69e:	85 e0       	ldi	r24, 0x05	; 5
     6a0:	74 d2       	rcall	.+1256   	; 0xb8a <sysclk_enable_module>
     6a2:	47 c0       	rjmp	.+142    	; 0x732 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     6a4:	c0 3a       	cpi	r28, 0xA0	; 160
     6a6:	fb e0       	ldi	r31, 0x0B	; 11
     6a8:	df 07       	cpc	r29, r31
     6aa:	21 f4       	brne	.+8      	; 0x6b4 <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     6ac:	60 e1       	ldi	r22, 0x10	; 16
     6ae:	86 e0       	ldi	r24, 0x06	; 6
     6b0:	6c d2       	rcall	.+1240   	; 0xb8a <sysclk_enable_module>
     6b2:	3f c0       	rjmp	.+126    	; 0x732 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     6b4:	c0 3b       	cpi	r28, 0xB0	; 176
     6b6:	88 e0       	ldi	r24, 0x08	; 8
     6b8:	d8 07       	cpc	r29, r24
     6ba:	21 f4       	brne	.+8      	; 0x6c4 <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     6bc:	60 e2       	ldi	r22, 0x20	; 32
     6be:	83 e0       	ldi	r24, 0x03	; 3
     6c0:	64 d2       	rcall	.+1224   	; 0xb8a <sysclk_enable_module>
     6c2:	37 c0       	rjmp	.+110    	; 0x732 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     6c4:	c0 3b       	cpi	r28, 0xB0	; 176
     6c6:	e9 e0       	ldi	r30, 0x09	; 9
     6c8:	de 07       	cpc	r29, r30
     6ca:	21 f4       	brne	.+8      	; 0x6d4 <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
     6cc:	60 e2       	ldi	r22, 0x20	; 32
     6ce:	84 e0       	ldi	r24, 0x04	; 4
     6d0:	5c d2       	rcall	.+1208   	; 0xb8a <sysclk_enable_module>
     6d2:	2f c0       	rjmp	.+94     	; 0x732 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     6d4:	c0 3b       	cpi	r28, 0xB0	; 176
     6d6:	fa e0       	ldi	r31, 0x0A	; 10
     6d8:	df 07       	cpc	r29, r31
     6da:	21 f4       	brne	.+8      	; 0x6e4 <usart_init_rs232+0x230>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
     6dc:	60 e2       	ldi	r22, 0x20	; 32
     6de:	85 e0       	ldi	r24, 0x05	; 5
     6e0:	54 d2       	rcall	.+1192   	; 0xb8a <sysclk_enable_module>
     6e2:	27 c0       	rjmp	.+78     	; 0x732 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
     6e4:	c0 3b       	cpi	r28, 0xB0	; 176
     6e6:	8b e0       	ldi	r24, 0x0B	; 11
     6e8:	d8 07       	cpc	r29, r24
     6ea:	21 f4       	brne	.+8      	; 0x6f4 <usart_init_rs232+0x240>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     6ec:	60 e2       	ldi	r22, 0x20	; 32
     6ee:	86 e0       	ldi	r24, 0x06	; 6
     6f0:	4c d2       	rcall	.+1176   	; 0xb8a <sysclk_enable_module>
     6f2:	1f c0       	rjmp	.+62     	; 0x732 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     6f4:	c0 38       	cpi	r28, 0x80	; 128
     6f6:	e4 e0       	ldi	r30, 0x04	; 4
     6f8:	de 07       	cpc	r29, r30
     6fa:	21 f4       	brne	.+8      	; 0x704 <usart_init_rs232+0x250>
     6fc:	60 e4       	ldi	r22, 0x40	; 64
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
     6fe:	83 e0       	ldi	r24, 0x03	; 3
     700:	44 d2       	rcall	.+1160   	; 0xb8a <sysclk_enable_module>
     702:	17 c0       	rjmp	.+46     	; 0x732 <usart_init_rs232+0x27e>
     704:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
     706:	f4 e0       	ldi	r31, 0x04	; 4
     708:	df 07       	cpc	r29, r31
     70a:	21 f4       	brne	.+8      	; 0x714 <usart_init_rs232+0x260>
     70c:	60 e4       	ldi	r22, 0x40	; 64
     70e:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     710:	3c d2       	rcall	.+1144   	; 0xb8a <sysclk_enable_module>
     712:	0f c0       	rjmp	.+30     	; 0x732 <usart_init_rs232+0x27e>
     714:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     716:	84 e0       	ldi	r24, 0x04	; 4
     718:	d8 07       	cpc	r29, r24
     71a:	21 f4       	brne	.+8      	; 0x724 <usart_init_rs232+0x270>
     71c:	60 e4       	ldi	r22, 0x40	; 64
     71e:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
     720:	34 d2       	rcall	.+1128   	; 0xb8a <sysclk_enable_module>
     722:	07 c0       	rjmp	.+14     	; 0x732 <usart_init_rs232+0x27e>
     724:	c0 3b       	cpi	r28, 0xB0	; 176
     726:	e4 e0       	ldi	r30, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
     728:	de 07       	cpc	r29, r30
     72a:	19 f4       	brne	.+6      	; 0x732 <usart_init_rs232+0x27e>
     72c:	60 e4       	ldi	r22, 0x40	; 64
     72e:	86 e0       	ldi	r24, 0x06	; 6
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     730:	2c d2       	rcall	.+1112   	; 0xb8a <sysclk_enable_module>
     732:	8d 81       	ldd	r24, Y+5	; 0x05
     734:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     736:	8d 83       	std	Y+5, r24	; 0x05
     738:	f8 01       	movw	r30, r16
     73a:	95 81       	ldd	r25, Z+5	; 0x05
     73c:	84 81       	ldd	r24, Z+4	; 0x04
     73e:	89 2b       	or	r24, r25
     740:	96 81       	ldd	r25, Z+6	; 0x06
     742:	91 11       	cpse	r25, r1
     744:	98 e0       	ldi	r25, 0x08	; 8
     746:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     748:	8d 83       	std	Y+5, r24	; 0x05
     74a:	f8 01       	movw	r30, r16
     74c:	40 81       	ld	r20, Z
     74e:	51 81       	ldd	r21, Z+1	; 0x01
     750:	62 81       	ldd	r22, Z+2	; 0x02
     752:	73 81       	ldd	r23, Z+3	; 0x03
     754:	00 e8       	ldi	r16, 0x80	; 128
     756:	14 e8       	ldi	r17, 0x84	; 132
     758:	2e e1       	ldi	r18, 0x1E	; 30
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	ce 01       	movw	r24, r28
     75e:	9b dd       	rcall	.-1226   	; 0x296 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     760:	9c 81       	ldd	r25, Y+4	; 0x04
     762:	98 60       	ori	r25, 0x08	; 8
     764:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     766:	9c 81       	ldd	r25, Y+4	; 0x04
     768:	90 61       	ori	r25, 0x10	; 16
     76a:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	08 95       	ret

00000776 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     776:	1f 92       	push	r1
     778:	0f 92       	push	r0
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	0f 92       	push	r0
     77e:	11 24       	eor	r1, r1
     780:	08 b6       	in	r0, 0x38	; 56
     782:	0f 92       	push	r0
     784:	18 be       	out	0x38, r1	; 56
     786:	09 b6       	in	r0, 0x39	; 57
     788:	0f 92       	push	r0
     78a:	19 be       	out	0x39, r1	; 57
     78c:	0b b6       	in	r0, 0x3b	; 59
     78e:	0f 92       	push	r0
     790:	1b be       	out	0x3b, r1	; 59
     792:	2f 93       	push	r18
     794:	3f 93       	push	r19
     796:	4f 93       	push	r20
     798:	5f 93       	push	r21
     79a:	6f 93       	push	r22
     79c:	7f 93       	push	r23
     79e:	8f 93       	push	r24
     7a0:	9f 93       	push	r25
     7a2:	af 93       	push	r26
     7a4:	bf 93       	push	r27
     7a6:	ef 93       	push	r30
     7a8:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     7aa:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     7ae:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     7b2:	e0 91 22 20 	lds	r30, 0x2022	; 0x802022 <adca_callback>
     7b6:	f0 91 23 20 	lds	r31, 0x2023	; 0x802023 <adca_callback+0x1>
     7ba:	61 e0       	ldi	r22, 0x01	; 1
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	92 e0       	ldi	r25, 0x02	; 2
     7c0:	19 95       	eicall
}
     7c2:	ff 91       	pop	r31
     7c4:	ef 91       	pop	r30
     7c6:	bf 91       	pop	r27
     7c8:	af 91       	pop	r26
     7ca:	9f 91       	pop	r25
     7cc:	8f 91       	pop	r24
     7ce:	7f 91       	pop	r23
     7d0:	6f 91       	pop	r22
     7d2:	5f 91       	pop	r21
     7d4:	4f 91       	pop	r20
     7d6:	3f 91       	pop	r19
     7d8:	2f 91       	pop	r18
     7da:	0f 90       	pop	r0
     7dc:	0b be       	out	0x3b, r0	; 59
     7de:	0f 90       	pop	r0
     7e0:	09 be       	out	0x39, r0	; 57
     7e2:	0f 90       	pop	r0
     7e4:	08 be       	out	0x38, r0	; 56
     7e6:	0f 90       	pop	r0
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	0f 90       	pop	r0
     7ec:	1f 90       	pop	r1
     7ee:	18 95       	reti

000007f0 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     7f0:	1f 92       	push	r1
     7f2:	0f 92       	push	r0
     7f4:	0f b6       	in	r0, 0x3f	; 63
     7f6:	0f 92       	push	r0
     7f8:	11 24       	eor	r1, r1
     7fa:	08 b6       	in	r0, 0x38	; 56
     7fc:	0f 92       	push	r0
     7fe:	18 be       	out	0x38, r1	; 56
     800:	09 b6       	in	r0, 0x39	; 57
     802:	0f 92       	push	r0
     804:	19 be       	out	0x39, r1	; 57
     806:	0b b6       	in	r0, 0x3b	; 59
     808:	0f 92       	push	r0
     80a:	1b be       	out	0x3b, r1	; 59
     80c:	2f 93       	push	r18
     80e:	3f 93       	push	r19
     810:	4f 93       	push	r20
     812:	5f 93       	push	r21
     814:	6f 93       	push	r22
     816:	7f 93       	push	r23
     818:	8f 93       	push	r24
     81a:	9f 93       	push	r25
     81c:	af 93       	push	r26
     81e:	bf 93       	push	r27
     820:	ef 93       	push	r30
     822:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     824:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     828:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     82c:	e0 91 22 20 	lds	r30, 0x2022	; 0x802022 <adca_callback>
     830:	f0 91 23 20 	lds	r31, 0x2023	; 0x802023 <adca_callback+0x1>
     834:	62 e0       	ldi	r22, 0x02	; 2
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	92 e0       	ldi	r25, 0x02	; 2
     83a:	19 95       	eicall
}
     83c:	ff 91       	pop	r31
     83e:	ef 91       	pop	r30
     840:	bf 91       	pop	r27
     842:	af 91       	pop	r26
     844:	9f 91       	pop	r25
     846:	8f 91       	pop	r24
     848:	7f 91       	pop	r23
     84a:	6f 91       	pop	r22
     84c:	5f 91       	pop	r21
     84e:	4f 91       	pop	r20
     850:	3f 91       	pop	r19
     852:	2f 91       	pop	r18
     854:	0f 90       	pop	r0
     856:	0b be       	out	0x3b, r0	; 59
     858:	0f 90       	pop	r0
     85a:	09 be       	out	0x39, r0	; 57
     85c:	0f 90       	pop	r0
     85e:	08 be       	out	0x38, r0	; 56
     860:	0f 90       	pop	r0
     862:	0f be       	out	0x3f, r0	; 63
     864:	0f 90       	pop	r0
     866:	1f 90       	pop	r1
     868:	18 95       	reti

0000086a <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     86a:	1f 92       	push	r1
     86c:	0f 92       	push	r0
     86e:	0f b6       	in	r0, 0x3f	; 63
     870:	0f 92       	push	r0
     872:	11 24       	eor	r1, r1
     874:	08 b6       	in	r0, 0x38	; 56
     876:	0f 92       	push	r0
     878:	18 be       	out	0x38, r1	; 56
     87a:	09 b6       	in	r0, 0x39	; 57
     87c:	0f 92       	push	r0
     87e:	19 be       	out	0x39, r1	; 57
     880:	0b b6       	in	r0, 0x3b	; 59
     882:	0f 92       	push	r0
     884:	1b be       	out	0x3b, r1	; 59
     886:	2f 93       	push	r18
     888:	3f 93       	push	r19
     88a:	4f 93       	push	r20
     88c:	5f 93       	push	r21
     88e:	6f 93       	push	r22
     890:	7f 93       	push	r23
     892:	8f 93       	push	r24
     894:	9f 93       	push	r25
     896:	af 93       	push	r26
     898:	bf 93       	push	r27
     89a:	ef 93       	push	r30
     89c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     89e:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     8a2:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     8a6:	e0 91 22 20 	lds	r30, 0x2022	; 0x802022 <adca_callback>
     8aa:	f0 91 23 20 	lds	r31, 0x2023	; 0x802023 <adca_callback+0x1>
     8ae:	64 e0       	ldi	r22, 0x04	; 4
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	92 e0       	ldi	r25, 0x02	; 2
     8b4:	19 95       	eicall
}
     8b6:	ff 91       	pop	r31
     8b8:	ef 91       	pop	r30
     8ba:	bf 91       	pop	r27
     8bc:	af 91       	pop	r26
     8be:	9f 91       	pop	r25
     8c0:	8f 91       	pop	r24
     8c2:	7f 91       	pop	r23
     8c4:	6f 91       	pop	r22
     8c6:	5f 91       	pop	r21
     8c8:	4f 91       	pop	r20
     8ca:	3f 91       	pop	r19
     8cc:	2f 91       	pop	r18
     8ce:	0f 90       	pop	r0
     8d0:	0b be       	out	0x3b, r0	; 59
     8d2:	0f 90       	pop	r0
     8d4:	09 be       	out	0x39, r0	; 57
     8d6:	0f 90       	pop	r0
     8d8:	08 be       	out	0x38, r0	; 56
     8da:	0f 90       	pop	r0
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	0f 90       	pop	r0
     8e0:	1f 90       	pop	r1
     8e2:	18 95       	reti

000008e4 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     8e4:	1f 92       	push	r1
     8e6:	0f 92       	push	r0
     8e8:	0f b6       	in	r0, 0x3f	; 63
     8ea:	0f 92       	push	r0
     8ec:	11 24       	eor	r1, r1
     8ee:	08 b6       	in	r0, 0x38	; 56
     8f0:	0f 92       	push	r0
     8f2:	18 be       	out	0x38, r1	; 56
     8f4:	09 b6       	in	r0, 0x39	; 57
     8f6:	0f 92       	push	r0
     8f8:	19 be       	out	0x39, r1	; 57
     8fa:	0b b6       	in	r0, 0x3b	; 59
     8fc:	0f 92       	push	r0
     8fe:	1b be       	out	0x3b, r1	; 59
     900:	2f 93       	push	r18
     902:	3f 93       	push	r19
     904:	4f 93       	push	r20
     906:	5f 93       	push	r21
     908:	6f 93       	push	r22
     90a:	7f 93       	push	r23
     90c:	8f 93       	push	r24
     90e:	9f 93       	push	r25
     910:	af 93       	push	r26
     912:	bf 93       	push	r27
     914:	ef 93       	push	r30
     916:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     918:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     91c:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     920:	e0 91 22 20 	lds	r30, 0x2022	; 0x802022 <adca_callback>
     924:	f0 91 23 20 	lds	r31, 0x2023	; 0x802023 <adca_callback+0x1>
     928:	68 e0       	ldi	r22, 0x08	; 8
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	92 e0       	ldi	r25, 0x02	; 2
     92e:	19 95       	eicall
}
     930:	ff 91       	pop	r31
     932:	ef 91       	pop	r30
     934:	bf 91       	pop	r27
     936:	af 91       	pop	r26
     938:	9f 91       	pop	r25
     93a:	8f 91       	pop	r24
     93c:	7f 91       	pop	r23
     93e:	6f 91       	pop	r22
     940:	5f 91       	pop	r21
     942:	4f 91       	pop	r20
     944:	3f 91       	pop	r19
     946:	2f 91       	pop	r18
     948:	0f 90       	pop	r0
     94a:	0b be       	out	0x3b, r0	; 59
     94c:	0f 90       	pop	r0
     94e:	09 be       	out	0x39, r0	; 57
     950:	0f 90       	pop	r0
     952:	08 be       	out	0x38, r0	; 56
     954:	0f 90       	pop	r0
     956:	0f be       	out	0x3f, r0	; 63
     958:	0f 90       	pop	r0
     95a:	1f 90       	pop	r1
     95c:	18 95       	reti

0000095e <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     95e:	1f 92       	push	r1
     960:	0f 92       	push	r0
     962:	0f b6       	in	r0, 0x3f	; 63
     964:	0f 92       	push	r0
     966:	11 24       	eor	r1, r1
     968:	08 b6       	in	r0, 0x38	; 56
     96a:	0f 92       	push	r0
     96c:	18 be       	out	0x38, r1	; 56
     96e:	09 b6       	in	r0, 0x39	; 57
     970:	0f 92       	push	r0
     972:	19 be       	out	0x39, r1	; 57
     974:	0b b6       	in	r0, 0x3b	; 59
     976:	0f 92       	push	r0
     978:	1b be       	out	0x3b, r1	; 59
     97a:	2f 93       	push	r18
     97c:	3f 93       	push	r19
     97e:	4f 93       	push	r20
     980:	5f 93       	push	r21
     982:	6f 93       	push	r22
     984:	7f 93       	push	r23
     986:	8f 93       	push	r24
     988:	9f 93       	push	r25
     98a:	af 93       	push	r26
     98c:	bf 93       	push	r27
     98e:	ef 93       	push	r30
     990:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     992:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     996:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     99a:	e0 91 20 20 	lds	r30, 0x2020	; 0x802020 <adcb_callback>
     99e:	f0 91 21 20 	lds	r31, 0x2021	; 0x802021 <adcb_callback+0x1>
     9a2:	61 e0       	ldi	r22, 0x01	; 1
     9a4:	80 e4       	ldi	r24, 0x40	; 64
     9a6:	92 e0       	ldi	r25, 0x02	; 2
     9a8:	19 95       	eicall
}
     9aa:	ff 91       	pop	r31
     9ac:	ef 91       	pop	r30
     9ae:	bf 91       	pop	r27
     9b0:	af 91       	pop	r26
     9b2:	9f 91       	pop	r25
     9b4:	8f 91       	pop	r24
     9b6:	7f 91       	pop	r23
     9b8:	6f 91       	pop	r22
     9ba:	5f 91       	pop	r21
     9bc:	4f 91       	pop	r20
     9be:	3f 91       	pop	r19
     9c0:	2f 91       	pop	r18
     9c2:	0f 90       	pop	r0
     9c4:	0b be       	out	0x3b, r0	; 59
     9c6:	0f 90       	pop	r0
     9c8:	09 be       	out	0x39, r0	; 57
     9ca:	0f 90       	pop	r0
     9cc:	08 be       	out	0x38, r0	; 56
     9ce:	0f 90       	pop	r0
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	0f 90       	pop	r0
     9d4:	1f 90       	pop	r1
     9d6:	18 95       	reti

000009d8 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     9d8:	1f 92       	push	r1
     9da:	0f 92       	push	r0
     9dc:	0f b6       	in	r0, 0x3f	; 63
     9de:	0f 92       	push	r0
     9e0:	11 24       	eor	r1, r1
     9e2:	08 b6       	in	r0, 0x38	; 56
     9e4:	0f 92       	push	r0
     9e6:	18 be       	out	0x38, r1	; 56
     9e8:	09 b6       	in	r0, 0x39	; 57
     9ea:	0f 92       	push	r0
     9ec:	19 be       	out	0x39, r1	; 57
     9ee:	0b b6       	in	r0, 0x3b	; 59
     9f0:	0f 92       	push	r0
     9f2:	1b be       	out	0x3b, r1	; 59
     9f4:	2f 93       	push	r18
     9f6:	3f 93       	push	r19
     9f8:	4f 93       	push	r20
     9fa:	5f 93       	push	r21
     9fc:	6f 93       	push	r22
     9fe:	7f 93       	push	r23
     a00:	8f 93       	push	r24
     a02:	9f 93       	push	r25
     a04:	af 93       	push	r26
     a06:	bf 93       	push	r27
     a08:	ef 93       	push	r30
     a0a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     a0c:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     a10:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     a14:	e0 91 20 20 	lds	r30, 0x2020	; 0x802020 <adcb_callback>
     a18:	f0 91 21 20 	lds	r31, 0x2021	; 0x802021 <adcb_callback+0x1>
     a1c:	62 e0       	ldi	r22, 0x02	; 2
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	92 e0       	ldi	r25, 0x02	; 2
     a22:	19 95       	eicall
}
     a24:	ff 91       	pop	r31
     a26:	ef 91       	pop	r30
     a28:	bf 91       	pop	r27
     a2a:	af 91       	pop	r26
     a2c:	9f 91       	pop	r25
     a2e:	8f 91       	pop	r24
     a30:	7f 91       	pop	r23
     a32:	6f 91       	pop	r22
     a34:	5f 91       	pop	r21
     a36:	4f 91       	pop	r20
     a38:	3f 91       	pop	r19
     a3a:	2f 91       	pop	r18
     a3c:	0f 90       	pop	r0
     a3e:	0b be       	out	0x3b, r0	; 59
     a40:	0f 90       	pop	r0
     a42:	09 be       	out	0x39, r0	; 57
     a44:	0f 90       	pop	r0
     a46:	08 be       	out	0x38, r0	; 56
     a48:	0f 90       	pop	r0
     a4a:	0f be       	out	0x3f, r0	; 63
     a4c:	0f 90       	pop	r0
     a4e:	1f 90       	pop	r1
     a50:	18 95       	reti

00000a52 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     a52:	1f 92       	push	r1
     a54:	0f 92       	push	r0
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	0f 92       	push	r0
     a5a:	11 24       	eor	r1, r1
     a5c:	08 b6       	in	r0, 0x38	; 56
     a5e:	0f 92       	push	r0
     a60:	18 be       	out	0x38, r1	; 56
     a62:	09 b6       	in	r0, 0x39	; 57
     a64:	0f 92       	push	r0
     a66:	19 be       	out	0x39, r1	; 57
     a68:	0b b6       	in	r0, 0x3b	; 59
     a6a:	0f 92       	push	r0
     a6c:	1b be       	out	0x3b, r1	; 59
     a6e:	2f 93       	push	r18
     a70:	3f 93       	push	r19
     a72:	4f 93       	push	r20
     a74:	5f 93       	push	r21
     a76:	6f 93       	push	r22
     a78:	7f 93       	push	r23
     a7a:	8f 93       	push	r24
     a7c:	9f 93       	push	r25
     a7e:	af 93       	push	r26
     a80:	bf 93       	push	r27
     a82:	ef 93       	push	r30
     a84:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     a86:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     a8a:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     a8e:	e0 91 20 20 	lds	r30, 0x2020	; 0x802020 <adcb_callback>
     a92:	f0 91 21 20 	lds	r31, 0x2021	; 0x802021 <adcb_callback+0x1>
     a96:	64 e0       	ldi	r22, 0x04	; 4
     a98:	80 e4       	ldi	r24, 0x40	; 64
     a9a:	92 e0       	ldi	r25, 0x02	; 2
     a9c:	19 95       	eicall
}
     a9e:	ff 91       	pop	r31
     aa0:	ef 91       	pop	r30
     aa2:	bf 91       	pop	r27
     aa4:	af 91       	pop	r26
     aa6:	9f 91       	pop	r25
     aa8:	8f 91       	pop	r24
     aaa:	7f 91       	pop	r23
     aac:	6f 91       	pop	r22
     aae:	5f 91       	pop	r21
     ab0:	4f 91       	pop	r20
     ab2:	3f 91       	pop	r19
     ab4:	2f 91       	pop	r18
     ab6:	0f 90       	pop	r0
     ab8:	0b be       	out	0x3b, r0	; 59
     aba:	0f 90       	pop	r0
     abc:	09 be       	out	0x39, r0	; 57
     abe:	0f 90       	pop	r0
     ac0:	08 be       	out	0x38, r0	; 56
     ac2:	0f 90       	pop	r0
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	0f 90       	pop	r0
     ac8:	1f 90       	pop	r1
     aca:	18 95       	reti

00000acc <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     acc:	1f 92       	push	r1
     ace:	0f 92       	push	r0
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	0f 92       	push	r0
     ad4:	11 24       	eor	r1, r1
     ad6:	08 b6       	in	r0, 0x38	; 56
     ad8:	0f 92       	push	r0
     ada:	18 be       	out	0x38, r1	; 56
     adc:	09 b6       	in	r0, 0x39	; 57
     ade:	0f 92       	push	r0
     ae0:	19 be       	out	0x39, r1	; 57
     ae2:	0b b6       	in	r0, 0x3b	; 59
     ae4:	0f 92       	push	r0
     ae6:	1b be       	out	0x3b, r1	; 59
     ae8:	2f 93       	push	r18
     aea:	3f 93       	push	r19
     aec:	4f 93       	push	r20
     aee:	5f 93       	push	r21
     af0:	6f 93       	push	r22
     af2:	7f 93       	push	r23
     af4:	8f 93       	push	r24
     af6:	9f 93       	push	r25
     af8:	af 93       	push	r26
     afa:	bf 93       	push	r27
     afc:	ef 93       	push	r30
     afe:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     b00:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     b04:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     b08:	e0 91 20 20 	lds	r30, 0x2020	; 0x802020 <adcb_callback>
     b0c:	f0 91 21 20 	lds	r31, 0x2021	; 0x802021 <adcb_callback+0x1>
     b10:	68 e0       	ldi	r22, 0x08	; 8
     b12:	80 e4       	ldi	r24, 0x40	; 64
     b14:	92 e0       	ldi	r25, 0x02	; 2
     b16:	19 95       	eicall
}
     b18:	ff 91       	pop	r31
     b1a:	ef 91       	pop	r30
     b1c:	bf 91       	pop	r27
     b1e:	af 91       	pop	r26
     b20:	9f 91       	pop	r25
     b22:	8f 91       	pop	r24
     b24:	7f 91       	pop	r23
     b26:	6f 91       	pop	r22
     b28:	5f 91       	pop	r21
     b2a:	4f 91       	pop	r20
     b2c:	3f 91       	pop	r19
     b2e:	2f 91       	pop	r18
     b30:	0f 90       	pop	r0
     b32:	0b be       	out	0x3b, r0	; 59
     b34:	0f 90       	pop	r0
     b36:	09 be       	out	0x39, r0	; 57
     b38:	0f 90       	pop	r0
     b3a:	08 be       	out	0x38, r0	; 56
     b3c:	0f 90       	pop	r0
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	0f 90       	pop	r0
     b42:	1f 90       	pop	r1
     b44:	18 95       	reti

00000b46 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     b46:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     b48:	80 91 26 20 	lds	r24, 0x2026	; 0x802026 <stdio_base>
     b4c:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <stdio_base+0x1>
     b50:	e0 91 24 20 	lds	r30, 0x2024	; 0x802024 <ptr_put>
     b54:	f0 91 25 20 	lds	r31, 0x2025	; 0x802025 <ptr_put+0x1>
     b58:	19 95       	eicall
     b5a:	99 23       	and	r25, r25
     b5c:	1c f0       	brlt	.+6      	; 0xb64 <_write+0x1e>
		return -1;
	}
	return 1;
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     b64:	8f ef       	ldi	r24, 0xFF	; 255
     b66:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     b68:	08 95       	ret

00000b6a <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     b6a:	8f ef       	ldi	r24, 0xFF	; 255
     b6c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     b70:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     b74:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     b78:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     b7c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     b80:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     b84:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
     b88:	08 95       	ret

00000b8a <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	1f 92       	push	r1
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b94:	9f b7       	in	r25, 0x3f	; 63
     b96:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     b98:	f8 94       	cli
	return flags;
     b9a:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     b9c:	e8 2f       	mov	r30, r24
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	e0 59       	subi	r30, 0x90	; 144
     ba2:	ff 4f       	sbci	r31, 0xFF	; 255
     ba4:	60 95       	com	r22
     ba6:	80 81       	ld	r24, Z
     ba8:	68 23       	and	r22, r24
     baa:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     bac:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     bae:	0f 90       	pop	r0
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	08 95       	ret

00000bb6 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
     bb6:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
     bba:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
     bbc:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
     bbe:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
     bc2:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
     bc4:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
     bc8:	08 95       	ret

00000bca <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     bd0:	5c db       	rcall	.-2376   	; 0x28a <usart_getchar>
     bd2:	88 83       	st	Y, r24
}
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	08 95       	ret

00000bda <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     bda:	4f cb       	rjmp	.-2402   	; 0x27a <usart_putchar>
}
     bdc:	08 95       	ret

00000bde <uart_terminal_init>:

#include <asf.h>
#include "uart.h"

void uart_terminal_init()
{
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
     be6:	27 97       	sbiw	r28, 0x07	; 7
     be8:	cd bf       	out	0x3d, r28	; 61
     bea:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     bec:	60 e1       	ldi	r22, 0x10	; 16
     bee:	85 e0       	ldi	r24, 0x05	; 5
     bf0:	cc df       	rcall	.-104    	; 0xb8a <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
     bf2:	e0 e8       	ldi	r30, 0x80	; 128
     bf4:	f6 e0       	ldi	r31, 0x06	; 6
     bf6:	80 81       	ld	r24, Z
     bf8:	88 60       	ori	r24, 0x08	; 8
     bfa:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     bfc:	80 ea       	ldi	r24, 0xA0	; 160
     bfe:	9a e0       	ldi	r25, 0x0A	; 10
     c00:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <stdio_base>
     c04:	90 93 27 20 	sts	0x2027, r25	; 0x802027 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     c08:	8d ee       	ldi	r24, 0xED	; 237
     c0a:	95 e0       	ldi	r25, 0x05	; 5
     c0c:	80 93 24 20 	sts	0x2024, r24	; 0x802024 <ptr_put>
     c10:	90 93 25 20 	sts	0x2025, r25	; 0x802025 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     c14:	85 ee       	ldi	r24, 0xE5	; 229
     c16:	95 e0       	ldi	r25, 0x05	; 5
     c18:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <__data_end>
     c1c:	90 93 1f 20 	sts	0x201F, r25	; 0x80201f <__data_end+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     c20:	e6 e0       	ldi	r30, 0x06	; 6
     c22:	f0 e2       	ldi	r31, 0x20	; 32
     c24:	84 81       	ldd	r24, Z+4	; 0x04
     c26:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     c28:	85 81       	ldd	r24, Z+5	; 0x05
     c2a:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     c2c:	86 81       	ldd	r24, Z+6	; 0x06
     c2e:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     c30:	80 81       	ld	r24, Z
     c32:	91 81       	ldd	r25, Z+1	; 0x01
     c34:	a2 81       	ldd	r26, Z+2	; 0x02
     c36:	b3 81       	ldd	r27, Z+3	; 0x03
     c38:	89 83       	std	Y+1, r24	; 0x01
     c3a:	9a 83       	std	Y+2, r25	; 0x02
     c3c:	ab 83       	std	Y+3, r26	; 0x03
     c3e:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     c40:	60 e1       	ldi	r22, 0x10	; 16
     c42:	85 e0       	ldi	r24, 0x05	; 5
     c44:	a2 df       	rcall	.-188    	; 0xb8a <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     c46:	be 01       	movw	r22, r28
     c48:	6f 5f       	subi	r22, 0xFF	; 255
     c4a:	7f 4f       	sbci	r23, 0xFF	; 255
     c4c:	80 ea       	ldi	r24, 0xA0	; 160
     c4e:	9a e0       	ldi	r25, 0x0A	; 10
     c50:	31 dc       	rcall	.-1950   	; 0x4b4 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     c52:	64 e2       	ldi	r22, 0x24	; 36
     c54:	71 e0       	ldi	r23, 0x01	; 1
     c56:	83 ea       	ldi	r24, 0xA3	; 163
     c58:	95 e0       	ldi	r25, 0x05	; 5
     c5a:	af d0       	rcall	.+350    	; 0xdba <fdevopen>
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf, not necessary to know how it works
	
     c5c:	27 96       	adiw	r28, 0x07	; 7
     c5e:	cd bf       	out	0x3d, r28	; 61
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	08 95       	ret

00000c68 <TCC0_init>:
	
}


void TCC0_init(uint16_t period)
{
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	ec 01       	movw	r28, r24
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     c6e:	61 e0       	ldi	r22, 0x01	; 1
     c70:	83 e0       	ldi	r24, 0x03	; 3
     c72:	8b df       	rcall	.-234    	; 0xb8a <sysclk_enable_module>
	sysclk_enable_peripheral_clock(&TCC0);
	sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     c74:	64 e0       	ldi	r22, 0x04	; 4
     c76:	83 e0       	ldi	r24, 0x03	; 3
     c78:	88 df       	rcall	.-240    	; 0xb8a <sysclk_enable_module>
			TCC0.CTRLA = 0x07;
     c7a:	e0 e0       	ldi	r30, 0x00	; 0
     c7c:	f8 e0       	ldi	r31, 0x08	; 8
     c7e:	87 e0       	ldi	r24, 0x07	; 7
     c80:	80 83       	st	Z, r24
			TCC0.CTRLB = 0x03;
     c82:	83 e0       	ldi	r24, 0x03	; 3
     c84:	81 83       	std	Z+1, r24	; 0x01
			TCC0.PER = period;
     c86:	c6 a3       	std	Z+38, r28	; 0x26
     c88:	d7 a3       	std	Z+39, r29	; 0x27
			TCC0.CCA = TCE0.PER - (TCC0.PER/10);
     c8a:	40 91 26 0a 	lds	r20, 0x0A26	; 0x800a26 <__TEXT_REGION_LENGTH__+0x700a26>
     c8e:	50 91 27 0a 	lds	r21, 0x0A27	; 0x800a27 <__TEXT_REGION_LENGTH__+0x700a27>
     c92:	26 a1       	ldd	r18, Z+38	; 0x26
     c94:	37 a1       	ldd	r19, Z+39	; 0x27
     c96:	ad ec       	ldi	r26, 0xCD	; 205
     c98:	bc ec       	ldi	r27, 0xCC	; 204
     c9a:	80 d0       	rcall	.+256    	; 0xd9c <__umulhisi3>
     c9c:	96 95       	lsr	r25
     c9e:	87 95       	ror	r24
     ca0:	96 95       	lsr	r25
     ca2:	87 95       	ror	r24
     ca4:	96 95       	lsr	r25
     ca6:	87 95       	ror	r24
     ca8:	48 1b       	sub	r20, r24
     caa:	59 0b       	sbc	r21, r25
     cac:	40 a7       	std	Z+40, r20	; 0x28
     cae:	51 a7       	std	Z+41, r21	; 0x29
			
}
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	08 95       	ret

00000cb6 <adca_init>:
void adca_init(void)
{
     cb6:	ff 92       	push	r15
     cb8:	0f 93       	push	r16
     cba:	1f 93       	push	r17
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     cc0:	62 e0       	ldi	r22, 0x02	; 2
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	62 df       	rcall	.-316    	; 0xb8a <sysclk_enable_module>
	sysclk_enable_peripheral_clock(&ADCA);
	PORTA.DIR = 0x01;
     cc6:	ff 24       	eor	r15, r15
     cc8:	f3 94       	inc	r15
     cca:	f0 92 00 06 	sts	0x0600, r15	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
	ADCA.CTRLA = 0x01;
     cce:	c0 e0       	ldi	r28, 0x00	; 0
     cd0:	d2 e0       	ldi	r29, 0x02	; 2
     cd2:	f8 82       	st	Y, r15
	ADCA.CTRLB = 0x00;
     cd4:	19 82       	std	Y+1, r1	; 0x01
	ADCA.REFCTRL = 0x10;
     cd6:	80 e1       	ldi	r24, 0x10	; 16
     cd8:	8a 83       	std	Y+2, r24	; 0x02
	ADCA.PRESCALER = 0x05;
     cda:	85 e0       	ldi	r24, 0x05	; 5
     cdc:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     cde:	61 e2       	ldi	r22, 0x21	; 33
     ce0:	70 e0       	ldi	r23, 0x00	; 0
     ce2:	82 e0       	ldi	r24, 0x02	; 2
     ce4:	68 df       	rcall	.-304    	; 0xbb6 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     ce6:	08 2f       	mov	r16, r24
     ce8:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
     cea:	10 2f       	mov	r17, r16
     cec:	00 27       	eor	r16, r16
     cee:	60 e2       	ldi	r22, 0x20	; 32
     cf0:	70 e0       	ldi	r23, 0x00	; 0
     cf2:	82 e0       	ldi	r24, 0x02	; 2
     cf4:	60 df       	rcall	.-320    	; 0xbb6 <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
     cf6:	08 2b       	or	r16, r24
	ADCA.CAL = adc_get_calibration_data(ADC_CAL_ADCA);
     cf8:	0c 87       	std	Y+12, r16	; 0x0c
     cfa:	1d 87       	std	Y+13, r17	; 0x0d
	ADCA.CH0.CTRL = 0x01;
     cfc:	f8 a2       	std	Y+32, r15	; 0x20
	ADCA.CH0.MUXCTRL = 0x00;
     cfe:	19 a2       	std	Y+33, r1	; 0x21

	
}
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	ff 90       	pop	r15
     d0a:	08 95       	ret

00000d0c <adc_read>:
uint16_t adc_read(void)
{
	ADCA.CH0.CTRL |= 0x80;
     d0c:	e0 e0       	ldi	r30, 0x00	; 0
     d0e:	f2 e0       	ldi	r31, 0x02	; 2
     d10:	80 a1       	ldd	r24, Z+32	; 0x20
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	80 a3       	std	Z+32, r24	; 0x20
	while(ADCA.CH0.INTFLAGS == 0);
     d16:	83 a1       	ldd	r24, Z+35	; 0x23
     d18:	88 23       	and	r24, r24
     d1a:	e9 f3       	breq	.-6      	; 0xd16 <adc_read+0xa>
	ADCA.CH0.INTFLAGS = 0; 
     d1c:	e0 e0       	ldi	r30, 0x00	; 0
     d1e:	f2 e0       	ldi	r31, 0x02	; 2
     d20:	13 a2       	std	Z+35, r1	; 0x23
	uint16_t adc_reading = ADCA.CH0.RES;
     d22:	84 a1       	ldd	r24, Z+36	; 0x24
     d24:	95 a1       	ldd	r25, Z+37	; 0x25
	printf("adc reading = %u",adc_reading);
     d26:	9f 93       	push	r25
     d28:	8f 93       	push	r24
     d2a:	8d e0       	ldi	r24, 0x0D	; 13
     d2c:	90 e2       	ldi	r25, 0x20	; 32
     d2e:	9f 93       	push	r25
     d30:	8f 93       	push	r24
     d32:	8d d0       	rcall	.+282    	; 0xe4e <printf>
	
}
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	08 95       	ret

00000d3e <main>:
uint16_t adc_read(void);

int main (void)
{	/* Insert system clock initialization code here (sysclk_init()). */

	sysclk_init();
     d3e:	15 df       	rcall	.-470    	; 0xb6a <sysclk_init>

	/* Insert application code here, after the board has been initialized. */
	PORTQ.DIR = 0x08;
     d40:	e0 ec       	ldi	r30, 0xC0	; 192
     d42:	f7 e0       	ldi	r31, 0x07	; 7
     d44:	88 e0       	ldi	r24, 0x08	; 8
     d46:	80 83       	st	Z, r24
	PORTQ.OUT = 0x00;
     d48:	14 82       	std	Z+4, r1	; 0x04
	TCC0_init(62499);
     d4a:	83 e2       	ldi	r24, 0x23	; 35
     d4c:	94 ef       	ldi	r25, 0xF4	; 244
	uart_terminal_init();
     d4e:	8c df       	rcall	.-232    	; 0xc68 <TCC0_init>
	adca_init();
     d50:	46 df       	rcall	.-372    	; 0xbde <uart_terminal_init>
     d52:	b1 df       	rcall	.-158    	; 0xcb6 <adca_init>
	while(1)
	{
		adc_read();
     d54:	db df       	rcall	.-74     	; 0xd0c <adc_read>
     d56:	fe cf       	rjmp	.-4      	; 0xd54 <main+0x16>

00000d58 <__udivmodsi4>:
     d58:	a1 e2       	ldi	r26, 0x21	; 33
     d5a:	1a 2e       	mov	r1, r26
     d5c:	aa 1b       	sub	r26, r26
     d5e:	bb 1b       	sub	r27, r27
     d60:	fd 01       	movw	r30, r26
     d62:	0d c0       	rjmp	.+26     	; 0xd7e <__udivmodsi4_ep>

00000d64 <__udivmodsi4_loop>:
     d64:	aa 1f       	adc	r26, r26
     d66:	bb 1f       	adc	r27, r27
     d68:	ee 1f       	adc	r30, r30
     d6a:	ff 1f       	adc	r31, r31
     d6c:	a2 17       	cp	r26, r18
     d6e:	b3 07       	cpc	r27, r19
     d70:	e4 07       	cpc	r30, r20
     d72:	f5 07       	cpc	r31, r21
     d74:	20 f0       	brcs	.+8      	; 0xd7e <__udivmodsi4_ep>
     d76:	a2 1b       	sub	r26, r18
     d78:	b3 0b       	sbc	r27, r19
     d7a:	e4 0b       	sbc	r30, r20
     d7c:	f5 0b       	sbc	r31, r21

00000d7e <__udivmodsi4_ep>:
     d7e:	66 1f       	adc	r22, r22
     d80:	77 1f       	adc	r23, r23
     d82:	88 1f       	adc	r24, r24
     d84:	99 1f       	adc	r25, r25
     d86:	1a 94       	dec	r1
     d88:	69 f7       	brne	.-38     	; 0xd64 <__udivmodsi4_loop>
     d8a:	60 95       	com	r22
     d8c:	70 95       	com	r23
     d8e:	80 95       	com	r24
     d90:	90 95       	com	r25
     d92:	9b 01       	movw	r18, r22
     d94:	ac 01       	movw	r20, r24
     d96:	bd 01       	movw	r22, r26
     d98:	cf 01       	movw	r24, r30
     d9a:	08 95       	ret

00000d9c <__umulhisi3>:
     d9c:	a2 9f       	mul	r26, r18
     d9e:	b0 01       	movw	r22, r0
     da0:	b3 9f       	mul	r27, r19
     da2:	c0 01       	movw	r24, r0
     da4:	a3 9f       	mul	r26, r19
     da6:	70 0d       	add	r23, r0
     da8:	81 1d       	adc	r24, r1
     daa:	11 24       	eor	r1, r1
     dac:	91 1d       	adc	r25, r1
     dae:	b2 9f       	mul	r27, r18
     db0:	70 0d       	add	r23, r0
     db2:	81 1d       	adc	r24, r1
     db4:	11 24       	eor	r1, r1
     db6:	91 1d       	adc	r25, r1
     db8:	08 95       	ret

00000dba <fdevopen>:
     dba:	0f 93       	push	r16
     dbc:	1f 93       	push	r17
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	00 97       	sbiw	r24, 0x00	; 0
     dc4:	31 f4       	brne	.+12     	; 0xdd2 <fdevopen+0x18>
     dc6:	61 15       	cp	r22, r1
     dc8:	71 05       	cpc	r23, r1
     dca:	19 f4       	brne	.+6      	; 0xdd2 <fdevopen+0x18>
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	39 c0       	rjmp	.+114    	; 0xe44 <fdevopen+0x8a>
     dd2:	8b 01       	movw	r16, r22
     dd4:	ec 01       	movw	r28, r24
     dd6:	6e e0       	ldi	r22, 0x0E	; 14
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	41 d2       	rcall	.+1154   	; 0x1262 <calloc>
     de0:	fc 01       	movw	r30, r24
     de2:	89 2b       	or	r24, r25
     de4:	99 f3       	breq	.-26     	; 0xdcc <fdevopen+0x12>
     de6:	80 e8       	ldi	r24, 0x80	; 128
     de8:	83 83       	std	Z+3, r24	; 0x03
     dea:	01 15       	cp	r16, r1
     dec:	11 05       	cpc	r17, r1
     dee:	71 f0       	breq	.+28     	; 0xe0c <fdevopen+0x52>
     df0:	02 87       	std	Z+10, r16	; 0x0a
     df2:	13 87       	std	Z+11, r17	; 0x0b
     df4:	81 e8       	ldi	r24, 0x81	; 129
     df6:	83 83       	std	Z+3, r24	; 0x03
     df8:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <__iob>
     dfc:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <__iob+0x1>
     e00:	89 2b       	or	r24, r25
     e02:	21 f4       	brne	.+8      	; 0xe0c <fdevopen+0x52>
     e04:	e0 93 28 20 	sts	0x2028, r30	; 0x802028 <__iob>
     e08:	f0 93 29 20 	sts	0x2029, r31	; 0x802029 <__iob+0x1>
     e0c:	20 97       	sbiw	r28, 0x00	; 0
     e0e:	c9 f0       	breq	.+50     	; 0xe42 <fdevopen+0x88>
     e10:	c0 87       	std	Z+8, r28	; 0x08
     e12:	d1 87       	std	Z+9, r29	; 0x09
     e14:	83 81       	ldd	r24, Z+3	; 0x03
     e16:	82 60       	ori	r24, 0x02	; 2
     e18:	83 83       	std	Z+3, r24	; 0x03
     e1a:	80 91 2a 20 	lds	r24, 0x202A	; 0x80202a <__iob+0x2>
     e1e:	90 91 2b 20 	lds	r25, 0x202B	; 0x80202b <__iob+0x3>
     e22:	89 2b       	or	r24, r25
     e24:	71 f4       	brne	.+28     	; 0xe42 <fdevopen+0x88>
     e26:	e0 93 2a 20 	sts	0x202A, r30	; 0x80202a <__iob+0x2>
     e2a:	f0 93 2b 20 	sts	0x202B, r31	; 0x80202b <__iob+0x3>
     e2e:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <__iob+0x4>
     e32:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <__iob+0x5>
     e36:	89 2b       	or	r24, r25
     e38:	21 f4       	brne	.+8      	; 0xe42 <fdevopen+0x88>
     e3a:	e0 93 2c 20 	sts	0x202C, r30	; 0x80202c <__iob+0x4>
     e3e:	f0 93 2d 20 	sts	0x202D, r31	; 0x80202d <__iob+0x5>
     e42:	cf 01       	movw	r24, r30
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	1f 91       	pop	r17
     e4a:	0f 91       	pop	r16
     e4c:	08 95       	ret

00000e4e <printf>:
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	ae 01       	movw	r20, r28
     e58:	4a 5f       	subi	r20, 0xFA	; 250
     e5a:	5f 4f       	sbci	r21, 0xFF	; 255
     e5c:	fa 01       	movw	r30, r20
     e5e:	61 91       	ld	r22, Z+
     e60:	71 91       	ld	r23, Z+
     e62:	af 01       	movw	r20, r30
     e64:	80 91 2a 20 	lds	r24, 0x202A	; 0x80202a <__iob+0x2>
     e68:	90 91 2b 20 	lds	r25, 0x202B	; 0x80202b <__iob+0x3>
     e6c:	03 d0       	rcall	.+6      	; 0xe74 <vfprintf>
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	08 95       	ret

00000e74 <vfprintf>:
     e74:	2f 92       	push	r2
     e76:	3f 92       	push	r3
     e78:	4f 92       	push	r4
     e7a:	5f 92       	push	r5
     e7c:	6f 92       	push	r6
     e7e:	7f 92       	push	r7
     e80:	8f 92       	push	r8
     e82:	9f 92       	push	r9
     e84:	af 92       	push	r10
     e86:	bf 92       	push	r11
     e88:	cf 92       	push	r12
     e8a:	df 92       	push	r13
     e8c:	ef 92       	push	r14
     e8e:	ff 92       	push	r15
     e90:	0f 93       	push	r16
     e92:	1f 93       	push	r17
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
     e9c:	2b 97       	sbiw	r28, 0x0b	; 11
     e9e:	cd bf       	out	0x3d, r28	; 61
     ea0:	de bf       	out	0x3e, r29	; 62
     ea2:	6c 01       	movw	r12, r24
     ea4:	7b 01       	movw	r14, r22
     ea6:	8a 01       	movw	r16, r20
     ea8:	fc 01       	movw	r30, r24
     eaa:	16 82       	std	Z+6, r1	; 0x06
     eac:	17 82       	std	Z+7, r1	; 0x07
     eae:	83 81       	ldd	r24, Z+3	; 0x03
     eb0:	81 ff       	sbrs	r24, 1
     eb2:	bf c1       	rjmp	.+894    	; 0x1232 <vfprintf+0x3be>
     eb4:	ce 01       	movw	r24, r28
     eb6:	01 96       	adiw	r24, 0x01	; 1
     eb8:	3c 01       	movw	r6, r24
     eba:	f6 01       	movw	r30, r12
     ebc:	93 81       	ldd	r25, Z+3	; 0x03
     ebe:	f7 01       	movw	r30, r14
     ec0:	93 fd       	sbrc	r25, 3
     ec2:	85 91       	lpm	r24, Z+
     ec4:	93 ff       	sbrs	r25, 3
     ec6:	81 91       	ld	r24, Z+
     ec8:	7f 01       	movw	r14, r30
     eca:	88 23       	and	r24, r24
     ecc:	09 f4       	brne	.+2      	; 0xed0 <vfprintf+0x5c>
     ece:	ad c1       	rjmp	.+858    	; 0x122a <vfprintf+0x3b6>
     ed0:	85 32       	cpi	r24, 0x25	; 37
     ed2:	39 f4       	brne	.+14     	; 0xee2 <vfprintf+0x6e>
     ed4:	93 fd       	sbrc	r25, 3
     ed6:	85 91       	lpm	r24, Z+
     ed8:	93 ff       	sbrs	r25, 3
     eda:	81 91       	ld	r24, Z+
     edc:	7f 01       	movw	r14, r30
     ede:	85 32       	cpi	r24, 0x25	; 37
     ee0:	21 f4       	brne	.+8      	; 0xeea <vfprintf+0x76>
     ee2:	b6 01       	movw	r22, r12
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	15 d3       	rcall	.+1578   	; 0x1512 <fputc>
     ee8:	e8 cf       	rjmp	.-48     	; 0xeba <vfprintf+0x46>
     eea:	91 2c       	mov	r9, r1
     eec:	21 2c       	mov	r2, r1
     eee:	31 2c       	mov	r3, r1
     ef0:	ff e1       	ldi	r31, 0x1F	; 31
     ef2:	f3 15       	cp	r31, r3
     ef4:	d8 f0       	brcs	.+54     	; 0xf2c <vfprintf+0xb8>
     ef6:	8b 32       	cpi	r24, 0x2B	; 43
     ef8:	79 f0       	breq	.+30     	; 0xf18 <vfprintf+0xa4>
     efa:	38 f4       	brcc	.+14     	; 0xf0a <vfprintf+0x96>
     efc:	80 32       	cpi	r24, 0x20	; 32
     efe:	79 f0       	breq	.+30     	; 0xf1e <vfprintf+0xaa>
     f00:	83 32       	cpi	r24, 0x23	; 35
     f02:	a1 f4       	brne	.+40     	; 0xf2c <vfprintf+0xb8>
     f04:	23 2d       	mov	r18, r3
     f06:	20 61       	ori	r18, 0x10	; 16
     f08:	1d c0       	rjmp	.+58     	; 0xf44 <vfprintf+0xd0>
     f0a:	8d 32       	cpi	r24, 0x2D	; 45
     f0c:	61 f0       	breq	.+24     	; 0xf26 <vfprintf+0xb2>
     f0e:	80 33       	cpi	r24, 0x30	; 48
     f10:	69 f4       	brne	.+26     	; 0xf2c <vfprintf+0xb8>
     f12:	23 2d       	mov	r18, r3
     f14:	21 60       	ori	r18, 0x01	; 1
     f16:	16 c0       	rjmp	.+44     	; 0xf44 <vfprintf+0xd0>
     f18:	83 2d       	mov	r24, r3
     f1a:	82 60       	ori	r24, 0x02	; 2
     f1c:	38 2e       	mov	r3, r24
     f1e:	e3 2d       	mov	r30, r3
     f20:	e4 60       	ori	r30, 0x04	; 4
     f22:	3e 2e       	mov	r3, r30
     f24:	2a c0       	rjmp	.+84     	; 0xf7a <vfprintf+0x106>
     f26:	f3 2d       	mov	r31, r3
     f28:	f8 60       	ori	r31, 0x08	; 8
     f2a:	1d c0       	rjmp	.+58     	; 0xf66 <vfprintf+0xf2>
     f2c:	37 fc       	sbrc	r3, 7
     f2e:	2d c0       	rjmp	.+90     	; 0xf8a <vfprintf+0x116>
     f30:	20 ed       	ldi	r18, 0xD0	; 208
     f32:	28 0f       	add	r18, r24
     f34:	2a 30       	cpi	r18, 0x0A	; 10
     f36:	40 f0       	brcs	.+16     	; 0xf48 <vfprintf+0xd4>
     f38:	8e 32       	cpi	r24, 0x2E	; 46
     f3a:	b9 f4       	brne	.+46     	; 0xf6a <vfprintf+0xf6>
     f3c:	36 fc       	sbrc	r3, 6
     f3e:	75 c1       	rjmp	.+746    	; 0x122a <vfprintf+0x3b6>
     f40:	23 2d       	mov	r18, r3
     f42:	20 64       	ori	r18, 0x40	; 64
     f44:	32 2e       	mov	r3, r18
     f46:	19 c0       	rjmp	.+50     	; 0xf7a <vfprintf+0x106>
     f48:	36 fe       	sbrs	r3, 6
     f4a:	06 c0       	rjmp	.+12     	; 0xf58 <vfprintf+0xe4>
     f4c:	8a e0       	ldi	r24, 0x0A	; 10
     f4e:	98 9e       	mul	r9, r24
     f50:	20 0d       	add	r18, r0
     f52:	11 24       	eor	r1, r1
     f54:	92 2e       	mov	r9, r18
     f56:	11 c0       	rjmp	.+34     	; 0xf7a <vfprintf+0x106>
     f58:	ea e0       	ldi	r30, 0x0A	; 10
     f5a:	2e 9e       	mul	r2, r30
     f5c:	20 0d       	add	r18, r0
     f5e:	11 24       	eor	r1, r1
     f60:	22 2e       	mov	r2, r18
     f62:	f3 2d       	mov	r31, r3
     f64:	f0 62       	ori	r31, 0x20	; 32
     f66:	3f 2e       	mov	r3, r31
     f68:	08 c0       	rjmp	.+16     	; 0xf7a <vfprintf+0x106>
     f6a:	8c 36       	cpi	r24, 0x6C	; 108
     f6c:	21 f4       	brne	.+8      	; 0xf76 <vfprintf+0x102>
     f6e:	83 2d       	mov	r24, r3
     f70:	80 68       	ori	r24, 0x80	; 128
     f72:	38 2e       	mov	r3, r24
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <vfprintf+0x106>
     f76:	88 36       	cpi	r24, 0x68	; 104
     f78:	41 f4       	brne	.+16     	; 0xf8a <vfprintf+0x116>
     f7a:	f7 01       	movw	r30, r14
     f7c:	93 fd       	sbrc	r25, 3
     f7e:	85 91       	lpm	r24, Z+
     f80:	93 ff       	sbrs	r25, 3
     f82:	81 91       	ld	r24, Z+
     f84:	7f 01       	movw	r14, r30
     f86:	81 11       	cpse	r24, r1
     f88:	b3 cf       	rjmp	.-154    	; 0xef0 <vfprintf+0x7c>
     f8a:	98 2f       	mov	r25, r24
     f8c:	9f 7d       	andi	r25, 0xDF	; 223
     f8e:	95 54       	subi	r25, 0x45	; 69
     f90:	93 30       	cpi	r25, 0x03	; 3
     f92:	28 f4       	brcc	.+10     	; 0xf9e <vfprintf+0x12a>
     f94:	0c 5f       	subi	r16, 0xFC	; 252
     f96:	1f 4f       	sbci	r17, 0xFF	; 255
     f98:	9f e3       	ldi	r25, 0x3F	; 63
     f9a:	99 83       	std	Y+1, r25	; 0x01
     f9c:	0d c0       	rjmp	.+26     	; 0xfb8 <vfprintf+0x144>
     f9e:	83 36       	cpi	r24, 0x63	; 99
     fa0:	31 f0       	breq	.+12     	; 0xfae <vfprintf+0x13a>
     fa2:	83 37       	cpi	r24, 0x73	; 115
     fa4:	71 f0       	breq	.+28     	; 0xfc2 <vfprintf+0x14e>
     fa6:	83 35       	cpi	r24, 0x53	; 83
     fa8:	09 f0       	breq	.+2      	; 0xfac <vfprintf+0x138>
     faa:	55 c0       	rjmp	.+170    	; 0x1056 <vfprintf+0x1e2>
     fac:	20 c0       	rjmp	.+64     	; 0xfee <vfprintf+0x17a>
     fae:	f8 01       	movw	r30, r16
     fb0:	80 81       	ld	r24, Z
     fb2:	89 83       	std	Y+1, r24	; 0x01
     fb4:	0e 5f       	subi	r16, 0xFE	; 254
     fb6:	1f 4f       	sbci	r17, 0xFF	; 255
     fb8:	88 24       	eor	r8, r8
     fba:	83 94       	inc	r8
     fbc:	91 2c       	mov	r9, r1
     fbe:	53 01       	movw	r10, r6
     fc0:	12 c0       	rjmp	.+36     	; 0xfe6 <vfprintf+0x172>
     fc2:	28 01       	movw	r4, r16
     fc4:	f2 e0       	ldi	r31, 0x02	; 2
     fc6:	4f 0e       	add	r4, r31
     fc8:	51 1c       	adc	r5, r1
     fca:	f8 01       	movw	r30, r16
     fcc:	a0 80       	ld	r10, Z
     fce:	b1 80       	ldd	r11, Z+1	; 0x01
     fd0:	36 fe       	sbrs	r3, 6
     fd2:	03 c0       	rjmp	.+6      	; 0xfda <vfprintf+0x166>
     fd4:	69 2d       	mov	r22, r9
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <vfprintf+0x16a>
     fda:	6f ef       	ldi	r22, 0xFF	; 255
     fdc:	7f ef       	ldi	r23, 0xFF	; 255
     fde:	c5 01       	movw	r24, r10
     fe0:	8d d2       	rcall	.+1306   	; 0x14fc <strnlen>
     fe2:	4c 01       	movw	r8, r24
     fe4:	82 01       	movw	r16, r4
     fe6:	f3 2d       	mov	r31, r3
     fe8:	ff 77       	andi	r31, 0x7F	; 127
     fea:	3f 2e       	mov	r3, r31
     fec:	15 c0       	rjmp	.+42     	; 0x1018 <vfprintf+0x1a4>
     fee:	28 01       	movw	r4, r16
     ff0:	22 e0       	ldi	r18, 0x02	; 2
     ff2:	42 0e       	add	r4, r18
     ff4:	51 1c       	adc	r5, r1
     ff6:	f8 01       	movw	r30, r16
     ff8:	a0 80       	ld	r10, Z
     ffa:	b1 80       	ldd	r11, Z+1	; 0x01
     ffc:	36 fe       	sbrs	r3, 6
     ffe:	03 c0       	rjmp	.+6      	; 0x1006 <vfprintf+0x192>
    1000:	69 2d       	mov	r22, r9
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	02 c0       	rjmp	.+4      	; 0x100a <vfprintf+0x196>
    1006:	6f ef       	ldi	r22, 0xFF	; 255
    1008:	7f ef       	ldi	r23, 0xFF	; 255
    100a:	c5 01       	movw	r24, r10
    100c:	65 d2       	rcall	.+1226   	; 0x14d8 <strnlen_P>
    100e:	4c 01       	movw	r8, r24
    1010:	f3 2d       	mov	r31, r3
    1012:	f0 68       	ori	r31, 0x80	; 128
    1014:	3f 2e       	mov	r3, r31
    1016:	82 01       	movw	r16, r4
    1018:	33 fc       	sbrc	r3, 3
    101a:	19 c0       	rjmp	.+50     	; 0x104e <vfprintf+0x1da>
    101c:	82 2d       	mov	r24, r2
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	88 16       	cp	r8, r24
    1022:	99 06       	cpc	r9, r25
    1024:	a0 f4       	brcc	.+40     	; 0x104e <vfprintf+0x1da>
    1026:	b6 01       	movw	r22, r12
    1028:	80 e2       	ldi	r24, 0x20	; 32
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	72 d2       	rcall	.+1252   	; 0x1512 <fputc>
    102e:	2a 94       	dec	r2
    1030:	f5 cf       	rjmp	.-22     	; 0x101c <vfprintf+0x1a8>
    1032:	f5 01       	movw	r30, r10
    1034:	37 fc       	sbrc	r3, 7
    1036:	85 91       	lpm	r24, Z+
    1038:	37 fe       	sbrs	r3, 7
    103a:	81 91       	ld	r24, Z+
    103c:	5f 01       	movw	r10, r30
    103e:	b6 01       	movw	r22, r12
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	67 d2       	rcall	.+1230   	; 0x1512 <fputc>
    1044:	21 10       	cpse	r2, r1
    1046:	2a 94       	dec	r2
    1048:	21 e0       	ldi	r18, 0x01	; 1
    104a:	82 1a       	sub	r8, r18
    104c:	91 08       	sbc	r9, r1
    104e:	81 14       	cp	r8, r1
    1050:	91 04       	cpc	r9, r1
    1052:	79 f7       	brne	.-34     	; 0x1032 <vfprintf+0x1be>
    1054:	e1 c0       	rjmp	.+450    	; 0x1218 <vfprintf+0x3a4>
    1056:	84 36       	cpi	r24, 0x64	; 100
    1058:	11 f0       	breq	.+4      	; 0x105e <vfprintf+0x1ea>
    105a:	89 36       	cpi	r24, 0x69	; 105
    105c:	39 f5       	brne	.+78     	; 0x10ac <vfprintf+0x238>
    105e:	f8 01       	movw	r30, r16
    1060:	37 fe       	sbrs	r3, 7
    1062:	07 c0       	rjmp	.+14     	; 0x1072 <vfprintf+0x1fe>
    1064:	60 81       	ld	r22, Z
    1066:	71 81       	ldd	r23, Z+1	; 0x01
    1068:	82 81       	ldd	r24, Z+2	; 0x02
    106a:	93 81       	ldd	r25, Z+3	; 0x03
    106c:	0c 5f       	subi	r16, 0xFC	; 252
    106e:	1f 4f       	sbci	r17, 0xFF	; 255
    1070:	08 c0       	rjmp	.+16     	; 0x1082 <vfprintf+0x20e>
    1072:	60 81       	ld	r22, Z
    1074:	71 81       	ldd	r23, Z+1	; 0x01
    1076:	07 2e       	mov	r0, r23
    1078:	00 0c       	add	r0, r0
    107a:	88 0b       	sbc	r24, r24
    107c:	99 0b       	sbc	r25, r25
    107e:	0e 5f       	subi	r16, 0xFE	; 254
    1080:	1f 4f       	sbci	r17, 0xFF	; 255
    1082:	f3 2d       	mov	r31, r3
    1084:	ff 76       	andi	r31, 0x6F	; 111
    1086:	3f 2e       	mov	r3, r31
    1088:	97 ff       	sbrs	r25, 7
    108a:	09 c0       	rjmp	.+18     	; 0x109e <vfprintf+0x22a>
    108c:	90 95       	com	r25
    108e:	80 95       	com	r24
    1090:	70 95       	com	r23
    1092:	61 95       	neg	r22
    1094:	7f 4f       	sbci	r23, 0xFF	; 255
    1096:	8f 4f       	sbci	r24, 0xFF	; 255
    1098:	9f 4f       	sbci	r25, 0xFF	; 255
    109a:	f0 68       	ori	r31, 0x80	; 128
    109c:	3f 2e       	mov	r3, r31
    109e:	2a e0       	ldi	r18, 0x0A	; 10
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	a3 01       	movw	r20, r6
    10a4:	72 d2       	rcall	.+1252   	; 0x158a <__ultoa_invert>
    10a6:	88 2e       	mov	r8, r24
    10a8:	86 18       	sub	r8, r6
    10aa:	44 c0       	rjmp	.+136    	; 0x1134 <vfprintf+0x2c0>
    10ac:	85 37       	cpi	r24, 0x75	; 117
    10ae:	31 f4       	brne	.+12     	; 0x10bc <vfprintf+0x248>
    10b0:	23 2d       	mov	r18, r3
    10b2:	2f 7e       	andi	r18, 0xEF	; 239
    10b4:	b2 2e       	mov	r11, r18
    10b6:	2a e0       	ldi	r18, 0x0A	; 10
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	25 c0       	rjmp	.+74     	; 0x1106 <vfprintf+0x292>
    10bc:	93 2d       	mov	r25, r3
    10be:	99 7f       	andi	r25, 0xF9	; 249
    10c0:	b9 2e       	mov	r11, r25
    10c2:	8f 36       	cpi	r24, 0x6F	; 111
    10c4:	c1 f0       	breq	.+48     	; 0x10f6 <vfprintf+0x282>
    10c6:	18 f4       	brcc	.+6      	; 0x10ce <vfprintf+0x25a>
    10c8:	88 35       	cpi	r24, 0x58	; 88
    10ca:	79 f0       	breq	.+30     	; 0x10ea <vfprintf+0x276>
    10cc:	ae c0       	rjmp	.+348    	; 0x122a <vfprintf+0x3b6>
    10ce:	80 37       	cpi	r24, 0x70	; 112
    10d0:	19 f0       	breq	.+6      	; 0x10d8 <vfprintf+0x264>
    10d2:	88 37       	cpi	r24, 0x78	; 120
    10d4:	21 f0       	breq	.+8      	; 0x10de <vfprintf+0x26a>
    10d6:	a9 c0       	rjmp	.+338    	; 0x122a <vfprintf+0x3b6>
    10d8:	e9 2f       	mov	r30, r25
    10da:	e0 61       	ori	r30, 0x10	; 16
    10dc:	be 2e       	mov	r11, r30
    10de:	b4 fe       	sbrs	r11, 4
    10e0:	0d c0       	rjmp	.+26     	; 0x10fc <vfprintf+0x288>
    10e2:	fb 2d       	mov	r31, r11
    10e4:	f4 60       	ori	r31, 0x04	; 4
    10e6:	bf 2e       	mov	r11, r31
    10e8:	09 c0       	rjmp	.+18     	; 0x10fc <vfprintf+0x288>
    10ea:	34 fe       	sbrs	r3, 4
    10ec:	0a c0       	rjmp	.+20     	; 0x1102 <vfprintf+0x28e>
    10ee:	29 2f       	mov	r18, r25
    10f0:	26 60       	ori	r18, 0x06	; 6
    10f2:	b2 2e       	mov	r11, r18
    10f4:	06 c0       	rjmp	.+12     	; 0x1102 <vfprintf+0x28e>
    10f6:	28 e0       	ldi	r18, 0x08	; 8
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	05 c0       	rjmp	.+10     	; 0x1106 <vfprintf+0x292>
    10fc:	20 e1       	ldi	r18, 0x10	; 16
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <vfprintf+0x292>
    1102:	20 e1       	ldi	r18, 0x10	; 16
    1104:	32 e0       	ldi	r19, 0x02	; 2
    1106:	f8 01       	movw	r30, r16
    1108:	b7 fe       	sbrs	r11, 7
    110a:	07 c0       	rjmp	.+14     	; 0x111a <vfprintf+0x2a6>
    110c:	60 81       	ld	r22, Z
    110e:	71 81       	ldd	r23, Z+1	; 0x01
    1110:	82 81       	ldd	r24, Z+2	; 0x02
    1112:	93 81       	ldd	r25, Z+3	; 0x03
    1114:	0c 5f       	subi	r16, 0xFC	; 252
    1116:	1f 4f       	sbci	r17, 0xFF	; 255
    1118:	06 c0       	rjmp	.+12     	; 0x1126 <vfprintf+0x2b2>
    111a:	60 81       	ld	r22, Z
    111c:	71 81       	ldd	r23, Z+1	; 0x01
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 5f       	subi	r16, 0xFE	; 254
    1124:	1f 4f       	sbci	r17, 0xFF	; 255
    1126:	a3 01       	movw	r20, r6
    1128:	30 d2       	rcall	.+1120   	; 0x158a <__ultoa_invert>
    112a:	88 2e       	mov	r8, r24
    112c:	86 18       	sub	r8, r6
    112e:	fb 2d       	mov	r31, r11
    1130:	ff 77       	andi	r31, 0x7F	; 127
    1132:	3f 2e       	mov	r3, r31
    1134:	36 fe       	sbrs	r3, 6
    1136:	0d c0       	rjmp	.+26     	; 0x1152 <vfprintf+0x2de>
    1138:	23 2d       	mov	r18, r3
    113a:	2e 7f       	andi	r18, 0xFE	; 254
    113c:	a2 2e       	mov	r10, r18
    113e:	89 14       	cp	r8, r9
    1140:	58 f4       	brcc	.+22     	; 0x1158 <vfprintf+0x2e4>
    1142:	34 fe       	sbrs	r3, 4
    1144:	0b c0       	rjmp	.+22     	; 0x115c <vfprintf+0x2e8>
    1146:	32 fc       	sbrc	r3, 2
    1148:	09 c0       	rjmp	.+18     	; 0x115c <vfprintf+0x2e8>
    114a:	83 2d       	mov	r24, r3
    114c:	8e 7e       	andi	r24, 0xEE	; 238
    114e:	a8 2e       	mov	r10, r24
    1150:	05 c0       	rjmp	.+10     	; 0x115c <vfprintf+0x2e8>
    1152:	b8 2c       	mov	r11, r8
    1154:	a3 2c       	mov	r10, r3
    1156:	03 c0       	rjmp	.+6      	; 0x115e <vfprintf+0x2ea>
    1158:	b8 2c       	mov	r11, r8
    115a:	01 c0       	rjmp	.+2      	; 0x115e <vfprintf+0x2ea>
    115c:	b9 2c       	mov	r11, r9
    115e:	a4 fe       	sbrs	r10, 4
    1160:	0f c0       	rjmp	.+30     	; 0x1180 <vfprintf+0x30c>
    1162:	fe 01       	movw	r30, r28
    1164:	e8 0d       	add	r30, r8
    1166:	f1 1d       	adc	r31, r1
    1168:	80 81       	ld	r24, Z
    116a:	80 33       	cpi	r24, 0x30	; 48
    116c:	21 f4       	brne	.+8      	; 0x1176 <vfprintf+0x302>
    116e:	9a 2d       	mov	r25, r10
    1170:	99 7e       	andi	r25, 0xE9	; 233
    1172:	a9 2e       	mov	r10, r25
    1174:	09 c0       	rjmp	.+18     	; 0x1188 <vfprintf+0x314>
    1176:	a2 fe       	sbrs	r10, 2
    1178:	06 c0       	rjmp	.+12     	; 0x1186 <vfprintf+0x312>
    117a:	b3 94       	inc	r11
    117c:	b3 94       	inc	r11
    117e:	04 c0       	rjmp	.+8      	; 0x1188 <vfprintf+0x314>
    1180:	8a 2d       	mov	r24, r10
    1182:	86 78       	andi	r24, 0x86	; 134
    1184:	09 f0       	breq	.+2      	; 0x1188 <vfprintf+0x314>
    1186:	b3 94       	inc	r11
    1188:	a3 fc       	sbrc	r10, 3
    118a:	10 c0       	rjmp	.+32     	; 0x11ac <vfprintf+0x338>
    118c:	a0 fe       	sbrs	r10, 0
    118e:	06 c0       	rjmp	.+12     	; 0x119c <vfprintf+0x328>
    1190:	b2 14       	cp	r11, r2
    1192:	80 f4       	brcc	.+32     	; 0x11b4 <vfprintf+0x340>
    1194:	28 0c       	add	r2, r8
    1196:	92 2c       	mov	r9, r2
    1198:	9b 18       	sub	r9, r11
    119a:	0d c0       	rjmp	.+26     	; 0x11b6 <vfprintf+0x342>
    119c:	b2 14       	cp	r11, r2
    119e:	58 f4       	brcc	.+22     	; 0x11b6 <vfprintf+0x342>
    11a0:	b6 01       	movw	r22, r12
    11a2:	80 e2       	ldi	r24, 0x20	; 32
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	b5 d1       	rcall	.+874    	; 0x1512 <fputc>
    11a8:	b3 94       	inc	r11
    11aa:	f8 cf       	rjmp	.-16     	; 0x119c <vfprintf+0x328>
    11ac:	b2 14       	cp	r11, r2
    11ae:	18 f4       	brcc	.+6      	; 0x11b6 <vfprintf+0x342>
    11b0:	2b 18       	sub	r2, r11
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <vfprintf+0x344>
    11b4:	98 2c       	mov	r9, r8
    11b6:	21 2c       	mov	r2, r1
    11b8:	a4 fe       	sbrs	r10, 4
    11ba:	0f c0       	rjmp	.+30     	; 0x11da <vfprintf+0x366>
    11bc:	b6 01       	movw	r22, r12
    11be:	80 e3       	ldi	r24, 0x30	; 48
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	a7 d1       	rcall	.+846    	; 0x1512 <fputc>
    11c4:	a2 fe       	sbrs	r10, 2
    11c6:	16 c0       	rjmp	.+44     	; 0x11f4 <vfprintf+0x380>
    11c8:	a1 fc       	sbrc	r10, 1
    11ca:	03 c0       	rjmp	.+6      	; 0x11d2 <vfprintf+0x35e>
    11cc:	88 e7       	ldi	r24, 0x78	; 120
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <vfprintf+0x362>
    11d2:	88 e5       	ldi	r24, 0x58	; 88
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	b6 01       	movw	r22, r12
    11d8:	0c c0       	rjmp	.+24     	; 0x11f2 <vfprintf+0x37e>
    11da:	8a 2d       	mov	r24, r10
    11dc:	86 78       	andi	r24, 0x86	; 134
    11de:	51 f0       	breq	.+20     	; 0x11f4 <vfprintf+0x380>
    11e0:	a1 fe       	sbrs	r10, 1
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <vfprintf+0x374>
    11e4:	8b e2       	ldi	r24, 0x2B	; 43
    11e6:	01 c0       	rjmp	.+2      	; 0x11ea <vfprintf+0x376>
    11e8:	80 e2       	ldi	r24, 0x20	; 32
    11ea:	a7 fc       	sbrc	r10, 7
    11ec:	8d e2       	ldi	r24, 0x2D	; 45
    11ee:	b6 01       	movw	r22, r12
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	8f d1       	rcall	.+798    	; 0x1512 <fputc>
    11f4:	89 14       	cp	r8, r9
    11f6:	30 f4       	brcc	.+12     	; 0x1204 <vfprintf+0x390>
    11f8:	b6 01       	movw	r22, r12
    11fa:	80 e3       	ldi	r24, 0x30	; 48
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	89 d1       	rcall	.+786    	; 0x1512 <fputc>
    1200:	9a 94       	dec	r9
    1202:	f8 cf       	rjmp	.-16     	; 0x11f4 <vfprintf+0x380>
    1204:	8a 94       	dec	r8
    1206:	f3 01       	movw	r30, r6
    1208:	e8 0d       	add	r30, r8
    120a:	f1 1d       	adc	r31, r1
    120c:	80 81       	ld	r24, Z
    120e:	b6 01       	movw	r22, r12
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	7f d1       	rcall	.+766    	; 0x1512 <fputc>
    1214:	81 10       	cpse	r8, r1
    1216:	f6 cf       	rjmp	.-20     	; 0x1204 <vfprintf+0x390>
    1218:	22 20       	and	r2, r2
    121a:	09 f4       	brne	.+2      	; 0x121e <vfprintf+0x3aa>
    121c:	4e ce       	rjmp	.-868    	; 0xeba <vfprintf+0x46>
    121e:	b6 01       	movw	r22, r12
    1220:	80 e2       	ldi	r24, 0x20	; 32
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	76 d1       	rcall	.+748    	; 0x1512 <fputc>
    1226:	2a 94       	dec	r2
    1228:	f7 cf       	rjmp	.-18     	; 0x1218 <vfprintf+0x3a4>
    122a:	f6 01       	movw	r30, r12
    122c:	86 81       	ldd	r24, Z+6	; 0x06
    122e:	97 81       	ldd	r25, Z+7	; 0x07
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <vfprintf+0x3c2>
    1232:	8f ef       	ldi	r24, 0xFF	; 255
    1234:	9f ef       	ldi	r25, 0xFF	; 255
    1236:	2b 96       	adiw	r28, 0x0b	; 11
    1238:	cd bf       	out	0x3d, r28	; 61
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	1f 91       	pop	r17
    1242:	0f 91       	pop	r16
    1244:	ff 90       	pop	r15
    1246:	ef 90       	pop	r14
    1248:	df 90       	pop	r13
    124a:	cf 90       	pop	r12
    124c:	bf 90       	pop	r11
    124e:	af 90       	pop	r10
    1250:	9f 90       	pop	r9
    1252:	8f 90       	pop	r8
    1254:	7f 90       	pop	r7
    1256:	6f 90       	pop	r6
    1258:	5f 90       	pop	r5
    125a:	4f 90       	pop	r4
    125c:	3f 90       	pop	r3
    125e:	2f 90       	pop	r2
    1260:	08 95       	ret

00001262 <calloc>:
    1262:	0f 93       	push	r16
    1264:	1f 93       	push	r17
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	86 9f       	mul	r24, r22
    126c:	80 01       	movw	r16, r0
    126e:	87 9f       	mul	r24, r23
    1270:	10 0d       	add	r17, r0
    1272:	96 9f       	mul	r25, r22
    1274:	10 0d       	add	r17, r0
    1276:	11 24       	eor	r1, r1
    1278:	c8 01       	movw	r24, r16
    127a:	0d d0       	rcall	.+26     	; 0x1296 <malloc>
    127c:	ec 01       	movw	r28, r24
    127e:	00 97       	sbiw	r24, 0x00	; 0
    1280:	21 f0       	breq	.+8      	; 0x128a <calloc+0x28>
    1282:	a8 01       	movw	r20, r16
    1284:	60 e0       	ldi	r22, 0x00	; 0
    1286:	70 e0       	ldi	r23, 0x00	; 0
    1288:	32 d1       	rcall	.+612    	; 0x14ee <memset>
    128a:	ce 01       	movw	r24, r28
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	1f 91       	pop	r17
    1292:	0f 91       	pop	r16
    1294:	08 95       	ret

00001296 <malloc>:
    1296:	0f 93       	push	r16
    1298:	1f 93       	push	r17
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	82 30       	cpi	r24, 0x02	; 2
    12a0:	91 05       	cpc	r25, r1
    12a2:	10 f4       	brcc	.+4      	; 0x12a8 <malloc+0x12>
    12a4:	82 e0       	ldi	r24, 0x02	; 2
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	e0 91 30 20 	lds	r30, 0x2030	; 0x802030 <__flp>
    12ac:	f0 91 31 20 	lds	r31, 0x2031	; 0x802031 <__flp+0x1>
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	a0 e0       	ldi	r26, 0x00	; 0
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	30 97       	sbiw	r30, 0x00	; 0
    12ba:	19 f1       	breq	.+70     	; 0x1302 <malloc+0x6c>
    12bc:	40 81       	ld	r20, Z
    12be:	51 81       	ldd	r21, Z+1	; 0x01
    12c0:	02 81       	ldd	r16, Z+2	; 0x02
    12c2:	13 81       	ldd	r17, Z+3	; 0x03
    12c4:	48 17       	cp	r20, r24
    12c6:	59 07       	cpc	r21, r25
    12c8:	c8 f0       	brcs	.+50     	; 0x12fc <malloc+0x66>
    12ca:	84 17       	cp	r24, r20
    12cc:	95 07       	cpc	r25, r21
    12ce:	69 f4       	brne	.+26     	; 0x12ea <malloc+0x54>
    12d0:	10 97       	sbiw	r26, 0x00	; 0
    12d2:	31 f0       	breq	.+12     	; 0x12e0 <malloc+0x4a>
    12d4:	12 96       	adiw	r26, 0x02	; 2
    12d6:	0c 93       	st	X, r16
    12d8:	12 97       	sbiw	r26, 0x02	; 2
    12da:	13 96       	adiw	r26, 0x03	; 3
    12dc:	1c 93       	st	X, r17
    12de:	27 c0       	rjmp	.+78     	; 0x132e <malloc+0x98>
    12e0:	00 93 30 20 	sts	0x2030, r16	; 0x802030 <__flp>
    12e4:	10 93 31 20 	sts	0x2031, r17	; 0x802031 <__flp+0x1>
    12e8:	22 c0       	rjmp	.+68     	; 0x132e <malloc+0x98>
    12ea:	21 15       	cp	r18, r1
    12ec:	31 05       	cpc	r19, r1
    12ee:	19 f0       	breq	.+6      	; 0x12f6 <malloc+0x60>
    12f0:	42 17       	cp	r20, r18
    12f2:	53 07       	cpc	r21, r19
    12f4:	18 f4       	brcc	.+6      	; 0x12fc <malloc+0x66>
    12f6:	9a 01       	movw	r18, r20
    12f8:	bd 01       	movw	r22, r26
    12fa:	ef 01       	movw	r28, r30
    12fc:	df 01       	movw	r26, r30
    12fe:	f8 01       	movw	r30, r16
    1300:	db cf       	rjmp	.-74     	; 0x12b8 <malloc+0x22>
    1302:	21 15       	cp	r18, r1
    1304:	31 05       	cpc	r19, r1
    1306:	f9 f0       	breq	.+62     	; 0x1346 <malloc+0xb0>
    1308:	28 1b       	sub	r18, r24
    130a:	39 0b       	sbc	r19, r25
    130c:	24 30       	cpi	r18, 0x04	; 4
    130e:	31 05       	cpc	r19, r1
    1310:	80 f4       	brcc	.+32     	; 0x1332 <malloc+0x9c>
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	9b 81       	ldd	r25, Y+3	; 0x03
    1316:	61 15       	cp	r22, r1
    1318:	71 05       	cpc	r23, r1
    131a:	21 f0       	breq	.+8      	; 0x1324 <malloc+0x8e>
    131c:	fb 01       	movw	r30, r22
    131e:	82 83       	std	Z+2, r24	; 0x02
    1320:	93 83       	std	Z+3, r25	; 0x03
    1322:	04 c0       	rjmp	.+8      	; 0x132c <malloc+0x96>
    1324:	80 93 30 20 	sts	0x2030, r24	; 0x802030 <__flp>
    1328:	90 93 31 20 	sts	0x2031, r25	; 0x802031 <__flp+0x1>
    132c:	fe 01       	movw	r30, r28
    132e:	32 96       	adiw	r30, 0x02	; 2
    1330:	44 c0       	rjmp	.+136    	; 0x13ba <malloc+0x124>
    1332:	fe 01       	movw	r30, r28
    1334:	e2 0f       	add	r30, r18
    1336:	f3 1f       	adc	r31, r19
    1338:	81 93       	st	Z+, r24
    133a:	91 93       	st	Z+, r25
    133c:	22 50       	subi	r18, 0x02	; 2
    133e:	31 09       	sbc	r19, r1
    1340:	28 83       	st	Y, r18
    1342:	39 83       	std	Y+1, r19	; 0x01
    1344:	3a c0       	rjmp	.+116    	; 0x13ba <malloc+0x124>
    1346:	20 91 2e 20 	lds	r18, 0x202E	; 0x80202e <__brkval>
    134a:	30 91 2f 20 	lds	r19, 0x202F	; 0x80202f <__brkval+0x1>
    134e:	23 2b       	or	r18, r19
    1350:	41 f4       	brne	.+16     	; 0x1362 <malloc+0xcc>
    1352:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    1356:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    135a:	20 93 2e 20 	sts	0x202E, r18	; 0x80202e <__brkval>
    135e:	30 93 2f 20 	sts	0x202F, r19	; 0x80202f <__brkval+0x1>
    1362:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    1366:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    136a:	21 15       	cp	r18, r1
    136c:	31 05       	cpc	r19, r1
    136e:	41 f4       	brne	.+16     	; 0x1380 <malloc+0xea>
    1370:	2d b7       	in	r18, 0x3d	; 61
    1372:	3e b7       	in	r19, 0x3e	; 62
    1374:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    1378:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    137c:	24 1b       	sub	r18, r20
    137e:	35 0b       	sbc	r19, r21
    1380:	e0 91 2e 20 	lds	r30, 0x202E	; 0x80202e <__brkval>
    1384:	f0 91 2f 20 	lds	r31, 0x202F	; 0x80202f <__brkval+0x1>
    1388:	e2 17       	cp	r30, r18
    138a:	f3 07       	cpc	r31, r19
    138c:	a0 f4       	brcc	.+40     	; 0x13b6 <malloc+0x120>
    138e:	2e 1b       	sub	r18, r30
    1390:	3f 0b       	sbc	r19, r31
    1392:	28 17       	cp	r18, r24
    1394:	39 07       	cpc	r19, r25
    1396:	78 f0       	brcs	.+30     	; 0x13b6 <malloc+0x120>
    1398:	ac 01       	movw	r20, r24
    139a:	4e 5f       	subi	r20, 0xFE	; 254
    139c:	5f 4f       	sbci	r21, 0xFF	; 255
    139e:	24 17       	cp	r18, r20
    13a0:	35 07       	cpc	r19, r21
    13a2:	48 f0       	brcs	.+18     	; 0x13b6 <malloc+0x120>
    13a4:	4e 0f       	add	r20, r30
    13a6:	5f 1f       	adc	r21, r31
    13a8:	40 93 2e 20 	sts	0x202E, r20	; 0x80202e <__brkval>
    13ac:	50 93 2f 20 	sts	0x202F, r21	; 0x80202f <__brkval+0x1>
    13b0:	81 93       	st	Z+, r24
    13b2:	91 93       	st	Z+, r25
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <malloc+0x124>
    13b6:	e0 e0       	ldi	r30, 0x00	; 0
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	cf 01       	movw	r24, r30
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	1f 91       	pop	r17
    13c2:	0f 91       	pop	r16
    13c4:	08 95       	ret

000013c6 <free>:
    13c6:	cf 93       	push	r28
    13c8:	df 93       	push	r29
    13ca:	00 97       	sbiw	r24, 0x00	; 0
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <free+0xa>
    13ce:	81 c0       	rjmp	.+258    	; 0x14d2 <free+0x10c>
    13d0:	fc 01       	movw	r30, r24
    13d2:	32 97       	sbiw	r30, 0x02	; 2
    13d4:	12 82       	std	Z+2, r1	; 0x02
    13d6:	13 82       	std	Z+3, r1	; 0x03
    13d8:	a0 91 30 20 	lds	r26, 0x2030	; 0x802030 <__flp>
    13dc:	b0 91 31 20 	lds	r27, 0x2031	; 0x802031 <__flp+0x1>
    13e0:	10 97       	sbiw	r26, 0x00	; 0
    13e2:	81 f4       	brne	.+32     	; 0x1404 <free+0x3e>
    13e4:	20 81       	ld	r18, Z
    13e6:	31 81       	ldd	r19, Z+1	; 0x01
    13e8:	82 0f       	add	r24, r18
    13ea:	93 1f       	adc	r25, r19
    13ec:	20 91 2e 20 	lds	r18, 0x202E	; 0x80202e <__brkval>
    13f0:	30 91 2f 20 	lds	r19, 0x202F	; 0x80202f <__brkval+0x1>
    13f4:	28 17       	cp	r18, r24
    13f6:	39 07       	cpc	r19, r25
    13f8:	51 f5       	brne	.+84     	; 0x144e <free+0x88>
    13fa:	e0 93 2e 20 	sts	0x202E, r30	; 0x80202e <__brkval>
    13fe:	f0 93 2f 20 	sts	0x202F, r31	; 0x80202f <__brkval+0x1>
    1402:	67 c0       	rjmp	.+206    	; 0x14d2 <free+0x10c>
    1404:	ed 01       	movw	r28, r26
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	ce 17       	cp	r28, r30
    140c:	df 07       	cpc	r29, r31
    140e:	40 f4       	brcc	.+16     	; 0x1420 <free+0x5a>
    1410:	4a 81       	ldd	r20, Y+2	; 0x02
    1412:	5b 81       	ldd	r21, Y+3	; 0x03
    1414:	9e 01       	movw	r18, r28
    1416:	41 15       	cp	r20, r1
    1418:	51 05       	cpc	r21, r1
    141a:	f1 f0       	breq	.+60     	; 0x1458 <free+0x92>
    141c:	ea 01       	movw	r28, r20
    141e:	f5 cf       	rjmp	.-22     	; 0x140a <free+0x44>
    1420:	c2 83       	std	Z+2, r28	; 0x02
    1422:	d3 83       	std	Z+3, r29	; 0x03
    1424:	40 81       	ld	r20, Z
    1426:	51 81       	ldd	r21, Z+1	; 0x01
    1428:	84 0f       	add	r24, r20
    142a:	95 1f       	adc	r25, r21
    142c:	c8 17       	cp	r28, r24
    142e:	d9 07       	cpc	r29, r25
    1430:	59 f4       	brne	.+22     	; 0x1448 <free+0x82>
    1432:	88 81       	ld	r24, Y
    1434:	99 81       	ldd	r25, Y+1	; 0x01
    1436:	84 0f       	add	r24, r20
    1438:	95 1f       	adc	r25, r21
    143a:	02 96       	adiw	r24, 0x02	; 2
    143c:	80 83       	st	Z, r24
    143e:	91 83       	std	Z+1, r25	; 0x01
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	9b 81       	ldd	r25, Y+3	; 0x03
    1444:	82 83       	std	Z+2, r24	; 0x02
    1446:	93 83       	std	Z+3, r25	; 0x03
    1448:	21 15       	cp	r18, r1
    144a:	31 05       	cpc	r19, r1
    144c:	29 f4       	brne	.+10     	; 0x1458 <free+0x92>
    144e:	e0 93 30 20 	sts	0x2030, r30	; 0x802030 <__flp>
    1452:	f0 93 31 20 	sts	0x2031, r31	; 0x802031 <__flp+0x1>
    1456:	3d c0       	rjmp	.+122    	; 0x14d2 <free+0x10c>
    1458:	e9 01       	movw	r28, r18
    145a:	ea 83       	std	Y+2, r30	; 0x02
    145c:	fb 83       	std	Y+3, r31	; 0x03
    145e:	49 91       	ld	r20, Y+
    1460:	59 91       	ld	r21, Y+
    1462:	c4 0f       	add	r28, r20
    1464:	d5 1f       	adc	r29, r21
    1466:	ec 17       	cp	r30, r28
    1468:	fd 07       	cpc	r31, r29
    146a:	61 f4       	brne	.+24     	; 0x1484 <free+0xbe>
    146c:	80 81       	ld	r24, Z
    146e:	91 81       	ldd	r25, Z+1	; 0x01
    1470:	84 0f       	add	r24, r20
    1472:	95 1f       	adc	r25, r21
    1474:	02 96       	adiw	r24, 0x02	; 2
    1476:	e9 01       	movw	r28, r18
    1478:	88 83       	st	Y, r24
    147a:	99 83       	std	Y+1, r25	; 0x01
    147c:	82 81       	ldd	r24, Z+2	; 0x02
    147e:	93 81       	ldd	r25, Z+3	; 0x03
    1480:	8a 83       	std	Y+2, r24	; 0x02
    1482:	9b 83       	std	Y+3, r25	; 0x03
    1484:	e0 e0       	ldi	r30, 0x00	; 0
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	12 96       	adiw	r26, 0x02	; 2
    148a:	8d 91       	ld	r24, X+
    148c:	9c 91       	ld	r25, X
    148e:	13 97       	sbiw	r26, 0x03	; 3
    1490:	00 97       	sbiw	r24, 0x00	; 0
    1492:	19 f0       	breq	.+6      	; 0x149a <free+0xd4>
    1494:	fd 01       	movw	r30, r26
    1496:	dc 01       	movw	r26, r24
    1498:	f7 cf       	rjmp	.-18     	; 0x1488 <free+0xc2>
    149a:	8d 91       	ld	r24, X+
    149c:	9c 91       	ld	r25, X
    149e:	11 97       	sbiw	r26, 0x01	; 1
    14a0:	9d 01       	movw	r18, r26
    14a2:	2e 5f       	subi	r18, 0xFE	; 254
    14a4:	3f 4f       	sbci	r19, 0xFF	; 255
    14a6:	82 0f       	add	r24, r18
    14a8:	93 1f       	adc	r25, r19
    14aa:	20 91 2e 20 	lds	r18, 0x202E	; 0x80202e <__brkval>
    14ae:	30 91 2f 20 	lds	r19, 0x202F	; 0x80202f <__brkval+0x1>
    14b2:	28 17       	cp	r18, r24
    14b4:	39 07       	cpc	r19, r25
    14b6:	69 f4       	brne	.+26     	; 0x14d2 <free+0x10c>
    14b8:	30 97       	sbiw	r30, 0x00	; 0
    14ba:	29 f4       	brne	.+10     	; 0x14c6 <free+0x100>
    14bc:	10 92 30 20 	sts	0x2030, r1	; 0x802030 <__flp>
    14c0:	10 92 31 20 	sts	0x2031, r1	; 0x802031 <__flp+0x1>
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <free+0x104>
    14c6:	12 82       	std	Z+2, r1	; 0x02
    14c8:	13 82       	std	Z+3, r1	; 0x03
    14ca:	a0 93 2e 20 	sts	0x202E, r26	; 0x80202e <__brkval>
    14ce:	b0 93 2f 20 	sts	0x202F, r27	; 0x80202f <__brkval+0x1>
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	08 95       	ret

000014d8 <strnlen_P>:
    14d8:	fc 01       	movw	r30, r24
    14da:	05 90       	lpm	r0, Z+
    14dc:	61 50       	subi	r22, 0x01	; 1
    14de:	70 40       	sbci	r23, 0x00	; 0
    14e0:	01 10       	cpse	r0, r1
    14e2:	d8 f7       	brcc	.-10     	; 0x14da <strnlen_P+0x2>
    14e4:	80 95       	com	r24
    14e6:	90 95       	com	r25
    14e8:	8e 0f       	add	r24, r30
    14ea:	9f 1f       	adc	r25, r31
    14ec:	08 95       	ret

000014ee <memset>:
    14ee:	dc 01       	movw	r26, r24
    14f0:	01 c0       	rjmp	.+2      	; 0x14f4 <memset+0x6>
    14f2:	6d 93       	st	X+, r22
    14f4:	41 50       	subi	r20, 0x01	; 1
    14f6:	50 40       	sbci	r21, 0x00	; 0
    14f8:	e0 f7       	brcc	.-8      	; 0x14f2 <memset+0x4>
    14fa:	08 95       	ret

000014fc <strnlen>:
    14fc:	fc 01       	movw	r30, r24
    14fe:	61 50       	subi	r22, 0x01	; 1
    1500:	70 40       	sbci	r23, 0x00	; 0
    1502:	01 90       	ld	r0, Z+
    1504:	01 10       	cpse	r0, r1
    1506:	d8 f7       	brcc	.-10     	; 0x14fe <strnlen+0x2>
    1508:	80 95       	com	r24
    150a:	90 95       	com	r25
    150c:	8e 0f       	add	r24, r30
    150e:	9f 1f       	adc	r25, r31
    1510:	08 95       	ret

00001512 <fputc>:
    1512:	0f 93       	push	r16
    1514:	1f 93       	push	r17
    1516:	cf 93       	push	r28
    1518:	df 93       	push	r29
    151a:	fb 01       	movw	r30, r22
    151c:	23 81       	ldd	r18, Z+3	; 0x03
    151e:	21 fd       	sbrc	r18, 1
    1520:	03 c0       	rjmp	.+6      	; 0x1528 <fputc+0x16>
    1522:	8f ef       	ldi	r24, 0xFF	; 255
    1524:	9f ef       	ldi	r25, 0xFF	; 255
    1526:	2c c0       	rjmp	.+88     	; 0x1580 <fputc+0x6e>
    1528:	22 ff       	sbrs	r18, 2
    152a:	16 c0       	rjmp	.+44     	; 0x1558 <fputc+0x46>
    152c:	46 81       	ldd	r20, Z+6	; 0x06
    152e:	57 81       	ldd	r21, Z+7	; 0x07
    1530:	24 81       	ldd	r18, Z+4	; 0x04
    1532:	35 81       	ldd	r19, Z+5	; 0x05
    1534:	42 17       	cp	r20, r18
    1536:	53 07       	cpc	r21, r19
    1538:	44 f4       	brge	.+16     	; 0x154a <fputc+0x38>
    153a:	a0 81       	ld	r26, Z
    153c:	b1 81       	ldd	r27, Z+1	; 0x01
    153e:	9d 01       	movw	r18, r26
    1540:	2f 5f       	subi	r18, 0xFF	; 255
    1542:	3f 4f       	sbci	r19, 0xFF	; 255
    1544:	20 83       	st	Z, r18
    1546:	31 83       	std	Z+1, r19	; 0x01
    1548:	8c 93       	st	X, r24
    154a:	26 81       	ldd	r18, Z+6	; 0x06
    154c:	37 81       	ldd	r19, Z+7	; 0x07
    154e:	2f 5f       	subi	r18, 0xFF	; 255
    1550:	3f 4f       	sbci	r19, 0xFF	; 255
    1552:	26 83       	std	Z+6, r18	; 0x06
    1554:	37 83       	std	Z+7, r19	; 0x07
    1556:	14 c0       	rjmp	.+40     	; 0x1580 <fputc+0x6e>
    1558:	8b 01       	movw	r16, r22
    155a:	ec 01       	movw	r28, r24
    155c:	fb 01       	movw	r30, r22
    155e:	00 84       	ldd	r0, Z+8	; 0x08
    1560:	f1 85       	ldd	r31, Z+9	; 0x09
    1562:	e0 2d       	mov	r30, r0
    1564:	19 95       	eicall
    1566:	89 2b       	or	r24, r25
    1568:	e1 f6       	brne	.-72     	; 0x1522 <fputc+0x10>
    156a:	d8 01       	movw	r26, r16
    156c:	16 96       	adiw	r26, 0x06	; 6
    156e:	8d 91       	ld	r24, X+
    1570:	9c 91       	ld	r25, X
    1572:	17 97       	sbiw	r26, 0x07	; 7
    1574:	01 96       	adiw	r24, 0x01	; 1
    1576:	16 96       	adiw	r26, 0x06	; 6
    1578:	8d 93       	st	X+, r24
    157a:	9c 93       	st	X, r25
    157c:	17 97       	sbiw	r26, 0x07	; 7
    157e:	ce 01       	movw	r24, r28
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	1f 91       	pop	r17
    1586:	0f 91       	pop	r16
    1588:	08 95       	ret

0000158a <__ultoa_invert>:
    158a:	fa 01       	movw	r30, r20
    158c:	aa 27       	eor	r26, r26
    158e:	28 30       	cpi	r18, 0x08	; 8
    1590:	51 f1       	breq	.+84     	; 0x15e6 <__ultoa_invert+0x5c>
    1592:	20 31       	cpi	r18, 0x10	; 16
    1594:	81 f1       	breq	.+96     	; 0x15f6 <__ultoa_invert+0x6c>
    1596:	e8 94       	clt
    1598:	6f 93       	push	r22
    159a:	6e 7f       	andi	r22, 0xFE	; 254
    159c:	6e 5f       	subi	r22, 0xFE	; 254
    159e:	7f 4f       	sbci	r23, 0xFF	; 255
    15a0:	8f 4f       	sbci	r24, 0xFF	; 255
    15a2:	9f 4f       	sbci	r25, 0xFF	; 255
    15a4:	af 4f       	sbci	r26, 0xFF	; 255
    15a6:	b1 e0       	ldi	r27, 0x01	; 1
    15a8:	3e d0       	rcall	.+124    	; 0x1626 <__ultoa_invert+0x9c>
    15aa:	b4 e0       	ldi	r27, 0x04	; 4
    15ac:	3c d0       	rcall	.+120    	; 0x1626 <__ultoa_invert+0x9c>
    15ae:	67 0f       	add	r22, r23
    15b0:	78 1f       	adc	r23, r24
    15b2:	89 1f       	adc	r24, r25
    15b4:	9a 1f       	adc	r25, r26
    15b6:	a1 1d       	adc	r26, r1
    15b8:	68 0f       	add	r22, r24
    15ba:	79 1f       	adc	r23, r25
    15bc:	8a 1f       	adc	r24, r26
    15be:	91 1d       	adc	r25, r1
    15c0:	a1 1d       	adc	r26, r1
    15c2:	6a 0f       	add	r22, r26
    15c4:	71 1d       	adc	r23, r1
    15c6:	81 1d       	adc	r24, r1
    15c8:	91 1d       	adc	r25, r1
    15ca:	a1 1d       	adc	r26, r1
    15cc:	20 d0       	rcall	.+64     	; 0x160e <__ultoa_invert+0x84>
    15ce:	09 f4       	brne	.+2      	; 0x15d2 <__ultoa_invert+0x48>
    15d0:	68 94       	set
    15d2:	3f 91       	pop	r19
    15d4:	2a e0       	ldi	r18, 0x0A	; 10
    15d6:	26 9f       	mul	r18, r22
    15d8:	11 24       	eor	r1, r1
    15da:	30 19       	sub	r19, r0
    15dc:	30 5d       	subi	r19, 0xD0	; 208
    15de:	31 93       	st	Z+, r19
    15e0:	de f6       	brtc	.-74     	; 0x1598 <__ultoa_invert+0xe>
    15e2:	cf 01       	movw	r24, r30
    15e4:	08 95       	ret
    15e6:	46 2f       	mov	r20, r22
    15e8:	47 70       	andi	r20, 0x07	; 7
    15ea:	40 5d       	subi	r20, 0xD0	; 208
    15ec:	41 93       	st	Z+, r20
    15ee:	b3 e0       	ldi	r27, 0x03	; 3
    15f0:	0f d0       	rcall	.+30     	; 0x1610 <__ultoa_invert+0x86>
    15f2:	c9 f7       	brne	.-14     	; 0x15e6 <__ultoa_invert+0x5c>
    15f4:	f6 cf       	rjmp	.-20     	; 0x15e2 <__ultoa_invert+0x58>
    15f6:	46 2f       	mov	r20, r22
    15f8:	4f 70       	andi	r20, 0x0F	; 15
    15fa:	40 5d       	subi	r20, 0xD0	; 208
    15fc:	4a 33       	cpi	r20, 0x3A	; 58
    15fe:	18 f0       	brcs	.+6      	; 0x1606 <__ultoa_invert+0x7c>
    1600:	49 5d       	subi	r20, 0xD9	; 217
    1602:	31 fd       	sbrc	r19, 1
    1604:	40 52       	subi	r20, 0x20	; 32
    1606:	41 93       	st	Z+, r20
    1608:	02 d0       	rcall	.+4      	; 0x160e <__ultoa_invert+0x84>
    160a:	a9 f7       	brne	.-22     	; 0x15f6 <__ultoa_invert+0x6c>
    160c:	ea cf       	rjmp	.-44     	; 0x15e2 <__ultoa_invert+0x58>
    160e:	b4 e0       	ldi	r27, 0x04	; 4
    1610:	a6 95       	lsr	r26
    1612:	97 95       	ror	r25
    1614:	87 95       	ror	r24
    1616:	77 95       	ror	r23
    1618:	67 95       	ror	r22
    161a:	ba 95       	dec	r27
    161c:	c9 f7       	brne	.-14     	; 0x1610 <__ultoa_invert+0x86>
    161e:	00 97       	sbiw	r24, 0x00	; 0
    1620:	61 05       	cpc	r22, r1
    1622:	71 05       	cpc	r23, r1
    1624:	08 95       	ret
    1626:	9b 01       	movw	r18, r22
    1628:	ac 01       	movw	r20, r24
    162a:	0a 2e       	mov	r0, r26
    162c:	06 94       	lsr	r0
    162e:	57 95       	ror	r21
    1630:	47 95       	ror	r20
    1632:	37 95       	ror	r19
    1634:	27 95       	ror	r18
    1636:	ba 95       	dec	r27
    1638:	c9 f7       	brne	.-14     	; 0x162c <__ultoa_invert+0xa2>
    163a:	62 0f       	add	r22, r18
    163c:	73 1f       	adc	r23, r19
    163e:	84 1f       	adc	r24, r20
    1640:	95 1f       	adc	r25, r21
    1642:	a0 1d       	adc	r26, r0
    1644:	08 95       	ret

00001646 <_exit>:
    1646:	f8 94       	cli

00001648 <__stop_program>:
    1648:	ff cf       	rjmp	.-2      	; 0x1648 <__stop_program>
