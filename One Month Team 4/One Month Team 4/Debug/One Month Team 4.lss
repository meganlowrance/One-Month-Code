
One Month Team 4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001038  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00802000  00001038  000010cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080200e  0080200e  000010da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000110c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  0000114c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d843  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004e5b  00000000  00000000  0000eb8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000420e  00000000  00000000  000139ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007b8  00000000  00000000  00017bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00032632  00000000  00000000  000183b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002403  00000000  00000000  0004a9e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  0004cde5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b3e1  00000000  00000000  0004cf9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	1f c1       	rjmp	.+574    	; 0x244 <__bad_interrupt>
       6:	00 00       	nop
       8:	1d c1       	rjmp	.+570    	; 0x244 <__bad_interrupt>
       a:	00 00       	nop
       c:	1b c1       	rjmp	.+566    	; 0x244 <__bad_interrupt>
       e:	00 00       	nop
      10:	19 c1       	rjmp	.+562    	; 0x244 <__bad_interrupt>
      12:	00 00       	nop
      14:	17 c1       	rjmp	.+558    	; 0x244 <__bad_interrupt>
      16:	00 00       	nop
      18:	15 c1       	rjmp	.+554    	; 0x244 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	13 c1       	rjmp	.+550    	; 0x244 <__bad_interrupt>
      1e:	00 00       	nop
      20:	11 c1       	rjmp	.+546    	; 0x244 <__bad_interrupt>
      22:	00 00       	nop
      24:	0f c1       	rjmp	.+542    	; 0x244 <__bad_interrupt>
      26:	00 00       	nop
      28:	0d c1       	rjmp	.+538    	; 0x244 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0b c1       	rjmp	.+534    	; 0x244 <__bad_interrupt>
      2e:	00 00       	nop
      30:	09 c1       	rjmp	.+530    	; 0x244 <__bad_interrupt>
      32:	00 00       	nop
      34:	07 c1       	rjmp	.+526    	; 0x244 <__bad_interrupt>
      36:	00 00       	nop
      38:	05 c1       	rjmp	.+522    	; 0x244 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	03 c1       	rjmp	.+518    	; 0x244 <__bad_interrupt>
      3e:	00 00       	nop
      40:	01 c1       	rjmp	.+514    	; 0x244 <__bad_interrupt>
      42:	00 00       	nop
      44:	ff c0       	rjmp	.+510    	; 0x244 <__bad_interrupt>
      46:	00 00       	nop
      48:	fd c0       	rjmp	.+506    	; 0x244 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fb c0       	rjmp	.+502    	; 0x244 <__bad_interrupt>
      4e:	00 00       	nop
      50:	f9 c0       	rjmp	.+498    	; 0x244 <__bad_interrupt>
      52:	00 00       	nop
      54:	f7 c0       	rjmp	.+494    	; 0x244 <__bad_interrupt>
      56:	00 00       	nop
      58:	f5 c0       	rjmp	.+490    	; 0x244 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f3 c0       	rjmp	.+486    	; 0x244 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f1 c0       	rjmp	.+482    	; 0x244 <__bad_interrupt>
      62:	00 00       	nop
      64:	ef c0       	rjmp	.+478    	; 0x244 <__bad_interrupt>
      66:	00 00       	nop
      68:	ed c0       	rjmp	.+474    	; 0x244 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	eb c0       	rjmp	.+470    	; 0x244 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e9 c0       	rjmp	.+466    	; 0x244 <__bad_interrupt>
      72:	00 00       	nop
      74:	e7 c0       	rjmp	.+462    	; 0x244 <__bad_interrupt>
      76:	00 00       	nop
      78:	e5 c0       	rjmp	.+458    	; 0x244 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e3 c0       	rjmp	.+454    	; 0x244 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e1 c0       	rjmp	.+450    	; 0x244 <__bad_interrupt>
      82:	00 00       	nop
      84:	df c0       	rjmp	.+446    	; 0x244 <__bad_interrupt>
      86:	00 00       	nop
      88:	dd c0       	rjmp	.+442    	; 0x244 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	db c0       	rjmp	.+438    	; 0x244 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d9 c0       	rjmp	.+434    	; 0x244 <__bad_interrupt>
      92:	00 00       	nop
      94:	d7 c0       	rjmp	.+430    	; 0x244 <__bad_interrupt>
      96:	00 00       	nop
      98:	d5 c0       	rjmp	.+426    	; 0x244 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	5f c4       	rjmp	.+2238   	; 0x95c <__vector_39>
      9e:	00 00       	nop
      a0:	9a c4       	rjmp	.+2356   	; 0x9d6 <__vector_40>
      a2:	00 00       	nop
      a4:	d5 c4       	rjmp	.+2474   	; 0xa50 <__vector_41>
      a6:	00 00       	nop
      a8:	10 c5       	rjmp	.+2592   	; 0xaca <__vector_42>
      aa:	00 00       	nop
      ac:	cb c0       	rjmp	.+406    	; 0x244 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c9 c0       	rjmp	.+402    	; 0x244 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c7 c0       	rjmp	.+398    	; 0x244 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c5 c0       	rjmp	.+394    	; 0x244 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c3 c0       	rjmp	.+390    	; 0x244 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c1 c0       	rjmp	.+386    	; 0x244 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	bf c0       	rjmp	.+382    	; 0x244 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	bd c0       	rjmp	.+378    	; 0x244 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bb c0       	rjmp	.+374    	; 0x244 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b9 c0       	rjmp	.+370    	; 0x244 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b7 c0       	rjmp	.+366    	; 0x244 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b5 c0       	rjmp	.+362    	; 0x244 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b3 c0       	rjmp	.+358    	; 0x244 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b1 c0       	rjmp	.+354    	; 0x244 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	af c0       	rjmp	.+350    	; 0x244 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ad c0       	rjmp	.+346    	; 0x244 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ab c0       	rjmp	.+342    	; 0x244 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a9 c0       	rjmp	.+338    	; 0x244 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a7 c0       	rjmp	.+334    	; 0x244 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a5 c0       	rjmp	.+330    	; 0x244 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a3 c0       	rjmp	.+326    	; 0x244 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a1 c0       	rjmp	.+322    	; 0x244 <__bad_interrupt>
     102:	00 00       	nop
     104:	9f c0       	rjmp	.+318    	; 0x244 <__bad_interrupt>
     106:	00 00       	nop
     108:	9d c0       	rjmp	.+314    	; 0x244 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9b c0       	rjmp	.+310    	; 0x244 <__bad_interrupt>
     10e:	00 00       	nop
     110:	99 c0       	rjmp	.+306    	; 0x244 <__bad_interrupt>
     112:	00 00       	nop
     114:	97 c0       	rjmp	.+302    	; 0x244 <__bad_interrupt>
     116:	00 00       	nop
     118:	95 c0       	rjmp	.+298    	; 0x244 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2b c3       	rjmp	.+1622   	; 0x774 <__vector_71>
     11e:	00 00       	nop
     120:	66 c3       	rjmp	.+1740   	; 0x7ee <__vector_72>
     122:	00 00       	nop
     124:	a1 c3       	rjmp	.+1858   	; 0x868 <__vector_73>
     126:	00 00       	nop
     128:	dc c3       	rjmp	.+1976   	; 0x8e2 <__vector_74>
     12a:	00 00       	nop
     12c:	8b c0       	rjmp	.+278    	; 0x244 <__bad_interrupt>
     12e:	00 00       	nop
     130:	89 c0       	rjmp	.+274    	; 0x244 <__bad_interrupt>
     132:	00 00       	nop
     134:	87 c0       	rjmp	.+270    	; 0x244 <__bad_interrupt>
     136:	00 00       	nop
     138:	85 c0       	rjmp	.+266    	; 0x244 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	83 c0       	rjmp	.+262    	; 0x244 <__bad_interrupt>
     13e:	00 00       	nop
     140:	81 c0       	rjmp	.+258    	; 0x244 <__bad_interrupt>
     142:	00 00       	nop
     144:	7f c0       	rjmp	.+254    	; 0x244 <__bad_interrupt>
     146:	00 00       	nop
     148:	7d c0       	rjmp	.+250    	; 0x244 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7b c0       	rjmp	.+246    	; 0x244 <__bad_interrupt>
     14e:	00 00       	nop
     150:	79 c0       	rjmp	.+242    	; 0x244 <__bad_interrupt>
     152:	00 00       	nop
     154:	77 c0       	rjmp	.+238    	; 0x244 <__bad_interrupt>
     156:	00 00       	nop
     158:	75 c0       	rjmp	.+234    	; 0x244 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	73 c0       	rjmp	.+230    	; 0x244 <__bad_interrupt>
     15e:	00 00       	nop
     160:	71 c0       	rjmp	.+226    	; 0x244 <__bad_interrupt>
     162:	00 00       	nop
     164:	6f c0       	rjmp	.+222    	; 0x244 <__bad_interrupt>
     166:	00 00       	nop
     168:	6d c0       	rjmp	.+218    	; 0x244 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6b c0       	rjmp	.+214    	; 0x244 <__bad_interrupt>
     16e:	00 00       	nop
     170:	69 c0       	rjmp	.+210    	; 0x244 <__bad_interrupt>
     172:	00 00       	nop
     174:	67 c0       	rjmp	.+206    	; 0x244 <__bad_interrupt>
     176:	00 00       	nop
     178:	65 c0       	rjmp	.+202    	; 0x244 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	63 c0       	rjmp	.+198    	; 0x244 <__bad_interrupt>
     17e:	00 00       	nop
     180:	61 c0       	rjmp	.+194    	; 0x244 <__bad_interrupt>
     182:	00 00       	nop
     184:	5f c0       	rjmp	.+190    	; 0x244 <__bad_interrupt>
     186:	00 00       	nop
     188:	5d c0       	rjmp	.+186    	; 0x244 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5b c0       	rjmp	.+182    	; 0x244 <__bad_interrupt>
     18e:	00 00       	nop
     190:	59 c0       	rjmp	.+178    	; 0x244 <__bad_interrupt>
     192:	00 00       	nop
     194:	57 c0       	rjmp	.+174    	; 0x244 <__bad_interrupt>
     196:	00 00       	nop
     198:	55 c0       	rjmp	.+170    	; 0x244 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	53 c0       	rjmp	.+166    	; 0x244 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	51 c0       	rjmp	.+162    	; 0x244 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4f c0       	rjmp	.+158    	; 0x244 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4d c0       	rjmp	.+154    	; 0x244 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4b c0       	rjmp	.+150    	; 0x244 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	49 c0       	rjmp	.+146    	; 0x244 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	47 c0       	rjmp	.+142    	; 0x244 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	45 c0       	rjmp	.+138    	; 0x244 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	43 c0       	rjmp	.+134    	; 0x244 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	41 c0       	rjmp	.+130    	; 0x244 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	3f c0       	rjmp	.+126    	; 0x244 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3d c0       	rjmp	.+122    	; 0x244 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3b c0       	rjmp	.+118    	; 0x244 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	39 c0       	rjmp	.+114    	; 0x244 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	37 c0       	rjmp	.+110    	; 0x244 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	35 c0       	rjmp	.+106    	; 0x244 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	33 c0       	rjmp	.+102    	; 0x244 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	31 c0       	rjmp	.+98     	; 0x244 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2f c0       	rjmp	.+94     	; 0x244 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2d c0       	rjmp	.+90     	; 0x244 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2b c0       	rjmp	.+86     	; 0x244 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	29 c0       	rjmp	.+82     	; 0x244 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	27 c0       	rjmp	.+78     	; 0x244 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	25 c0       	rjmp	.+74     	; 0x244 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	e8 e3       	ldi	r30, 0x38	; 56
     21c:	f0 e1       	ldi	r31, 0x10	; 16
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	ae 30       	cpi	r26, 0x0E	; 14
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	20 e2       	ldi	r18, 0x20	; 32
     232:	ae e0       	ldi	r26, 0x0E	; 14
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	a2 32       	cpi	r26, 0x22	; 34
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	2f d5       	rcall	.+2654   	; 0xca0 <main>
     242:	f8 c6       	rjmp	.+3568   	; 0x1034 <_exit>

00000244 <__bad_interrupt>:
     244:	dd ce       	rjmp	.-582    	; 0x0 <__vectors>

00000246 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	1f 92       	push	r1
     24c:	cd b7       	in	r28, 0x3d	; 61
     24e:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     250:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <stdio_base>
     254:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <stdio_base+0x1>
     258:	e0 91 0e 20 	lds	r30, 0x200E	; 0x80200e <__data_end>
     25c:	f0 91 0f 20 	lds	r31, 0x200F	; 0x80200f <__data_end+0x1>
     260:	be 01       	movw	r22, r28
     262:	6f 5f       	subi	r22, 0xFF	; 255
     264:	7f 4f       	sbci	r23, 0xFF	; 255
     266:	19 95       	eicall
	return c;
     268:	89 81       	ldd	r24, Y+1	; 0x01
}
     26a:	08 2e       	mov	r0, r24
     26c:	00 0c       	add	r0, r0
     26e:	99 0b       	sbc	r25, r25
     270:	0f 90       	pop	r0
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	08 95       	ret

00000278 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     278:	fc 01       	movw	r30, r24
     27a:	91 81       	ldd	r25, Z+1	; 0x01
     27c:	95 ff       	sbrs	r25, 5
     27e:	fd cf       	rjmp	.-6      	; 0x27a <usart_putchar+0x2>
     280:	60 83       	st	Z, r22
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	08 95       	ret

00000288 <usart_getchar>:
     288:	fc 01       	movw	r30, r24
     28a:	91 81       	ldd	r25, Z+1	; 0x01
     28c:	99 23       	and	r25, r25
     28e:	ec f7       	brge	.-6      	; 0x28a <usart_getchar+0x2>
     290:	80 81       	ld	r24, Z
     292:	08 95       	ret

00000294 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     294:	4f 92       	push	r4
     296:	5f 92       	push	r5
     298:	6f 92       	push	r6
     29a:	7f 92       	push	r7
     29c:	8f 92       	push	r8
     29e:	9f 92       	push	r9
     2a0:	af 92       	push	r10
     2a2:	bf 92       	push	r11
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	7c 01       	movw	r14, r24
     2b0:	4a 01       	movw	r8, r20
     2b2:	5b 01       	movw	r10, r22
     2b4:	28 01       	movw	r4, r16
     2b6:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     2b8:	fc 01       	movw	r30, r24
     2ba:	84 81       	ldd	r24, Z+4	; 0x04
     2bc:	82 ff       	sbrs	r24, 2
     2be:	16 c0       	rjmp	.+44     	; 0x2ec <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     2c0:	d9 01       	movw	r26, r18
     2c2:	c8 01       	movw	r24, r16
     2c4:	68 94       	set
     2c6:	12 f8       	bld	r1, 2
     2c8:	b6 95       	lsr	r27
     2ca:	a7 95       	ror	r26
     2cc:	97 95       	ror	r25
     2ce:	87 95       	ror	r24
     2d0:	16 94       	lsr	r1
     2d2:	d1 f7       	brne	.-12     	; 0x2c8 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     2d4:	b9 01       	movw	r22, r18
     2d6:	a8 01       	movw	r20, r16
     2d8:	03 2e       	mov	r0, r19
     2da:	36 e1       	ldi	r19, 0x16	; 22
     2dc:	76 95       	lsr	r23
     2de:	67 95       	ror	r22
     2e0:	57 95       	ror	r21
     2e2:	47 95       	ror	r20
     2e4:	3a 95       	dec	r19
     2e6:	d1 f7       	brne	.-12     	; 0x2dc <usart_set_baudrate+0x48>
     2e8:	30 2d       	mov	r19, r0
     2ea:	15 c0       	rjmp	.+42     	; 0x316 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     2ec:	d9 01       	movw	r26, r18
     2ee:	c8 01       	movw	r24, r16
     2f0:	68 94       	set
     2f2:	13 f8       	bld	r1, 3
     2f4:	b6 95       	lsr	r27
     2f6:	a7 95       	ror	r26
     2f8:	97 95       	ror	r25
     2fa:	87 95       	ror	r24
     2fc:	16 94       	lsr	r1
     2fe:	d1 f7       	brne	.-12     	; 0x2f4 <usart_set_baudrate+0x60>
		min_rate /= 2;
     300:	b9 01       	movw	r22, r18
     302:	a8 01       	movw	r20, r16
     304:	03 2e       	mov	r0, r19
     306:	37 e1       	ldi	r19, 0x17	; 23
     308:	76 95       	lsr	r23
     30a:	67 95       	ror	r22
     30c:	57 95       	ror	r21
     30e:	47 95       	ror	r20
     310:	3a 95       	dec	r19
     312:	d1 f7       	brne	.-12     	; 0x308 <usart_set_baudrate+0x74>
     314:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     316:	88 15       	cp	r24, r8
     318:	99 05       	cpc	r25, r9
     31a:	aa 05       	cpc	r26, r10
     31c:	bb 05       	cpc	r27, r11
     31e:	08 f4       	brcc	.+2      	; 0x322 <usart_set_baudrate+0x8e>
     320:	a2 c0       	rjmp	.+324    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     322:	84 16       	cp	r8, r20
     324:	95 06       	cpc	r9, r21
     326:	a6 06       	cpc	r10, r22
     328:	b7 06       	cpc	r11, r23
     32a:	08 f4       	brcc	.+2      	; 0x32e <usart_set_baudrate+0x9a>
     32c:	9e c0       	rjmp	.+316    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     32e:	f7 01       	movw	r30, r14
     330:	84 81       	ldd	r24, Z+4	; 0x04
     332:	82 fd       	sbrc	r24, 2
     334:	04 c0       	rjmp	.+8      	; 0x33e <usart_set_baudrate+0xaa>
		baud *= 2;
     336:	88 0c       	add	r8, r8
     338:	99 1c       	adc	r9, r9
     33a:	aa 1c       	adc	r10, r10
     33c:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     33e:	c3 01       	movw	r24, r6
     340:	b2 01       	movw	r22, r4
     342:	a5 01       	movw	r20, r10
     344:	94 01       	movw	r18, r8
     346:	b9 d4       	rcall	.+2418   	; 0xcba <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     348:	2f 3f       	cpi	r18, 0xFF	; 255
     34a:	31 05       	cpc	r19, r1
     34c:	41 05       	cpc	r20, r1
     34e:	51 05       	cpc	r21, r1
     350:	08 f4       	brcc	.+2      	; 0x354 <usart_set_baudrate+0xc0>
     352:	8d c0       	rjmp	.+282    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     354:	8f ef       	ldi	r24, 0xFF	; 255
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	a0 e0       	ldi	r26, 0x00	; 0
     35a:	b0 e0       	ldi	r27, 0x00	; 0
     35c:	c9 ef       	ldi	r28, 0xF9	; 249
     35e:	05 c0       	rjmp	.+10     	; 0x36a <usart_set_baudrate+0xd6>
     360:	28 17       	cp	r18, r24
     362:	39 07       	cpc	r19, r25
     364:	4a 07       	cpc	r20, r26
     366:	5b 07       	cpc	r21, r27
     368:	58 f0       	brcs	.+22     	; 0x380 <usart_set_baudrate+0xec>
			break;
		}

		limit <<= 1;
     36a:	88 0f       	add	r24, r24
     36c:	99 1f       	adc	r25, r25
     36e:	aa 1f       	adc	r26, r26
     370:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     372:	cd 3f       	cpi	r28, 0xFD	; 253
     374:	0c f4       	brge	.+2      	; 0x378 <usart_set_baudrate+0xe4>
			limit |= 1;
     376:	81 60       	ori	r24, 0x01	; 1
     378:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     37a:	c7 30       	cpi	r28, 0x07	; 7
     37c:	89 f7       	brne	.-30     	; 0x360 <usart_set_baudrate+0xcc>
     37e:	4d c0       	rjmp	.+154    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     380:	cc 23       	and	r28, r28
     382:	0c f0       	brlt	.+2      	; 0x386 <usart_set_baudrate+0xf2>
     384:	4a c0       	rjmp	.+148    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     386:	d5 01       	movw	r26, r10
     388:	c4 01       	movw	r24, r8
     38a:	88 0f       	add	r24, r24
     38c:	99 1f       	adc	r25, r25
     38e:	aa 1f       	adc	r26, r26
     390:	bb 1f       	adc	r27, r27
     392:	88 0f       	add	r24, r24
     394:	99 1f       	adc	r25, r25
     396:	aa 1f       	adc	r26, r26
     398:	bb 1f       	adc	r27, r27
     39a:	88 0f       	add	r24, r24
     39c:	99 1f       	adc	r25, r25
     39e:	aa 1f       	adc	r26, r26
     3a0:	bb 1f       	adc	r27, r27
     3a2:	48 1a       	sub	r4, r24
     3a4:	59 0a       	sbc	r5, r25
     3a6:	6a 0a       	sbc	r6, r26
     3a8:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     3aa:	ce 3f       	cpi	r28, 0xFE	; 254
     3ac:	ec f4       	brge	.+58     	; 0x3e8 <usart_set_baudrate+0x154>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     3ae:	8d ef       	ldi	r24, 0xFD	; 253
     3b0:	9f ef       	ldi	r25, 0xFF	; 255
     3b2:	8c 1b       	sub	r24, r28
     3b4:	91 09       	sbc	r25, r1
     3b6:	c7 fd       	sbrc	r28, 7
     3b8:	93 95       	inc	r25
     3ba:	04 c0       	rjmp	.+8      	; 0x3c4 <usart_set_baudrate+0x130>
     3bc:	44 0c       	add	r4, r4
     3be:	55 1c       	adc	r5, r5
     3c0:	66 1c       	adc	r6, r6
     3c2:	77 1c       	adc	r7, r7
     3c4:	8a 95       	dec	r24
     3c6:	d2 f7       	brpl	.-12     	; 0x3bc <usart_set_baudrate+0x128>
     3c8:	d5 01       	movw	r26, r10
     3ca:	c4 01       	movw	r24, r8
     3cc:	b6 95       	lsr	r27
     3ce:	a7 95       	ror	r26
     3d0:	97 95       	ror	r25
     3d2:	87 95       	ror	r24
     3d4:	bc 01       	movw	r22, r24
     3d6:	cd 01       	movw	r24, r26
     3d8:	64 0d       	add	r22, r4
     3da:	75 1d       	adc	r23, r5
     3dc:	86 1d       	adc	r24, r6
     3de:	97 1d       	adc	r25, r7
     3e0:	a5 01       	movw	r20, r10
     3e2:	94 01       	movw	r18, r8
     3e4:	6a d4       	rcall	.+2260   	; 0xcba <__udivmodsi4>
     3e6:	35 c0       	rjmp	.+106    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
		} else {
			baud <<= exp + 3;
     3e8:	83 e0       	ldi	r24, 0x03	; 3
     3ea:	8c 0f       	add	r24, r28
     3ec:	a5 01       	movw	r20, r10
     3ee:	94 01       	movw	r18, r8
     3f0:	04 c0       	rjmp	.+8      	; 0x3fa <usart_set_baudrate+0x166>
     3f2:	22 0f       	add	r18, r18
     3f4:	33 1f       	adc	r19, r19
     3f6:	44 1f       	adc	r20, r20
     3f8:	55 1f       	adc	r21, r21
     3fa:	8a 95       	dec	r24
     3fc:	d2 f7       	brpl	.-12     	; 0x3f2 <usart_set_baudrate+0x15e>
			div = (cpu_hz + baud / 2) / baud;
     3fe:	da 01       	movw	r26, r20
     400:	c9 01       	movw	r24, r18
     402:	b6 95       	lsr	r27
     404:	a7 95       	ror	r26
     406:	97 95       	ror	r25
     408:	87 95       	ror	r24
     40a:	bc 01       	movw	r22, r24
     40c:	cd 01       	movw	r24, r26
     40e:	64 0d       	add	r22, r4
     410:	75 1d       	adc	r23, r5
     412:	86 1d       	adc	r24, r6
     414:	97 1d       	adc	r25, r7
     416:	51 d4       	rcall	.+2210   	; 0xcba <__udivmodsi4>
     418:	1c c0       	rjmp	.+56     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     41a:	83 e0       	ldi	r24, 0x03	; 3
     41c:	8c 0f       	add	r24, r28
     41e:	a5 01       	movw	r20, r10
     420:	94 01       	movw	r18, r8
     422:	04 c0       	rjmp	.+8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     424:	22 0f       	add	r18, r18
     426:	33 1f       	adc	r19, r19
     428:	44 1f       	adc	r20, r20
     42a:	55 1f       	adc	r21, r21
     42c:	8a 95       	dec	r24
     42e:	d2 f7       	brpl	.-12     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		div = (cpu_hz + baud / 2) / baud - 1;
     430:	da 01       	movw	r26, r20
     432:	c9 01       	movw	r24, r18
     434:	b6 95       	lsr	r27
     436:	a7 95       	ror	r26
     438:	97 95       	ror	r25
     43a:	87 95       	ror	r24
     43c:	bc 01       	movw	r22, r24
     43e:	cd 01       	movw	r24, r26
     440:	64 0d       	add	r22, r4
     442:	75 1d       	adc	r23, r5
     444:	86 1d       	adc	r24, r6
     446:	97 1d       	adc	r25, r7
     448:	38 d4       	rcall	.+2160   	; 0xcba <__udivmodsi4>
     44a:	21 50       	subi	r18, 0x01	; 1
     44c:	31 09       	sbc	r19, r1
     44e:	41 09       	sbc	r20, r1
     450:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     452:	83 2f       	mov	r24, r19
     454:	8f 70       	andi	r24, 0x0F	; 15
     456:	c2 95       	swap	r28
     458:	c0 7f       	andi	r28, 0xF0	; 240
     45a:	c8 2b       	or	r28, r24
     45c:	f7 01       	movw	r30, r14
     45e:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     460:	26 83       	std	Z+6, r18	; 0x06

	return true;
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	18 c0       	rjmp	.+48     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	16 c0       	rjmp	.+44     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	14 c0       	rjmp	.+40     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     46e:	d5 01       	movw	r26, r10
     470:	c4 01       	movw	r24, r8
     472:	88 0f       	add	r24, r24
     474:	99 1f       	adc	r25, r25
     476:	aa 1f       	adc	r26, r26
     478:	bb 1f       	adc	r27, r27
     47a:	88 0f       	add	r24, r24
     47c:	99 1f       	adc	r25, r25
     47e:	aa 1f       	adc	r26, r26
     480:	bb 1f       	adc	r27, r27
     482:	88 0f       	add	r24, r24
     484:	99 1f       	adc	r25, r25
     486:	aa 1f       	adc	r26, r26
     488:	bb 1f       	adc	r27, r27
     48a:	48 1a       	sub	r4, r24
     48c:	59 0a       	sbc	r5, r25
     48e:	6a 0a       	sbc	r6, r26
     490:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     492:	c9 ef       	ldi	r28, 0xF9	; 249
     494:	8c cf       	rjmp	.-232    	; 0x3ae <usart_set_baudrate+0x11a>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     496:	cf 91       	pop	r28
     498:	1f 91       	pop	r17
     49a:	0f 91       	pop	r16
     49c:	ff 90       	pop	r15
     49e:	ef 90       	pop	r14
     4a0:	bf 90       	pop	r11
     4a2:	af 90       	pop	r10
     4a4:	9f 90       	pop	r9
     4a6:	8f 90       	pop	r8
     4a8:	7f 90       	pop	r7
     4aa:	6f 90       	pop	r6
     4ac:	5f 90       	pop	r5
     4ae:	4f 90       	pop	r4
     4b0:	08 95       	ret

000004b2 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     4b2:	0f 93       	push	r16
     4b4:	1f 93       	push	r17
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	ec 01       	movw	r28, r24
     4bc:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     4be:	00 97       	sbiw	r24, 0x00	; 0
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <usart_init_rs232+0x12>
     4c2:	36 c1       	rjmp	.+620    	; 0x730 <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     4c4:	80 3c       	cpi	r24, 0xC0	; 192
     4c6:	91 05       	cpc	r25, r1
     4c8:	21 f4       	brne	.+8      	; 0x4d2 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     4ca:	60 e1       	ldi	r22, 0x10	; 16
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	5c d3       	rcall	.+1720   	; 0xb88 <sysclk_enable_module>
     4d0:	2f c1       	rjmp	.+606    	; 0x730 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
     4d2:	c0 34       	cpi	r28, 0x40	; 64
     4d4:	84 e0       	ldi	r24, 0x04	; 4
     4d6:	d8 07       	cpc	r29, r24
     4d8:	21 f4       	brne	.+8      	; 0x4e2 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
     4da:	68 e0       	ldi	r22, 0x08	; 8
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	54 d3       	rcall	.+1704   	; 0xb88 <sysclk_enable_module>
     4e0:	27 c1       	rjmp	.+590    	; 0x730 <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     4e2:	c1 15       	cp	r28, r1
     4e4:	e4 e0       	ldi	r30, 0x04	; 4
     4e6:	de 07       	cpc	r29, r30
     4e8:	21 f4       	brne	.+8      	; 0x4f2 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     4ea:	64 e0       	ldi	r22, 0x04	; 4
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	4c d3       	rcall	.+1688   	; 0xb88 <sysclk_enable_module>
     4f0:	1f c1       	rjmp	.+574    	; 0x730 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     4f2:	c0 38       	cpi	r28, 0x80	; 128
     4f4:	f1 e0       	ldi	r31, 0x01	; 1
     4f6:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     4f8:	21 f4       	brne	.+8      	; 0x502 <usart_init_rs232+0x50>
     4fa:	62 e0       	ldi	r22, 0x02	; 2
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	44 d3       	rcall	.+1672   	; 0xb88 <sysclk_enable_module>
     500:	17 c1       	rjmp	.+558    	; 0x730 <usart_init_rs232+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     502:	c1 15       	cp	r28, r1
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     508:	21 f4       	brne	.+8      	; 0x512 <usart_init_rs232+0x60>
     50a:	61 e0       	ldi	r22, 0x01	; 1
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	3c d3       	rcall	.+1656   	; 0xb88 <sysclk_enable_module>
     510:	0f c1       	rjmp	.+542    	; 0x730 <usart_init_rs232+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     512:	c0 38       	cpi	r28, 0x80	; 128
     514:	e3 e0       	ldi	r30, 0x03	; 3
     516:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     518:	21 f4       	brne	.+8      	; 0x522 <usart_init_rs232+0x70>
     51a:	61 e0       	ldi	r22, 0x01	; 1
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	34 d3       	rcall	.+1640   	; 0xb88 <sysclk_enable_module>
     520:	07 c1       	rjmp	.+526    	; 0x730 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     522:	c0 39       	cpi	r28, 0x90	; 144
     524:	f3 e0       	ldi	r31, 0x03	; 3
     526:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     528:	21 f4       	brne	.+8      	; 0x532 <usart_init_rs232+0x80>
     52a:	61 e0       	ldi	r22, 0x01	; 1
     52c:	82 e0       	ldi	r24, 0x02	; 2
     52e:	2c d3       	rcall	.+1624   	; 0xb88 <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     530:	ff c0       	rjmp	.+510    	; 0x730 <usart_init_rs232+0x27e>
     532:	c1 15       	cp	r28, r1
     534:	82 e0       	ldi	r24, 0x02	; 2
     536:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     538:	21 f4       	brne	.+8      	; 0x542 <usart_init_rs232+0x90>
     53a:	62 e0       	ldi	r22, 0x02	; 2
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	24 d3       	rcall	.+1608   	; 0xb88 <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     540:	f7 c0       	rjmp	.+494    	; 0x730 <usart_init_rs232+0x27e>
     542:	c0 34       	cpi	r28, 0x40	; 64
     544:	e2 e0       	ldi	r30, 0x02	; 2
     546:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     548:	21 f4       	brne	.+8      	; 0x552 <usart_init_rs232+0xa0>
     54a:	62 e0       	ldi	r22, 0x02	; 2
     54c:	82 e0       	ldi	r24, 0x02	; 2
     54e:	1c d3       	rcall	.+1592   	; 0xb88 <sysclk_enable_module>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     550:	ef c0       	rjmp	.+478    	; 0x730 <usart_init_rs232+0x27e>
     552:	c1 15       	cp	r28, r1
     554:	f3 e0       	ldi	r31, 0x03	; 3
     556:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     558:	21 f4       	brne	.+8      	; 0x562 <usart_init_rs232+0xb0>
     55a:	64 e0       	ldi	r22, 0x04	; 4
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	14 d3       	rcall	.+1576   	; 0xb88 <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     560:	e7 c0       	rjmp	.+462    	; 0x730 <usart_init_rs232+0x27e>
     562:	c0 32       	cpi	r28, 0x20	; 32
     564:	83 e0       	ldi	r24, 0x03	; 3
     566:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     568:	21 f4       	brne	.+8      	; 0x572 <usart_init_rs232+0xc0>
     56a:	64 e0       	ldi	r22, 0x04	; 4
     56c:	82 e0       	ldi	r24, 0x02	; 2
     56e:	0c d3       	rcall	.+1560   	; 0xb88 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     570:	df c0       	rjmp	.+446    	; 0x730 <usart_init_rs232+0x27e>
     572:	c1 15       	cp	r28, r1
     574:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     576:	de 07       	cpc	r29, r30
     578:	21 f4       	brne	.+8      	; 0x582 <usart_init_rs232+0xd0>
     57a:	61 e0       	ldi	r22, 0x01	; 1
     57c:	83 e0       	ldi	r24, 0x03	; 3
     57e:	04 d3       	rcall	.+1544   	; 0xb88 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     580:	d7 c0       	rjmp	.+430    	; 0x730 <usart_init_rs232+0x27e>
     582:	c1 15       	cp	r28, r1
     584:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     586:	df 07       	cpc	r29, r31
     588:	21 f4       	brne	.+8      	; 0x592 <usart_init_rs232+0xe0>
     58a:	61 e0       	ldi	r22, 0x01	; 1
     58c:	84 e0       	ldi	r24, 0x04	; 4
     58e:	fc d2       	rcall	.+1528   	; 0xb88 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     590:	cf c0       	rjmp	.+414    	; 0x730 <usart_init_rs232+0x27e>
     592:	c1 15       	cp	r28, r1
     594:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     596:	d8 07       	cpc	r29, r24
     598:	21 f4       	brne	.+8      	; 0x5a2 <usart_init_rs232+0xf0>
     59a:	61 e0       	ldi	r22, 0x01	; 1
     59c:	85 e0       	ldi	r24, 0x05	; 5
     59e:	f4 d2       	rcall	.+1512   	; 0xb88 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     5a0:	c7 c0       	rjmp	.+398    	; 0x730 <usart_init_rs232+0x27e>
     5a2:	c1 15       	cp	r28, r1
     5a4:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     5a6:	de 07       	cpc	r29, r30
     5a8:	21 f4       	brne	.+8      	; 0x5b2 <usart_init_rs232+0x100>
     5aa:	61 e0       	ldi	r22, 0x01	; 1
     5ac:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     5ae:	ec d2       	rcall	.+1496   	; 0xb88 <sysclk_enable_module>
     5b0:	bf c0       	rjmp	.+382    	; 0x730 <usart_init_rs232+0x27e>
     5b2:	c0 34       	cpi	r28, 0x40	; 64
     5b4:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     5b6:	df 07       	cpc	r29, r31
     5b8:	21 f4       	brne	.+8      	; 0x5c2 <usart_init_rs232+0x110>
     5ba:	62 e0       	ldi	r22, 0x02	; 2
     5bc:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     5be:	e4 d2       	rcall	.+1480   	; 0xb88 <sysclk_enable_module>
     5c0:	b7 c0       	rjmp	.+366    	; 0x730 <usart_init_rs232+0x27e>
     5c2:	c0 34       	cpi	r28, 0x40	; 64
     5c4:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     5c6:	d8 07       	cpc	r29, r24
     5c8:	21 f4       	brne	.+8      	; 0x5d2 <usart_init_rs232+0x120>
     5ca:	62 e0       	ldi	r22, 0x02	; 2
     5cc:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     5ce:	dc d2       	rcall	.+1464   	; 0xb88 <sysclk_enable_module>
     5d0:	af c0       	rjmp	.+350    	; 0x730 <usart_init_rs232+0x27e>
     5d2:	c0 34       	cpi	r28, 0x40	; 64
     5d4:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     5d6:	de 07       	cpc	r29, r30
     5d8:	21 f4       	brne	.+8      	; 0x5e2 <usart_init_rs232+0x130>
     5da:	62 e0       	ldi	r22, 0x02	; 2
     5dc:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
     5de:	d4 d2       	rcall	.+1448   	; 0xb88 <sysclk_enable_module>
     5e0:	a7 c0       	rjmp	.+334    	; 0x730 <usart_init_rs232+0x27e>
     5e2:	c0 34       	cpi	r28, 0x40	; 64
     5e4:	fb e0       	ldi	r31, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
     5e6:	df 07       	cpc	r29, r31
     5e8:	21 f4       	brne	.+8      	; 0x5f2 <usart_init_rs232+0x140>
     5ea:	62 e0       	ldi	r22, 0x02	; 2
     5ec:	86 e0       	ldi	r24, 0x06	; 6
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     5ee:	cc d2       	rcall	.+1432   	; 0xb88 <sysclk_enable_module>
     5f0:	9f c0       	rjmp	.+318    	; 0x730 <usart_init_rs232+0x27e>
     5f2:	c0 39       	cpi	r28, 0x90	; 144
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     5f4:	88 e0       	ldi	r24, 0x08	; 8
     5f6:	d8 07       	cpc	r29, r24
     5f8:	21 f4       	brne	.+8      	; 0x602 <usart_init_rs232+0x150>
     5fa:	64 e0       	ldi	r22, 0x04	; 4
     5fc:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     5fe:	c4 d2       	rcall	.+1416   	; 0xb88 <sysclk_enable_module>
     600:	97 c0       	rjmp	.+302    	; 0x730 <usart_init_rs232+0x27e>
     602:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     604:	e9 e0       	ldi	r30, 0x09	; 9
     606:	de 07       	cpc	r29, r30
     608:	21 f4       	brne	.+8      	; 0x612 <usart_init_rs232+0x160>
     60a:	64 e0       	ldi	r22, 0x04	; 4
     60c:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     60e:	bc d2       	rcall	.+1400   	; 0xb88 <sysclk_enable_module>
     610:	8f c0       	rjmp	.+286    	; 0x730 <usart_init_rs232+0x27e>
     612:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     614:	fa e0       	ldi	r31, 0x0A	; 10
     616:	df 07       	cpc	r29, r31
     618:	21 f4       	brne	.+8      	; 0x622 <usart_init_rs232+0x170>
     61a:	64 e0       	ldi	r22, 0x04	; 4
     61c:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     61e:	b4 d2       	rcall	.+1384   	; 0xb88 <sysclk_enable_module>
     620:	87 c0       	rjmp	.+270    	; 0x730 <usart_init_rs232+0x27e>
     622:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     624:	8b e0       	ldi	r24, 0x0B	; 11
     626:	d8 07       	cpc	r29, r24
     628:	21 f4       	brne	.+8      	; 0x632 <usart_init_rs232+0x180>
     62a:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     62c:	86 e0       	ldi	r24, 0x06	; 6
     62e:	ac d2       	rcall	.+1368   	; 0xb88 <sysclk_enable_module>
     630:	7f c0       	rjmp	.+254    	; 0x730 <usart_init_rs232+0x27e>
     632:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     634:	e8 e0       	ldi	r30, 0x08	; 8
     636:	de 07       	cpc	r29, r30
     638:	21 f4       	brne	.+8      	; 0x642 <usart_init_rs232+0x190>
     63a:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     63c:	83 e0       	ldi	r24, 0x03	; 3
     63e:	a4 d2       	rcall	.+1352   	; 0xb88 <sysclk_enable_module>
     640:	77 c0       	rjmp	.+238    	; 0x730 <usart_init_rs232+0x27e>
     642:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     644:	f9 e0       	ldi	r31, 0x09	; 9
     646:	df 07       	cpc	r29, r31
     648:	21 f4       	brne	.+8      	; 0x652 <usart_init_rs232+0x1a0>
     64a:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
     64c:	84 e0       	ldi	r24, 0x04	; 4
     64e:	9c d2       	rcall	.+1336   	; 0xb88 <sysclk_enable_module>
     650:	6f c0       	rjmp	.+222    	; 0x730 <usart_init_rs232+0x27e>
     652:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
     654:	8a e0       	ldi	r24, 0x0A	; 10
     656:	d8 07       	cpc	r29, r24
     658:	21 f4       	brne	.+8      	; 0x662 <usart_init_rs232+0x1b0>
     65a:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
     65c:	85 e0       	ldi	r24, 0x05	; 5
     65e:	94 d2       	rcall	.+1320   	; 0xb88 <sysclk_enable_module>
     660:	67 c0       	rjmp	.+206    	; 0x730 <usart_init_rs232+0x27e>
     662:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
     664:	eb e0       	ldi	r30, 0x0B	; 11
     666:	de 07       	cpc	r29, r30
     668:	21 f4       	brne	.+8      	; 0x672 <usart_init_rs232+0x1c0>
     66a:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     66c:	86 e0       	ldi	r24, 0x06	; 6
     66e:	8c d2       	rcall	.+1304   	; 0xb88 <sysclk_enable_module>
     670:	5f c0       	rjmp	.+190    	; 0x730 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     672:	c0 3a       	cpi	r28, 0xA0	; 160
     674:	f8 e0       	ldi	r31, 0x08	; 8
     676:	df 07       	cpc	r29, r31
     678:	21 f4       	brne	.+8      	; 0x682 <usart_init_rs232+0x1d0>
     67a:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     67c:	83 e0       	ldi	r24, 0x03	; 3
     67e:	84 d2       	rcall	.+1288   	; 0xb88 <sysclk_enable_module>
     680:	57 c0       	rjmp	.+174    	; 0x730 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     682:	c0 3a       	cpi	r28, 0xA0	; 160
     684:	89 e0       	ldi	r24, 0x09	; 9
     686:	d8 07       	cpc	r29, r24
     688:	21 f4       	brne	.+8      	; 0x692 <usart_init_rs232+0x1e0>
     68a:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     68c:	84 e0       	ldi	r24, 0x04	; 4
     68e:	7c d2       	rcall	.+1272   	; 0xb88 <sysclk_enable_module>
     690:	4f c0       	rjmp	.+158    	; 0x730 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     692:	c0 3a       	cpi	r28, 0xA0	; 160
     694:	ea e0       	ldi	r30, 0x0A	; 10
     696:	de 07       	cpc	r29, r30
     698:	21 f4       	brne	.+8      	; 0x6a2 <usart_init_rs232+0x1f0>
     69a:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     69c:	85 e0       	ldi	r24, 0x05	; 5
     69e:	74 d2       	rcall	.+1256   	; 0xb88 <sysclk_enable_module>
     6a0:	47 c0       	rjmp	.+142    	; 0x730 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     6a2:	c0 3a       	cpi	r28, 0xA0	; 160
     6a4:	fb e0       	ldi	r31, 0x0B	; 11
     6a6:	df 07       	cpc	r29, r31
     6a8:	21 f4       	brne	.+8      	; 0x6b2 <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     6aa:	60 e1       	ldi	r22, 0x10	; 16
     6ac:	86 e0       	ldi	r24, 0x06	; 6
     6ae:	6c d2       	rcall	.+1240   	; 0xb88 <sysclk_enable_module>
     6b0:	3f c0       	rjmp	.+126    	; 0x730 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     6b2:	c0 3b       	cpi	r28, 0xB0	; 176
     6b4:	88 e0       	ldi	r24, 0x08	; 8
     6b6:	d8 07       	cpc	r29, r24
     6b8:	21 f4       	brne	.+8      	; 0x6c2 <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     6ba:	60 e2       	ldi	r22, 0x20	; 32
     6bc:	83 e0       	ldi	r24, 0x03	; 3
     6be:	64 d2       	rcall	.+1224   	; 0xb88 <sysclk_enable_module>
     6c0:	37 c0       	rjmp	.+110    	; 0x730 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     6c2:	c0 3b       	cpi	r28, 0xB0	; 176
     6c4:	e9 e0       	ldi	r30, 0x09	; 9
     6c6:	de 07       	cpc	r29, r30
     6c8:	21 f4       	brne	.+8      	; 0x6d2 <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
     6ca:	60 e2       	ldi	r22, 0x20	; 32
     6cc:	84 e0       	ldi	r24, 0x04	; 4
     6ce:	5c d2       	rcall	.+1208   	; 0xb88 <sysclk_enable_module>
     6d0:	2f c0       	rjmp	.+94     	; 0x730 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     6d2:	c0 3b       	cpi	r28, 0xB0	; 176
     6d4:	fa e0       	ldi	r31, 0x0A	; 10
     6d6:	df 07       	cpc	r29, r31
     6d8:	21 f4       	brne	.+8      	; 0x6e2 <usart_init_rs232+0x230>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
     6da:	60 e2       	ldi	r22, 0x20	; 32
     6dc:	85 e0       	ldi	r24, 0x05	; 5
     6de:	54 d2       	rcall	.+1192   	; 0xb88 <sysclk_enable_module>
     6e0:	27 c0       	rjmp	.+78     	; 0x730 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
     6e2:	c0 3b       	cpi	r28, 0xB0	; 176
     6e4:	8b e0       	ldi	r24, 0x0B	; 11
     6e6:	d8 07       	cpc	r29, r24
     6e8:	21 f4       	brne	.+8      	; 0x6f2 <usart_init_rs232+0x240>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     6ea:	60 e2       	ldi	r22, 0x20	; 32
     6ec:	86 e0       	ldi	r24, 0x06	; 6
     6ee:	4c d2       	rcall	.+1176   	; 0xb88 <sysclk_enable_module>
     6f0:	1f c0       	rjmp	.+62     	; 0x730 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     6f2:	c0 38       	cpi	r28, 0x80	; 128
     6f4:	e4 e0       	ldi	r30, 0x04	; 4
     6f6:	de 07       	cpc	r29, r30
     6f8:	21 f4       	brne	.+8      	; 0x702 <usart_init_rs232+0x250>
     6fa:	60 e4       	ldi	r22, 0x40	; 64
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
     6fc:	83 e0       	ldi	r24, 0x03	; 3
     6fe:	44 d2       	rcall	.+1160   	; 0xb88 <sysclk_enable_module>
     700:	17 c0       	rjmp	.+46     	; 0x730 <usart_init_rs232+0x27e>
     702:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
     704:	f4 e0       	ldi	r31, 0x04	; 4
     706:	df 07       	cpc	r29, r31
     708:	21 f4       	brne	.+8      	; 0x712 <usart_init_rs232+0x260>
     70a:	60 e4       	ldi	r22, 0x40	; 64
     70c:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     70e:	3c d2       	rcall	.+1144   	; 0xb88 <sysclk_enable_module>
     710:	0f c0       	rjmp	.+30     	; 0x730 <usart_init_rs232+0x27e>
     712:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     714:	84 e0       	ldi	r24, 0x04	; 4
     716:	d8 07       	cpc	r29, r24
     718:	21 f4       	brne	.+8      	; 0x722 <usart_init_rs232+0x270>
     71a:	60 e4       	ldi	r22, 0x40	; 64
     71c:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
     71e:	34 d2       	rcall	.+1128   	; 0xb88 <sysclk_enable_module>
     720:	07 c0       	rjmp	.+14     	; 0x730 <usart_init_rs232+0x27e>
     722:	c0 3b       	cpi	r28, 0xB0	; 176
     724:	e4 e0       	ldi	r30, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
     726:	de 07       	cpc	r29, r30
     728:	19 f4       	brne	.+6      	; 0x730 <usart_init_rs232+0x27e>
     72a:	60 e4       	ldi	r22, 0x40	; 64
     72c:	86 e0       	ldi	r24, 0x06	; 6
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     72e:	2c d2       	rcall	.+1112   	; 0xb88 <sysclk_enable_module>
     730:	8d 81       	ldd	r24, Y+5	; 0x05
     732:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     734:	8d 83       	std	Y+5, r24	; 0x05
     736:	f8 01       	movw	r30, r16
     738:	95 81       	ldd	r25, Z+5	; 0x05
     73a:	84 81       	ldd	r24, Z+4	; 0x04
     73c:	89 2b       	or	r24, r25
     73e:	96 81       	ldd	r25, Z+6	; 0x06
     740:	91 11       	cpse	r25, r1
     742:	98 e0       	ldi	r25, 0x08	; 8
     744:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     746:	8d 83       	std	Y+5, r24	; 0x05
     748:	f8 01       	movw	r30, r16
     74a:	40 81       	ld	r20, Z
     74c:	51 81       	ldd	r21, Z+1	; 0x01
     74e:	62 81       	ldd	r22, Z+2	; 0x02
     750:	73 81       	ldd	r23, Z+3	; 0x03
     752:	00 e8       	ldi	r16, 0x80	; 128
     754:	14 e8       	ldi	r17, 0x84	; 132
     756:	2e e1       	ldi	r18, 0x1E	; 30
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	ce 01       	movw	r24, r28
     75c:	9b dd       	rcall	.-1226   	; 0x294 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     75e:	9c 81       	ldd	r25, Y+4	; 0x04
     760:	98 60       	ori	r25, 0x08	; 8
     762:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     764:	9c 81       	ldd	r25, Y+4	; 0x04
     766:	90 61       	ori	r25, 0x10	; 16
     768:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	1f 91       	pop	r17
     770:	0f 91       	pop	r16
     772:	08 95       	ret

00000774 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     774:	1f 92       	push	r1
     776:	0f 92       	push	r0
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	0f 92       	push	r0
     77c:	11 24       	eor	r1, r1
     77e:	08 b6       	in	r0, 0x38	; 56
     780:	0f 92       	push	r0
     782:	18 be       	out	0x38, r1	; 56
     784:	09 b6       	in	r0, 0x39	; 57
     786:	0f 92       	push	r0
     788:	19 be       	out	0x39, r1	; 57
     78a:	0b b6       	in	r0, 0x3b	; 59
     78c:	0f 92       	push	r0
     78e:	1b be       	out	0x3b, r1	; 59
     790:	2f 93       	push	r18
     792:	3f 93       	push	r19
     794:	4f 93       	push	r20
     796:	5f 93       	push	r21
     798:	6f 93       	push	r22
     79a:	7f 93       	push	r23
     79c:	8f 93       	push	r24
     79e:	9f 93       	push	r25
     7a0:	af 93       	push	r26
     7a2:	bf 93       	push	r27
     7a4:	ef 93       	push	r30
     7a6:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     7a8:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     7ac:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     7b0:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <adca_callback>
     7b4:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <adca_callback+0x1>
     7b8:	61 e0       	ldi	r22, 0x01	; 1
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	92 e0       	ldi	r25, 0x02	; 2
     7be:	19 95       	eicall
}
     7c0:	ff 91       	pop	r31
     7c2:	ef 91       	pop	r30
     7c4:	bf 91       	pop	r27
     7c6:	af 91       	pop	r26
     7c8:	9f 91       	pop	r25
     7ca:	8f 91       	pop	r24
     7cc:	7f 91       	pop	r23
     7ce:	6f 91       	pop	r22
     7d0:	5f 91       	pop	r21
     7d2:	4f 91       	pop	r20
     7d4:	3f 91       	pop	r19
     7d6:	2f 91       	pop	r18
     7d8:	0f 90       	pop	r0
     7da:	0b be       	out	0x3b, r0	; 59
     7dc:	0f 90       	pop	r0
     7de:	09 be       	out	0x39, r0	; 57
     7e0:	0f 90       	pop	r0
     7e2:	08 be       	out	0x38, r0	; 56
     7e4:	0f 90       	pop	r0
     7e6:	0f be       	out	0x3f, r0	; 63
     7e8:	0f 90       	pop	r0
     7ea:	1f 90       	pop	r1
     7ec:	18 95       	reti

000007ee <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     7ee:	1f 92       	push	r1
     7f0:	0f 92       	push	r0
     7f2:	0f b6       	in	r0, 0x3f	; 63
     7f4:	0f 92       	push	r0
     7f6:	11 24       	eor	r1, r1
     7f8:	08 b6       	in	r0, 0x38	; 56
     7fa:	0f 92       	push	r0
     7fc:	18 be       	out	0x38, r1	; 56
     7fe:	09 b6       	in	r0, 0x39	; 57
     800:	0f 92       	push	r0
     802:	19 be       	out	0x39, r1	; 57
     804:	0b b6       	in	r0, 0x3b	; 59
     806:	0f 92       	push	r0
     808:	1b be       	out	0x3b, r1	; 59
     80a:	2f 93       	push	r18
     80c:	3f 93       	push	r19
     80e:	4f 93       	push	r20
     810:	5f 93       	push	r21
     812:	6f 93       	push	r22
     814:	7f 93       	push	r23
     816:	8f 93       	push	r24
     818:	9f 93       	push	r25
     81a:	af 93       	push	r26
     81c:	bf 93       	push	r27
     81e:	ef 93       	push	r30
     820:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     822:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     826:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     82a:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <adca_callback>
     82e:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <adca_callback+0x1>
     832:	62 e0       	ldi	r22, 0x02	; 2
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	92 e0       	ldi	r25, 0x02	; 2
     838:	19 95       	eicall
}
     83a:	ff 91       	pop	r31
     83c:	ef 91       	pop	r30
     83e:	bf 91       	pop	r27
     840:	af 91       	pop	r26
     842:	9f 91       	pop	r25
     844:	8f 91       	pop	r24
     846:	7f 91       	pop	r23
     848:	6f 91       	pop	r22
     84a:	5f 91       	pop	r21
     84c:	4f 91       	pop	r20
     84e:	3f 91       	pop	r19
     850:	2f 91       	pop	r18
     852:	0f 90       	pop	r0
     854:	0b be       	out	0x3b, r0	; 59
     856:	0f 90       	pop	r0
     858:	09 be       	out	0x39, r0	; 57
     85a:	0f 90       	pop	r0
     85c:	08 be       	out	0x38, r0	; 56
     85e:	0f 90       	pop	r0
     860:	0f be       	out	0x3f, r0	; 63
     862:	0f 90       	pop	r0
     864:	1f 90       	pop	r1
     866:	18 95       	reti

00000868 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     868:	1f 92       	push	r1
     86a:	0f 92       	push	r0
     86c:	0f b6       	in	r0, 0x3f	; 63
     86e:	0f 92       	push	r0
     870:	11 24       	eor	r1, r1
     872:	08 b6       	in	r0, 0x38	; 56
     874:	0f 92       	push	r0
     876:	18 be       	out	0x38, r1	; 56
     878:	09 b6       	in	r0, 0x39	; 57
     87a:	0f 92       	push	r0
     87c:	19 be       	out	0x39, r1	; 57
     87e:	0b b6       	in	r0, 0x3b	; 59
     880:	0f 92       	push	r0
     882:	1b be       	out	0x3b, r1	; 59
     884:	2f 93       	push	r18
     886:	3f 93       	push	r19
     888:	4f 93       	push	r20
     88a:	5f 93       	push	r21
     88c:	6f 93       	push	r22
     88e:	7f 93       	push	r23
     890:	8f 93       	push	r24
     892:	9f 93       	push	r25
     894:	af 93       	push	r26
     896:	bf 93       	push	r27
     898:	ef 93       	push	r30
     89a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     89c:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     8a0:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     8a4:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <adca_callback>
     8a8:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <adca_callback+0x1>
     8ac:	64 e0       	ldi	r22, 0x04	; 4
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	92 e0       	ldi	r25, 0x02	; 2
     8b2:	19 95       	eicall
}
     8b4:	ff 91       	pop	r31
     8b6:	ef 91       	pop	r30
     8b8:	bf 91       	pop	r27
     8ba:	af 91       	pop	r26
     8bc:	9f 91       	pop	r25
     8be:	8f 91       	pop	r24
     8c0:	7f 91       	pop	r23
     8c2:	6f 91       	pop	r22
     8c4:	5f 91       	pop	r21
     8c6:	4f 91       	pop	r20
     8c8:	3f 91       	pop	r19
     8ca:	2f 91       	pop	r18
     8cc:	0f 90       	pop	r0
     8ce:	0b be       	out	0x3b, r0	; 59
     8d0:	0f 90       	pop	r0
     8d2:	09 be       	out	0x39, r0	; 57
     8d4:	0f 90       	pop	r0
     8d6:	08 be       	out	0x38, r0	; 56
     8d8:	0f 90       	pop	r0
     8da:	0f be       	out	0x3f, r0	; 63
     8dc:	0f 90       	pop	r0
     8de:	1f 90       	pop	r1
     8e0:	18 95       	reti

000008e2 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     8e2:	1f 92       	push	r1
     8e4:	0f 92       	push	r0
     8e6:	0f b6       	in	r0, 0x3f	; 63
     8e8:	0f 92       	push	r0
     8ea:	11 24       	eor	r1, r1
     8ec:	08 b6       	in	r0, 0x38	; 56
     8ee:	0f 92       	push	r0
     8f0:	18 be       	out	0x38, r1	; 56
     8f2:	09 b6       	in	r0, 0x39	; 57
     8f4:	0f 92       	push	r0
     8f6:	19 be       	out	0x39, r1	; 57
     8f8:	0b b6       	in	r0, 0x3b	; 59
     8fa:	0f 92       	push	r0
     8fc:	1b be       	out	0x3b, r1	; 59
     8fe:	2f 93       	push	r18
     900:	3f 93       	push	r19
     902:	4f 93       	push	r20
     904:	5f 93       	push	r21
     906:	6f 93       	push	r22
     908:	7f 93       	push	r23
     90a:	8f 93       	push	r24
     90c:	9f 93       	push	r25
     90e:	af 93       	push	r26
     910:	bf 93       	push	r27
     912:	ef 93       	push	r30
     914:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     916:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     91a:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     91e:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <adca_callback>
     922:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <adca_callback+0x1>
     926:	68 e0       	ldi	r22, 0x08	; 8
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	92 e0       	ldi	r25, 0x02	; 2
     92c:	19 95       	eicall
}
     92e:	ff 91       	pop	r31
     930:	ef 91       	pop	r30
     932:	bf 91       	pop	r27
     934:	af 91       	pop	r26
     936:	9f 91       	pop	r25
     938:	8f 91       	pop	r24
     93a:	7f 91       	pop	r23
     93c:	6f 91       	pop	r22
     93e:	5f 91       	pop	r21
     940:	4f 91       	pop	r20
     942:	3f 91       	pop	r19
     944:	2f 91       	pop	r18
     946:	0f 90       	pop	r0
     948:	0b be       	out	0x3b, r0	; 59
     94a:	0f 90       	pop	r0
     94c:	09 be       	out	0x39, r0	; 57
     94e:	0f 90       	pop	r0
     950:	08 be       	out	0x38, r0	; 56
     952:	0f 90       	pop	r0
     954:	0f be       	out	0x3f, r0	; 63
     956:	0f 90       	pop	r0
     958:	1f 90       	pop	r1
     95a:	18 95       	reti

0000095c <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     95c:	1f 92       	push	r1
     95e:	0f 92       	push	r0
     960:	0f b6       	in	r0, 0x3f	; 63
     962:	0f 92       	push	r0
     964:	11 24       	eor	r1, r1
     966:	08 b6       	in	r0, 0x38	; 56
     968:	0f 92       	push	r0
     96a:	18 be       	out	0x38, r1	; 56
     96c:	09 b6       	in	r0, 0x39	; 57
     96e:	0f 92       	push	r0
     970:	19 be       	out	0x39, r1	; 57
     972:	0b b6       	in	r0, 0x3b	; 59
     974:	0f 92       	push	r0
     976:	1b be       	out	0x3b, r1	; 59
     978:	2f 93       	push	r18
     97a:	3f 93       	push	r19
     97c:	4f 93       	push	r20
     97e:	5f 93       	push	r21
     980:	6f 93       	push	r22
     982:	7f 93       	push	r23
     984:	8f 93       	push	r24
     986:	9f 93       	push	r25
     988:	af 93       	push	r26
     98a:	bf 93       	push	r27
     98c:	ef 93       	push	r30
     98e:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     990:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     994:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     998:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <adcb_callback>
     99c:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <adcb_callback+0x1>
     9a0:	61 e0       	ldi	r22, 0x01	; 1
     9a2:	80 e4       	ldi	r24, 0x40	; 64
     9a4:	92 e0       	ldi	r25, 0x02	; 2
     9a6:	19 95       	eicall
}
     9a8:	ff 91       	pop	r31
     9aa:	ef 91       	pop	r30
     9ac:	bf 91       	pop	r27
     9ae:	af 91       	pop	r26
     9b0:	9f 91       	pop	r25
     9b2:	8f 91       	pop	r24
     9b4:	7f 91       	pop	r23
     9b6:	6f 91       	pop	r22
     9b8:	5f 91       	pop	r21
     9ba:	4f 91       	pop	r20
     9bc:	3f 91       	pop	r19
     9be:	2f 91       	pop	r18
     9c0:	0f 90       	pop	r0
     9c2:	0b be       	out	0x3b, r0	; 59
     9c4:	0f 90       	pop	r0
     9c6:	09 be       	out	0x39, r0	; 57
     9c8:	0f 90       	pop	r0
     9ca:	08 be       	out	0x38, r0	; 56
     9cc:	0f 90       	pop	r0
     9ce:	0f be       	out	0x3f, r0	; 63
     9d0:	0f 90       	pop	r0
     9d2:	1f 90       	pop	r1
     9d4:	18 95       	reti

000009d6 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     9d6:	1f 92       	push	r1
     9d8:	0f 92       	push	r0
     9da:	0f b6       	in	r0, 0x3f	; 63
     9dc:	0f 92       	push	r0
     9de:	11 24       	eor	r1, r1
     9e0:	08 b6       	in	r0, 0x38	; 56
     9e2:	0f 92       	push	r0
     9e4:	18 be       	out	0x38, r1	; 56
     9e6:	09 b6       	in	r0, 0x39	; 57
     9e8:	0f 92       	push	r0
     9ea:	19 be       	out	0x39, r1	; 57
     9ec:	0b b6       	in	r0, 0x3b	; 59
     9ee:	0f 92       	push	r0
     9f0:	1b be       	out	0x3b, r1	; 59
     9f2:	2f 93       	push	r18
     9f4:	3f 93       	push	r19
     9f6:	4f 93       	push	r20
     9f8:	5f 93       	push	r21
     9fa:	6f 93       	push	r22
     9fc:	7f 93       	push	r23
     9fe:	8f 93       	push	r24
     a00:	9f 93       	push	r25
     a02:	af 93       	push	r26
     a04:	bf 93       	push	r27
     a06:	ef 93       	push	r30
     a08:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     a0a:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     a0e:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     a12:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <adcb_callback>
     a16:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <adcb_callback+0x1>
     a1a:	62 e0       	ldi	r22, 0x02	; 2
     a1c:	80 e4       	ldi	r24, 0x40	; 64
     a1e:	92 e0       	ldi	r25, 0x02	; 2
     a20:	19 95       	eicall
}
     a22:	ff 91       	pop	r31
     a24:	ef 91       	pop	r30
     a26:	bf 91       	pop	r27
     a28:	af 91       	pop	r26
     a2a:	9f 91       	pop	r25
     a2c:	8f 91       	pop	r24
     a2e:	7f 91       	pop	r23
     a30:	6f 91       	pop	r22
     a32:	5f 91       	pop	r21
     a34:	4f 91       	pop	r20
     a36:	3f 91       	pop	r19
     a38:	2f 91       	pop	r18
     a3a:	0f 90       	pop	r0
     a3c:	0b be       	out	0x3b, r0	; 59
     a3e:	0f 90       	pop	r0
     a40:	09 be       	out	0x39, r0	; 57
     a42:	0f 90       	pop	r0
     a44:	08 be       	out	0x38, r0	; 56
     a46:	0f 90       	pop	r0
     a48:	0f be       	out	0x3f, r0	; 63
     a4a:	0f 90       	pop	r0
     a4c:	1f 90       	pop	r1
     a4e:	18 95       	reti

00000a50 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     a50:	1f 92       	push	r1
     a52:	0f 92       	push	r0
     a54:	0f b6       	in	r0, 0x3f	; 63
     a56:	0f 92       	push	r0
     a58:	11 24       	eor	r1, r1
     a5a:	08 b6       	in	r0, 0x38	; 56
     a5c:	0f 92       	push	r0
     a5e:	18 be       	out	0x38, r1	; 56
     a60:	09 b6       	in	r0, 0x39	; 57
     a62:	0f 92       	push	r0
     a64:	19 be       	out	0x39, r1	; 57
     a66:	0b b6       	in	r0, 0x3b	; 59
     a68:	0f 92       	push	r0
     a6a:	1b be       	out	0x3b, r1	; 59
     a6c:	2f 93       	push	r18
     a6e:	3f 93       	push	r19
     a70:	4f 93       	push	r20
     a72:	5f 93       	push	r21
     a74:	6f 93       	push	r22
     a76:	7f 93       	push	r23
     a78:	8f 93       	push	r24
     a7a:	9f 93       	push	r25
     a7c:	af 93       	push	r26
     a7e:	bf 93       	push	r27
     a80:	ef 93       	push	r30
     a82:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     a84:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     a88:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     a8c:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <adcb_callback>
     a90:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <adcb_callback+0x1>
     a94:	64 e0       	ldi	r22, 0x04	; 4
     a96:	80 e4       	ldi	r24, 0x40	; 64
     a98:	92 e0       	ldi	r25, 0x02	; 2
     a9a:	19 95       	eicall
}
     a9c:	ff 91       	pop	r31
     a9e:	ef 91       	pop	r30
     aa0:	bf 91       	pop	r27
     aa2:	af 91       	pop	r26
     aa4:	9f 91       	pop	r25
     aa6:	8f 91       	pop	r24
     aa8:	7f 91       	pop	r23
     aaa:	6f 91       	pop	r22
     aac:	5f 91       	pop	r21
     aae:	4f 91       	pop	r20
     ab0:	3f 91       	pop	r19
     ab2:	2f 91       	pop	r18
     ab4:	0f 90       	pop	r0
     ab6:	0b be       	out	0x3b, r0	; 59
     ab8:	0f 90       	pop	r0
     aba:	09 be       	out	0x39, r0	; 57
     abc:	0f 90       	pop	r0
     abe:	08 be       	out	0x38, r0	; 56
     ac0:	0f 90       	pop	r0
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	0f 90       	pop	r0
     ac6:	1f 90       	pop	r1
     ac8:	18 95       	reti

00000aca <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     aca:	1f 92       	push	r1
     acc:	0f 92       	push	r0
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	0f 92       	push	r0
     ad2:	11 24       	eor	r1, r1
     ad4:	08 b6       	in	r0, 0x38	; 56
     ad6:	0f 92       	push	r0
     ad8:	18 be       	out	0x38, r1	; 56
     ada:	09 b6       	in	r0, 0x39	; 57
     adc:	0f 92       	push	r0
     ade:	19 be       	out	0x39, r1	; 57
     ae0:	0b b6       	in	r0, 0x3b	; 59
     ae2:	0f 92       	push	r0
     ae4:	1b be       	out	0x3b, r1	; 59
     ae6:	2f 93       	push	r18
     ae8:	3f 93       	push	r19
     aea:	4f 93       	push	r20
     aec:	5f 93       	push	r21
     aee:	6f 93       	push	r22
     af0:	7f 93       	push	r23
     af2:	8f 93       	push	r24
     af4:	9f 93       	push	r25
     af6:	af 93       	push	r26
     af8:	bf 93       	push	r27
     afa:	ef 93       	push	r30
     afc:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     afe:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     b02:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     b06:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <adcb_callback>
     b0a:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <adcb_callback+0x1>
     b0e:	68 e0       	ldi	r22, 0x08	; 8
     b10:	80 e4       	ldi	r24, 0x40	; 64
     b12:	92 e0       	ldi	r25, 0x02	; 2
     b14:	19 95       	eicall
}
     b16:	ff 91       	pop	r31
     b18:	ef 91       	pop	r30
     b1a:	bf 91       	pop	r27
     b1c:	af 91       	pop	r26
     b1e:	9f 91       	pop	r25
     b20:	8f 91       	pop	r24
     b22:	7f 91       	pop	r23
     b24:	6f 91       	pop	r22
     b26:	5f 91       	pop	r21
     b28:	4f 91       	pop	r20
     b2a:	3f 91       	pop	r19
     b2c:	2f 91       	pop	r18
     b2e:	0f 90       	pop	r0
     b30:	0b be       	out	0x3b, r0	; 59
     b32:	0f 90       	pop	r0
     b34:	09 be       	out	0x39, r0	; 57
     b36:	0f 90       	pop	r0
     b38:	08 be       	out	0x38, r0	; 56
     b3a:	0f 90       	pop	r0
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	0f 90       	pop	r0
     b40:	1f 90       	pop	r1
     b42:	18 95       	reti

00000b44 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     b44:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     b46:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <stdio_base>
     b4a:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <stdio_base+0x1>
     b4e:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <ptr_put>
     b52:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <ptr_put+0x1>
     b56:	19 95       	eicall
     b58:	99 23       	and	r25, r25
     b5a:	1c f0       	brlt	.+6      	; 0xb62 <_write+0x1e>
		return -1;
	}
	return 1;
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     b62:	8f ef       	ldi	r24, 0xFF	; 255
     b64:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     b66:	08 95       	ret

00000b68 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     b68:	8f ef       	ldi	r24, 0xFF	; 255
     b6a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     b6e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     b72:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     b76:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     b7a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     b7e:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     b82:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
     b86:	08 95       	ret

00000b88 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	1f 92       	push	r1
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b92:	9f b7       	in	r25, 0x3f	; 63
     b94:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     b96:	f8 94       	cli
	return flags;
     b98:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     b9a:	e8 2f       	mov	r30, r24
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	e0 59       	subi	r30, 0x90	; 144
     ba0:	ff 4f       	sbci	r31, 0xFF	; 255
     ba2:	60 95       	com	r22
     ba4:	80 81       	ld	r24, Z
     ba6:	68 23       	and	r22, r24
     ba8:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     baa:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     bac:	0f 90       	pop	r0
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	08 95       	ret

00000bb4 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     bba:	66 db       	rcall	.-2356   	; 0x288 <usart_getchar>
     bbc:	88 83       	st	Y, r24
}
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	08 95       	ret

00000bc4 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     bc4:	59 cb       	rjmp	.-2382   	; 0x278 <usart_putchar>
}
     bc6:	08 95       	ret

00000bc8 <uart_terminal_init>:

#include <asf.h>
#include "uart.h"

void uart_terminal_init()
{
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	cd b7       	in	r28, 0x3d	; 61
     bce:	de b7       	in	r29, 0x3e	; 62
     bd0:	27 97       	sbiw	r28, 0x07	; 7
     bd2:	cd bf       	out	0x3d, r28	; 61
     bd4:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     bd6:	60 e1       	ldi	r22, 0x10	; 16
     bd8:	85 e0       	ldi	r24, 0x05	; 5
     bda:	d6 df       	rcall	.-84     	; 0xb88 <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
     bdc:	e0 e8       	ldi	r30, 0x80	; 128
     bde:	f6 e0       	ldi	r31, 0x06	; 6
     be0:	80 81       	ld	r24, Z
     be2:	88 60       	ori	r24, 0x08	; 8
     be4:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     be6:	80 ea       	ldi	r24, 0xA0	; 160
     be8:	9a e0       	ldi	r25, 0x0A	; 10
     bea:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <stdio_base>
     bee:	90 93 17 20 	sts	0x2017, r25	; 0x802017 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     bf2:	82 ee       	ldi	r24, 0xE2	; 226
     bf4:	95 e0       	ldi	r25, 0x05	; 5
     bf6:	80 93 14 20 	sts	0x2014, r24	; 0x802014 <ptr_put>
     bfa:	90 93 15 20 	sts	0x2015, r25	; 0x802015 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     bfe:	8a ed       	ldi	r24, 0xDA	; 218
     c00:	95 e0       	ldi	r25, 0x05	; 5
     c02:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <__data_end>
     c06:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <__data_end+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     c0a:	e6 e0       	ldi	r30, 0x06	; 6
     c0c:	f0 e2       	ldi	r31, 0x20	; 32
     c0e:	84 81       	ldd	r24, Z+4	; 0x04
     c10:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     c12:	85 81       	ldd	r24, Z+5	; 0x05
     c14:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     c16:	86 81       	ldd	r24, Z+6	; 0x06
     c18:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     c1a:	80 81       	ld	r24, Z
     c1c:	91 81       	ldd	r25, Z+1	; 0x01
     c1e:	a2 81       	ldd	r26, Z+2	; 0x02
     c20:	b3 81       	ldd	r27, Z+3	; 0x03
     c22:	89 83       	std	Y+1, r24	; 0x01
     c24:	9a 83       	std	Y+2, r25	; 0x02
     c26:	ab 83       	std	Y+3, r26	; 0x03
     c28:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     c2a:	60 e1       	ldi	r22, 0x10	; 16
     c2c:	85 e0       	ldi	r24, 0x05	; 5
     c2e:	ac df       	rcall	.-168    	; 0xb88 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     c30:	be 01       	movw	r22, r28
     c32:	6f 5f       	subi	r22, 0xFF	; 255
     c34:	7f 4f       	sbci	r23, 0xFF	; 255
     c36:	80 ea       	ldi	r24, 0xA0	; 160
     c38:	9a e0       	ldi	r25, 0x0A	; 10
     c3a:	3b dc       	rcall	.-1930   	; 0x4b2 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     c3c:	63 e2       	ldi	r22, 0x23	; 35
     c3e:	71 e0       	ldi	r23, 0x01	; 1
     c40:	82 ea       	ldi	r24, 0xA2	; 162
     c42:	95 e0       	ldi	r25, 0x05	; 5
     c44:	6b d0       	rcall	.+214    	; 0xd1c <fdevopen>
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf, not necessary to know how it works
	
     c46:	27 96       	adiw	r28, 0x07	; 7
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	de bf       	out	0x3e, r29	; 62
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	08 95       	ret

00000c52 <TCC0_init>:
	
}


void TCC0_init(uint16_t period)
{
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	ec 01       	movw	r28, r24
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     c58:	61 e0       	ldi	r22, 0x01	; 1
     c5a:	83 e0       	ldi	r24, 0x03	; 3
     c5c:	95 df       	rcall	.-214    	; 0xb88 <sysclk_enable_module>
	sysclk_enable_peripheral_clock(&TCC0);
	sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     c5e:	64 e0       	ldi	r22, 0x04	; 4
     c60:	83 e0       	ldi	r24, 0x03	; 3
     c62:	92 df       	rcall	.-220    	; 0xb88 <sysclk_enable_module>
			TCC0.CTRLA = 0x07;
     c64:	e0 e0       	ldi	r30, 0x00	; 0
     c66:	f8 e0       	ldi	r31, 0x08	; 8
     c68:	87 e0       	ldi	r24, 0x07	; 7
     c6a:	80 83       	st	Z, r24
			TCC0.CTRLB = 0x03;
     c6c:	83 e0       	ldi	r24, 0x03	; 3
     c6e:	81 83       	std	Z+1, r24	; 0x01
			TCC0.PER = period;
     c70:	c6 a3       	std	Z+38, r28	; 0x26
     c72:	d7 a3       	std	Z+39, r29	; 0x27
			TCC0.CCA = TCE0.PER - (TCC0.PER/10);
     c74:	40 91 26 0a 	lds	r20, 0x0A26	; 0x800a26 <__TEXT_REGION_LENGTH__+0x700a26>
     c78:	50 91 27 0a 	lds	r21, 0x0A27	; 0x800a27 <__TEXT_REGION_LENGTH__+0x700a27>
     c7c:	26 a1       	ldd	r18, Z+38	; 0x26
     c7e:	37 a1       	ldd	r19, Z+39	; 0x27
     c80:	ad ec       	ldi	r26, 0xCD	; 205
     c82:	bc ec       	ldi	r27, 0xCC	; 204
     c84:	3c d0       	rcall	.+120    	; 0xcfe <__umulhisi3>
     c86:	96 95       	lsr	r25
     c88:	87 95       	ror	r24
     c8a:	96 95       	lsr	r25
     c8c:	87 95       	ror	r24
     c8e:	96 95       	lsr	r25
     c90:	87 95       	ror	r24
     c92:	48 1b       	sub	r20, r24
     c94:	59 0b       	sbc	r21, r25
     c96:	40 a7       	std	Z+40, r20	; 0x28
     c98:	51 a7       	std	Z+41, r21	; 0x29
}
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	08 95       	ret

00000ca0 <main>:
void TCC0_init(uint16_t period);

int main (void)
{	/* Insert system clock initialization code here (sysclk_init()). */

	sysclk_init();
     ca0:	63 df       	rcall	.-314    	; 0xb68 <sysclk_init>

	/* Insert application code here, after the board has been initialized. */
	PORTQ.DIR = 0x08;
     ca2:	e0 ec       	ldi	r30, 0xC0	; 192
     ca4:	f7 e0       	ldi	r31, 0x07	; 7
     ca6:	88 e0       	ldi	r24, 0x08	; 8
     ca8:	80 83       	st	Z, r24
	PORTQ.OUT = 0x00;
     caa:	14 82       	std	Z+4, r1	; 0x04
	TCC0_init(62499);
     cac:	83 e2       	ldi	r24, 0x23	; 35
     cae:	94 ef       	ldi	r25, 0xF4	; 244
	uart_terminal_init();
     cb0:	d0 df       	rcall	.-96     	; 0xc52 <TCC0_init>
     cb2:	8a df       	rcall	.-236    	; 0xbc8 <uart_terminal_init>
	

	
}
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	08 95       	ret

00000cba <__udivmodsi4>:
     cba:	a1 e2       	ldi	r26, 0x21	; 33
     cbc:	1a 2e       	mov	r1, r26
     cbe:	aa 1b       	sub	r26, r26
     cc0:	bb 1b       	sub	r27, r27
     cc2:	fd 01       	movw	r30, r26
     cc4:	0d c0       	rjmp	.+26     	; 0xce0 <__udivmodsi4_ep>

00000cc6 <__udivmodsi4_loop>:
     cc6:	aa 1f       	adc	r26, r26
     cc8:	bb 1f       	adc	r27, r27
     cca:	ee 1f       	adc	r30, r30
     ccc:	ff 1f       	adc	r31, r31
     cce:	a2 17       	cp	r26, r18
     cd0:	b3 07       	cpc	r27, r19
     cd2:	e4 07       	cpc	r30, r20
     cd4:	f5 07       	cpc	r31, r21
     cd6:	20 f0       	brcs	.+8      	; 0xce0 <__udivmodsi4_ep>
     cd8:	a2 1b       	sub	r26, r18
     cda:	b3 0b       	sbc	r27, r19
     cdc:	e4 0b       	sbc	r30, r20
     cde:	f5 0b       	sbc	r31, r21

00000ce0 <__udivmodsi4_ep>:
     ce0:	66 1f       	adc	r22, r22
     ce2:	77 1f       	adc	r23, r23
     ce4:	88 1f       	adc	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	1a 94       	dec	r1
     cea:	69 f7       	brne	.-38     	; 0xcc6 <__udivmodsi4_loop>
     cec:	60 95       	com	r22
     cee:	70 95       	com	r23
     cf0:	80 95       	com	r24
     cf2:	90 95       	com	r25
     cf4:	9b 01       	movw	r18, r22
     cf6:	ac 01       	movw	r20, r24
     cf8:	bd 01       	movw	r22, r26
     cfa:	cf 01       	movw	r24, r30
     cfc:	08 95       	ret

00000cfe <__umulhisi3>:
     cfe:	a2 9f       	mul	r26, r18
     d00:	b0 01       	movw	r22, r0
     d02:	b3 9f       	mul	r27, r19
     d04:	c0 01       	movw	r24, r0
     d06:	a3 9f       	mul	r26, r19
     d08:	70 0d       	add	r23, r0
     d0a:	81 1d       	adc	r24, r1
     d0c:	11 24       	eor	r1, r1
     d0e:	91 1d       	adc	r25, r1
     d10:	b2 9f       	mul	r27, r18
     d12:	70 0d       	add	r23, r0
     d14:	81 1d       	adc	r24, r1
     d16:	11 24       	eor	r1, r1
     d18:	91 1d       	adc	r25, r1
     d1a:	08 95       	ret

00000d1c <fdevopen>:
     d1c:	0f 93       	push	r16
     d1e:	1f 93       	push	r17
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	00 97       	sbiw	r24, 0x00	; 0
     d26:	31 f4       	brne	.+12     	; 0xd34 <fdevopen+0x18>
     d28:	61 15       	cp	r22, r1
     d2a:	71 05       	cpc	r23, r1
     d2c:	19 f4       	brne	.+6      	; 0xd34 <fdevopen+0x18>
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	39 c0       	rjmp	.+114    	; 0xda6 <fdevopen+0x8a>
     d34:	8b 01       	movw	r16, r22
     d36:	ec 01       	movw	r28, r24
     d38:	6e e0       	ldi	r22, 0x0E	; 14
     d3a:	70 e0       	ldi	r23, 0x00	; 0
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	37 d0       	rcall	.+110    	; 0xdb0 <calloc>
     d42:	fc 01       	movw	r30, r24
     d44:	89 2b       	or	r24, r25
     d46:	99 f3       	breq	.-26     	; 0xd2e <fdevopen+0x12>
     d48:	80 e8       	ldi	r24, 0x80	; 128
     d4a:	83 83       	std	Z+3, r24	; 0x03
     d4c:	01 15       	cp	r16, r1
     d4e:	11 05       	cpc	r17, r1
     d50:	71 f0       	breq	.+28     	; 0xd6e <fdevopen+0x52>
     d52:	02 87       	std	Z+10, r16	; 0x0a
     d54:	13 87       	std	Z+11, r17	; 0x0b
     d56:	81 e8       	ldi	r24, 0x81	; 129
     d58:	83 83       	std	Z+3, r24	; 0x03
     d5a:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <__iob>
     d5e:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <__iob+0x1>
     d62:	89 2b       	or	r24, r25
     d64:	21 f4       	brne	.+8      	; 0xd6e <fdevopen+0x52>
     d66:	e0 93 18 20 	sts	0x2018, r30	; 0x802018 <__iob>
     d6a:	f0 93 19 20 	sts	0x2019, r31	; 0x802019 <__iob+0x1>
     d6e:	20 97       	sbiw	r28, 0x00	; 0
     d70:	c9 f0       	breq	.+50     	; 0xda4 <fdevopen+0x88>
     d72:	c0 87       	std	Z+8, r28	; 0x08
     d74:	d1 87       	std	Z+9, r29	; 0x09
     d76:	83 81       	ldd	r24, Z+3	; 0x03
     d78:	82 60       	ori	r24, 0x02	; 2
     d7a:	83 83       	std	Z+3, r24	; 0x03
     d7c:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <__iob+0x2>
     d80:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <__iob+0x3>
     d84:	89 2b       	or	r24, r25
     d86:	71 f4       	brne	.+28     	; 0xda4 <fdevopen+0x88>
     d88:	e0 93 1a 20 	sts	0x201A, r30	; 0x80201a <__iob+0x2>
     d8c:	f0 93 1b 20 	sts	0x201B, r31	; 0x80201b <__iob+0x3>
     d90:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <__iob+0x4>
     d94:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <__iob+0x5>
     d98:	89 2b       	or	r24, r25
     d9a:	21 f4       	brne	.+8      	; 0xda4 <fdevopen+0x88>
     d9c:	e0 93 1c 20 	sts	0x201C, r30	; 0x80201c <__iob+0x4>
     da0:	f0 93 1d 20 	sts	0x201D, r31	; 0x80201d <__iob+0x5>
     da4:	cf 01       	movw	r24, r30
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	1f 91       	pop	r17
     dac:	0f 91       	pop	r16
     dae:	08 95       	ret

00000db0 <calloc>:
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	86 9f       	mul	r24, r22
     dba:	80 01       	movw	r16, r0
     dbc:	87 9f       	mul	r24, r23
     dbe:	10 0d       	add	r17, r0
     dc0:	96 9f       	mul	r25, r22
     dc2:	10 0d       	add	r17, r0
     dc4:	11 24       	eor	r1, r1
     dc6:	c8 01       	movw	r24, r16
     dc8:	0d d0       	rcall	.+26     	; 0xde4 <malloc>
     dca:	ec 01       	movw	r28, r24
     dcc:	00 97       	sbiw	r24, 0x00	; 0
     dce:	21 f0       	breq	.+8      	; 0xdd8 <calloc+0x28>
     dd0:	a8 01       	movw	r20, r16
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	27 d1       	rcall	.+590    	; 0x1026 <memset>
     dd8:	ce 01       	movw	r24, r28
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	1f 91       	pop	r17
     de0:	0f 91       	pop	r16
     de2:	08 95       	ret

00000de4 <malloc>:
     de4:	0f 93       	push	r16
     de6:	1f 93       	push	r17
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	91 05       	cpc	r25, r1
     df0:	10 f4       	brcc	.+4      	; 0xdf6 <malloc+0x12>
     df2:	82 e0       	ldi	r24, 0x02	; 2
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	e0 91 20 20 	lds	r30, 0x2020	; 0x802020 <__flp>
     dfa:	f0 91 21 20 	lds	r31, 0x2021	; 0x802021 <__flp+0x1>
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	a0 e0       	ldi	r26, 0x00	; 0
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	30 97       	sbiw	r30, 0x00	; 0
     e08:	19 f1       	breq	.+70     	; 0xe50 <malloc+0x6c>
     e0a:	40 81       	ld	r20, Z
     e0c:	51 81       	ldd	r21, Z+1	; 0x01
     e0e:	02 81       	ldd	r16, Z+2	; 0x02
     e10:	13 81       	ldd	r17, Z+3	; 0x03
     e12:	48 17       	cp	r20, r24
     e14:	59 07       	cpc	r21, r25
     e16:	c8 f0       	brcs	.+50     	; 0xe4a <malloc+0x66>
     e18:	84 17       	cp	r24, r20
     e1a:	95 07       	cpc	r25, r21
     e1c:	69 f4       	brne	.+26     	; 0xe38 <malloc+0x54>
     e1e:	10 97       	sbiw	r26, 0x00	; 0
     e20:	31 f0       	breq	.+12     	; 0xe2e <malloc+0x4a>
     e22:	12 96       	adiw	r26, 0x02	; 2
     e24:	0c 93       	st	X, r16
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	13 96       	adiw	r26, 0x03	; 3
     e2a:	1c 93       	st	X, r17
     e2c:	27 c0       	rjmp	.+78     	; 0xe7c <malloc+0x98>
     e2e:	00 93 20 20 	sts	0x2020, r16	; 0x802020 <__flp>
     e32:	10 93 21 20 	sts	0x2021, r17	; 0x802021 <__flp+0x1>
     e36:	22 c0       	rjmp	.+68     	; 0xe7c <malloc+0x98>
     e38:	21 15       	cp	r18, r1
     e3a:	31 05       	cpc	r19, r1
     e3c:	19 f0       	breq	.+6      	; 0xe44 <malloc+0x60>
     e3e:	42 17       	cp	r20, r18
     e40:	53 07       	cpc	r21, r19
     e42:	18 f4       	brcc	.+6      	; 0xe4a <malloc+0x66>
     e44:	9a 01       	movw	r18, r20
     e46:	bd 01       	movw	r22, r26
     e48:	ef 01       	movw	r28, r30
     e4a:	df 01       	movw	r26, r30
     e4c:	f8 01       	movw	r30, r16
     e4e:	db cf       	rjmp	.-74     	; 0xe06 <malloc+0x22>
     e50:	21 15       	cp	r18, r1
     e52:	31 05       	cpc	r19, r1
     e54:	f9 f0       	breq	.+62     	; 0xe94 <malloc+0xb0>
     e56:	28 1b       	sub	r18, r24
     e58:	39 0b       	sbc	r19, r25
     e5a:	24 30       	cpi	r18, 0x04	; 4
     e5c:	31 05       	cpc	r19, r1
     e5e:	80 f4       	brcc	.+32     	; 0xe80 <malloc+0x9c>
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	9b 81       	ldd	r25, Y+3	; 0x03
     e64:	61 15       	cp	r22, r1
     e66:	71 05       	cpc	r23, r1
     e68:	21 f0       	breq	.+8      	; 0xe72 <malloc+0x8e>
     e6a:	fb 01       	movw	r30, r22
     e6c:	82 83       	std	Z+2, r24	; 0x02
     e6e:	93 83       	std	Z+3, r25	; 0x03
     e70:	04 c0       	rjmp	.+8      	; 0xe7a <malloc+0x96>
     e72:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <__flp>
     e76:	90 93 21 20 	sts	0x2021, r25	; 0x802021 <__flp+0x1>
     e7a:	fe 01       	movw	r30, r28
     e7c:	32 96       	adiw	r30, 0x02	; 2
     e7e:	44 c0       	rjmp	.+136    	; 0xf08 <malloc+0x124>
     e80:	fe 01       	movw	r30, r28
     e82:	e2 0f       	add	r30, r18
     e84:	f3 1f       	adc	r31, r19
     e86:	81 93       	st	Z+, r24
     e88:	91 93       	st	Z+, r25
     e8a:	22 50       	subi	r18, 0x02	; 2
     e8c:	31 09       	sbc	r19, r1
     e8e:	28 83       	st	Y, r18
     e90:	39 83       	std	Y+1, r19	; 0x01
     e92:	3a c0       	rjmp	.+116    	; 0xf08 <malloc+0x124>
     e94:	20 91 1e 20 	lds	r18, 0x201E	; 0x80201e <__brkval>
     e98:	30 91 1f 20 	lds	r19, 0x201F	; 0x80201f <__brkval+0x1>
     e9c:	23 2b       	or	r18, r19
     e9e:	41 f4       	brne	.+16     	; 0xeb0 <malloc+0xcc>
     ea0:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
     ea4:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
     ea8:	20 93 1e 20 	sts	0x201E, r18	; 0x80201e <__brkval>
     eac:	30 93 1f 20 	sts	0x201F, r19	; 0x80201f <__brkval+0x1>
     eb0:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
     eb4:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
     eb8:	21 15       	cp	r18, r1
     eba:	31 05       	cpc	r19, r1
     ebc:	41 f4       	brne	.+16     	; 0xece <malloc+0xea>
     ebe:	2d b7       	in	r18, 0x3d	; 61
     ec0:	3e b7       	in	r19, 0x3e	; 62
     ec2:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
     ec6:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
     eca:	24 1b       	sub	r18, r20
     ecc:	35 0b       	sbc	r19, r21
     ece:	e0 91 1e 20 	lds	r30, 0x201E	; 0x80201e <__brkval>
     ed2:	f0 91 1f 20 	lds	r31, 0x201F	; 0x80201f <__brkval+0x1>
     ed6:	e2 17       	cp	r30, r18
     ed8:	f3 07       	cpc	r31, r19
     eda:	a0 f4       	brcc	.+40     	; 0xf04 <malloc+0x120>
     edc:	2e 1b       	sub	r18, r30
     ede:	3f 0b       	sbc	r19, r31
     ee0:	28 17       	cp	r18, r24
     ee2:	39 07       	cpc	r19, r25
     ee4:	78 f0       	brcs	.+30     	; 0xf04 <malloc+0x120>
     ee6:	ac 01       	movw	r20, r24
     ee8:	4e 5f       	subi	r20, 0xFE	; 254
     eea:	5f 4f       	sbci	r21, 0xFF	; 255
     eec:	24 17       	cp	r18, r20
     eee:	35 07       	cpc	r19, r21
     ef0:	48 f0       	brcs	.+18     	; 0xf04 <malloc+0x120>
     ef2:	4e 0f       	add	r20, r30
     ef4:	5f 1f       	adc	r21, r31
     ef6:	40 93 1e 20 	sts	0x201E, r20	; 0x80201e <__brkval>
     efa:	50 93 1f 20 	sts	0x201F, r21	; 0x80201f <__brkval+0x1>
     efe:	81 93       	st	Z+, r24
     f00:	91 93       	st	Z+, r25
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <malloc+0x124>
     f04:	e0 e0       	ldi	r30, 0x00	; 0
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	cf 01       	movw	r24, r30
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	1f 91       	pop	r17
     f10:	0f 91       	pop	r16
     f12:	08 95       	ret

00000f14 <free>:
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	00 97       	sbiw	r24, 0x00	; 0
     f1a:	09 f4       	brne	.+2      	; 0xf1e <free+0xa>
     f1c:	81 c0       	rjmp	.+258    	; 0x1020 <free+0x10c>
     f1e:	fc 01       	movw	r30, r24
     f20:	32 97       	sbiw	r30, 0x02	; 2
     f22:	12 82       	std	Z+2, r1	; 0x02
     f24:	13 82       	std	Z+3, r1	; 0x03
     f26:	a0 91 20 20 	lds	r26, 0x2020	; 0x802020 <__flp>
     f2a:	b0 91 21 20 	lds	r27, 0x2021	; 0x802021 <__flp+0x1>
     f2e:	10 97       	sbiw	r26, 0x00	; 0
     f30:	81 f4       	brne	.+32     	; 0xf52 <free+0x3e>
     f32:	20 81       	ld	r18, Z
     f34:	31 81       	ldd	r19, Z+1	; 0x01
     f36:	82 0f       	add	r24, r18
     f38:	93 1f       	adc	r25, r19
     f3a:	20 91 1e 20 	lds	r18, 0x201E	; 0x80201e <__brkval>
     f3e:	30 91 1f 20 	lds	r19, 0x201F	; 0x80201f <__brkval+0x1>
     f42:	28 17       	cp	r18, r24
     f44:	39 07       	cpc	r19, r25
     f46:	51 f5       	brne	.+84     	; 0xf9c <free+0x88>
     f48:	e0 93 1e 20 	sts	0x201E, r30	; 0x80201e <__brkval>
     f4c:	f0 93 1f 20 	sts	0x201F, r31	; 0x80201f <__brkval+0x1>
     f50:	67 c0       	rjmp	.+206    	; 0x1020 <free+0x10c>
     f52:	ed 01       	movw	r28, r26
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	ce 17       	cp	r28, r30
     f5a:	df 07       	cpc	r29, r31
     f5c:	40 f4       	brcc	.+16     	; 0xf6e <free+0x5a>
     f5e:	4a 81       	ldd	r20, Y+2	; 0x02
     f60:	5b 81       	ldd	r21, Y+3	; 0x03
     f62:	9e 01       	movw	r18, r28
     f64:	41 15       	cp	r20, r1
     f66:	51 05       	cpc	r21, r1
     f68:	f1 f0       	breq	.+60     	; 0xfa6 <free+0x92>
     f6a:	ea 01       	movw	r28, r20
     f6c:	f5 cf       	rjmp	.-22     	; 0xf58 <free+0x44>
     f6e:	c2 83       	std	Z+2, r28	; 0x02
     f70:	d3 83       	std	Z+3, r29	; 0x03
     f72:	40 81       	ld	r20, Z
     f74:	51 81       	ldd	r21, Z+1	; 0x01
     f76:	84 0f       	add	r24, r20
     f78:	95 1f       	adc	r25, r21
     f7a:	c8 17       	cp	r28, r24
     f7c:	d9 07       	cpc	r29, r25
     f7e:	59 f4       	brne	.+22     	; 0xf96 <free+0x82>
     f80:	88 81       	ld	r24, Y
     f82:	99 81       	ldd	r25, Y+1	; 0x01
     f84:	84 0f       	add	r24, r20
     f86:	95 1f       	adc	r25, r21
     f88:	02 96       	adiw	r24, 0x02	; 2
     f8a:	80 83       	st	Z, r24
     f8c:	91 83       	std	Z+1, r25	; 0x01
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	9b 81       	ldd	r25, Y+3	; 0x03
     f92:	82 83       	std	Z+2, r24	; 0x02
     f94:	93 83       	std	Z+3, r25	; 0x03
     f96:	21 15       	cp	r18, r1
     f98:	31 05       	cpc	r19, r1
     f9a:	29 f4       	brne	.+10     	; 0xfa6 <free+0x92>
     f9c:	e0 93 20 20 	sts	0x2020, r30	; 0x802020 <__flp>
     fa0:	f0 93 21 20 	sts	0x2021, r31	; 0x802021 <__flp+0x1>
     fa4:	3d c0       	rjmp	.+122    	; 0x1020 <free+0x10c>
     fa6:	e9 01       	movw	r28, r18
     fa8:	ea 83       	std	Y+2, r30	; 0x02
     faa:	fb 83       	std	Y+3, r31	; 0x03
     fac:	49 91       	ld	r20, Y+
     fae:	59 91       	ld	r21, Y+
     fb0:	c4 0f       	add	r28, r20
     fb2:	d5 1f       	adc	r29, r21
     fb4:	ec 17       	cp	r30, r28
     fb6:	fd 07       	cpc	r31, r29
     fb8:	61 f4       	brne	.+24     	; 0xfd2 <free+0xbe>
     fba:	80 81       	ld	r24, Z
     fbc:	91 81       	ldd	r25, Z+1	; 0x01
     fbe:	84 0f       	add	r24, r20
     fc0:	95 1f       	adc	r25, r21
     fc2:	02 96       	adiw	r24, 0x02	; 2
     fc4:	e9 01       	movw	r28, r18
     fc6:	88 83       	st	Y, r24
     fc8:	99 83       	std	Y+1, r25	; 0x01
     fca:	82 81       	ldd	r24, Z+2	; 0x02
     fcc:	93 81       	ldd	r25, Z+3	; 0x03
     fce:	8a 83       	std	Y+2, r24	; 0x02
     fd0:	9b 83       	std	Y+3, r25	; 0x03
     fd2:	e0 e0       	ldi	r30, 0x00	; 0
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	12 96       	adiw	r26, 0x02	; 2
     fd8:	8d 91       	ld	r24, X+
     fda:	9c 91       	ld	r25, X
     fdc:	13 97       	sbiw	r26, 0x03	; 3
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	19 f0       	breq	.+6      	; 0xfe8 <free+0xd4>
     fe2:	fd 01       	movw	r30, r26
     fe4:	dc 01       	movw	r26, r24
     fe6:	f7 cf       	rjmp	.-18     	; 0xfd6 <free+0xc2>
     fe8:	8d 91       	ld	r24, X+
     fea:	9c 91       	ld	r25, X
     fec:	11 97       	sbiw	r26, 0x01	; 1
     fee:	9d 01       	movw	r18, r26
     ff0:	2e 5f       	subi	r18, 0xFE	; 254
     ff2:	3f 4f       	sbci	r19, 0xFF	; 255
     ff4:	82 0f       	add	r24, r18
     ff6:	93 1f       	adc	r25, r19
     ff8:	20 91 1e 20 	lds	r18, 0x201E	; 0x80201e <__brkval>
     ffc:	30 91 1f 20 	lds	r19, 0x201F	; 0x80201f <__brkval+0x1>
    1000:	28 17       	cp	r18, r24
    1002:	39 07       	cpc	r19, r25
    1004:	69 f4       	brne	.+26     	; 0x1020 <free+0x10c>
    1006:	30 97       	sbiw	r30, 0x00	; 0
    1008:	29 f4       	brne	.+10     	; 0x1014 <free+0x100>
    100a:	10 92 20 20 	sts	0x2020, r1	; 0x802020 <__flp>
    100e:	10 92 21 20 	sts	0x2021, r1	; 0x802021 <__flp+0x1>
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <free+0x104>
    1014:	12 82       	std	Z+2, r1	; 0x02
    1016:	13 82       	std	Z+3, r1	; 0x03
    1018:	a0 93 1e 20 	sts	0x201E, r26	; 0x80201e <__brkval>
    101c:	b0 93 1f 20 	sts	0x201F, r27	; 0x80201f <__brkval+0x1>
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	08 95       	ret

00001026 <memset>:
    1026:	dc 01       	movw	r26, r24
    1028:	01 c0       	rjmp	.+2      	; 0x102c <memset+0x6>
    102a:	6d 93       	st	X+, r22
    102c:	41 50       	subi	r20, 0x01	; 1
    102e:	50 40       	sbci	r21, 0x00	; 0
    1030:	e0 f7       	brcc	.-8      	; 0x102a <memset+0x4>
    1032:	08 95       	ret

00001034 <_exit>:
    1034:	f8 94       	cli

00001036 <__stop_program>:
    1036:	ff cf       	rjmp	.-2      	; 0x1036 <__stop_program>
